//
// This file contains an 'Intel Peripheral Driver' and is
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may
// be modified by the user, subject to additional terms of the
// license agreement
//
// *++
//
// Copyright (c) 1999 - 2015 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//
//
// Module Name:
//
//   CpuPMSAPMSocketSetup.hfr
//
// Abstract:
//
//   Power Management Entry Criteria Per-socket Setup formset.
//
// --*/

        // SAPMCTL.IIO0_PKGC_CLOCK_GATE_DISABLE  Bit[0]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.Iio0PkgcClkGateDis[INDEX],
        #if ( INDEX == 0)
          prompt  = STRING_TOKEN(STR_IIO0_PKGC_CLOCK_GATE_DISABLE_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt  = STRING_TOKEN(STR_IIO0_PKGC_CLOCK_GATE_DISABLE_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt  = STRING_TOKEN(STR_IIO0_PKGC_CLOCK_GATE_DISABLE_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt  = STRING_TOKEN(STR_IIO0_PKGC_CLOCK_GATE_DISABLE_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt  = STRING_TOKEN(STR_IIO0_PKGC_CLOCK_GATE_DISABLE_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt  = STRING_TOKEN(STR_IIO0_PKGC_CLOCK_GATE_DISABLE_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt  = STRING_TOKEN(STR_IIO0_PKGC_CLOCK_GATE_DISABLE_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt  = STRING_TOKEN(STR_IIO0_PKGC_CLOCK_GATE_DISABLE_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_IIO_PKGC_CLOCK_GATE_DISABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

        // SAPMCTL.IIO1_PKGC_CLOCK_GATE_DISABLE  Bit[1]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.Iio1PkgcClkGateDis[INDEX],
        #if ( INDEX == 0)
          prompt  = STRING_TOKEN(STR_IIO1_PKGC_CLOCK_GATE_DISABLE_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt  = STRING_TOKEN(STR_IIO1_PKGC_CLOCK_GATE_DISABLE_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt  = STRING_TOKEN(STR_IIO1_PKGC_CLOCK_GATE_DISABLE_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt  = STRING_TOKEN(STR_IIO1_PKGC_CLOCK_GATE_DISABLE_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt  = STRING_TOKEN(STR_IIO1_PKGC_CLOCK_GATE_DISABLE_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt  = STRING_TOKEN(STR_IIO1_PKGC_CLOCK_GATE_DISABLE_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt  = STRING_TOKEN(STR_IIO1_PKGC_CLOCK_GATE_DISABLE_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt  = STRING_TOKEN(STR_IIO1_PKGC_CLOCK_GATE_DISABLE_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_IIO_PKGC_CLOCK_GATE_DISABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

        // SAPMCTL.IIO2_PKGC_CLOCK_GATE_DISABLE  Bit[2]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.Iio2PkgcClkGateDis[INDEX],
        #if ( INDEX == 0)
          prompt  = STRING_TOKEN(STR_IIO2_PKGC_CLOCK_GATE_DISABLE_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt  = STRING_TOKEN(STR_IIO2_PKGC_CLOCK_GATE_DISABLE_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt  = STRING_TOKEN(STR_IIO2_PKGC_CLOCK_GATE_DISABLE_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt  = STRING_TOKEN(STR_IIO2_PKGC_CLOCK_GATE_DISABLE_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt  = STRING_TOKEN(STR_IIO2_PKGC_CLOCK_GATE_DISABLE_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt  = STRING_TOKEN(STR_IIO2_PKGC_CLOCK_GATE_DISABLE_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt  = STRING_TOKEN(STR_IIO2_PKGC_CLOCK_GATE_DISABLE_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt  = STRING_TOKEN(STR_IIO2_PKGC_CLOCK_GATE_DISABLE_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_IIO_PKGC_CLOCK_GATE_DISABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

      // SAPMCTL.KTI01_PKGC_CLOCK_GATE_DISABLE  Bit[3]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.Kti01PkgcClkGateDis[INDEX],
        #if ( INDEX == 0)
          prompt  = STRING_TOKEN(STR_QPI01_PKGC_CLOCK_GATE_DISABLE_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt  = STRING_TOKEN(STR_QPI01_PKGC_CLOCK_GATE_DISABLE_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt  = STRING_TOKEN(STR_QPI01_PKGC_CLOCK_GATE_DISABLE_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt  = STRING_TOKEN(STR_QPI01_PKGC_CLOCK_GATE_DISABLE_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt  = STRING_TOKEN(STR_QPI01_PKGC_CLOCK_GATE_DISABLE_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt  = STRING_TOKEN(STR_QPI01_PKGC_CLOCK_GATE_DISABLE_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt  = STRING_TOKEN(STR_QPI01_PKGC_CLOCK_GATE_DISABLE_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt  = STRING_TOKEN(STR_QPI01_PKGC_CLOCK_GATE_DISABLE_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_QPI01_PKGC_CLOCK_GATE_DISABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

      // SAPMCTL.KTI23_PKGC_CLOCK_GATE_DISABLE  Bit[4]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.Kti23PkgcClkGateDis[INDEX],
        #if ( INDEX == 0)
          prompt  = STRING_TOKEN(STR_QPI2_PKGC_CLOCK_GATE_DISABLE_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt  = STRING_TOKEN(STR_QPI2_PKGC_CLOCK_GATE_DISABLE_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt  = STRING_TOKEN(STR_QPI2_PKGC_CLOCK_GATE_DISABLE_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt  = STRING_TOKEN(STR_QPI2_PKGC_CLOCK_GATE_DISABLE_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt  = STRING_TOKEN(STR_QPI2_PKGC_CLOCK_GATE_DISABLE_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt  = STRING_TOKEN(STR_QPI2_PKGC_CLOCK_GATE_DISABLE_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt  = STRING_TOKEN(STR_QPI2_PKGC_CLOCK_GATE_DISABLE_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt  = STRING_TOKEN(STR_QPI2_PKGC_CLOCK_GATE_DISABLE_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_QPI2_PKGC_CLOCK_GATE_DISABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

      // SAPMCTL.MC1_PKGC_CLK_GATE_DISABLE  Bit[7]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.Mc1PkgcClkGateDis[INDEX],
        #if ( INDEX == 0)
          prompt  = STRING_TOKEN(STR_MC1_PKGC_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt  = STRING_TOKEN(STR_MC1_PKGC_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt  = STRING_TOKEN(STR_MC1_PKGC_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt  = STRING_TOKEN(STR_MC1_PKGC_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt  = STRING_TOKEN(STR_MC1_PKGC_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt  = STRING_TOKEN(STR_MC1_PKGC_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt  = STRING_TOKEN(STR_MC1_PKGC_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt  = STRING_TOKEN(STR_MC1_PKGC_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_MC1_PKGC_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
        endoneof;


      // SAPMCTL.MC0_PKGC_CLK_GATE_DISABLE  Bit[6]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.Mc0PkgcClkGateDis[INDEX],
        #if ( INDEX == 0)
          prompt  = STRING_TOKEN(STR_MC0_PKGC_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt  = STRING_TOKEN(STR_MC0_PKGC_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt  = STRING_TOKEN(STR_MC0_PKGC_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt  = STRING_TOKEN(STR_MC0_PKGC_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt  = STRING_TOKEN(STR_MC0_PKGC_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt  = STRING_TOKEN(STR_MC0_PKGC_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt  = STRING_TOKEN(STR_MC0_PKGC_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt  = STRING_TOKEN(STR_MC0_PKGC_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_MC0_PKGC_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
      endoneof;

      // SAPMCTL.KTI01_PLL_OFF_ENABLE  Bit[19]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.Kti01pllOffEna[INDEX],
        #if ( INDEX == 0)
          prompt      = STRING_TOKEN(STR_KTI01_PLL_OFF_ENA_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt      = STRING_TOKEN(STR_KTI01_PLL_OFF_ENA_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt      = STRING_TOKEN(STR_KTI01_PLL_OFF_ENA_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt      = STRING_TOKEN(STR_KTI01_PLL_OFF_ENA_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt      = STRING_TOKEN(STR_KTI01_PLL_OFF_ENA_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt      = STRING_TOKEN(STR_KTI01_PLL_OFF_ENA_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt      = STRING_TOKEN(STR_KTI01_PLL_OFF_ENA_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt      = STRING_TOKEN(STR_KTI01_PLL_OFF_ENA_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_KTI01_PLL_OFF_ENA_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // SAPMCTL.KTI23_PLL_OFF_ENABLE  Bit[20]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.Kti23pllOffEna[INDEX],
        #if ( INDEX == 0)
          prompt      = STRING_TOKEN(STR_KTI23_PLL_OFF_ENA_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt      = STRING_TOKEN(STR_KTI23_PLL_OFF_ENA_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt      = STRING_TOKEN(STR_KTI23_PLL_OFF_ENA_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt      = STRING_TOKEN(STR_KTI23_PLL_OFF_ENA_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt      = STRING_TOKEN(STR_KTI23_PLL_OFF_ENA_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt      = STRING_TOKEN(STR_KTI23_PLL_OFF_ENA_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt      = STRING_TOKEN(STR_KTI23_PLL_OFF_ENA_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt      = STRING_TOKEN(STR_KTI23_PLL_OFF_ENA_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_KTI23_PLL_OFF_ENA_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // SAPMCTL.IIO0_PLL_OFF_ENABLE   Bit[16]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.P0pllOffEna[INDEX],
        #if ( INDEX == 0)
          prompt      = STRING_TOKEN(STR_P0PLL_OFF_ENA_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt      = STRING_TOKEN(STR_P0PLL_OFF_ENA_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt      = STRING_TOKEN(STR_P0PLL_OFF_ENA_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt      = STRING_TOKEN(STR_P0PLL_OFF_ENA_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt      = STRING_TOKEN(STR_P0PLL_OFF_ENA_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt      = STRING_TOKEN(STR_P0PLL_OFF_ENA_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt      = STRING_TOKEN(STR_P0PLL_OFF_ENA_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt      = STRING_TOKEN(STR_P0PLL_OFF_ENA_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_PPLL_OFF_ENA_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // SAPMCTL.IIO1_PLL_OFF_ENABLE   Bit[17]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.P1pllOffEna[INDEX],
        #if ( INDEX == 0)
          prompt      = STRING_TOKEN(STR_P1PLL_OFF_ENA_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt      = STRING_TOKEN(STR_P1PLL_OFF_ENA_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt      = STRING_TOKEN(STR_P1PLL_OFF_ENA_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt      = STRING_TOKEN(STR_P1PLL_OFF_ENA_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt      = STRING_TOKEN(STR_P1PLL_OFF_ENA_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt      = STRING_TOKEN(STR_P1PLL_OFF_ENA_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt      = STRING_TOKEN(STR_P1PLL_OFF_ENA_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt      = STRING_TOKEN(STR_P1PLL_OFF_ENA_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_PPLL_OFF_ENA_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // SAPMCTL.IIO2_PLL_OFF_ENABLE   Bit[18]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.P2pllOffEna[INDEX],
        #if ( INDEX == 0)
          prompt      = STRING_TOKEN(STR_P2PLL_OFF_ENA_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt      = STRING_TOKEN(STR_P2PLL_OFF_ENA_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt      = STRING_TOKEN(STR_P2PLL_OFF_ENA_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt      = STRING_TOKEN(STR_P2PLL_OFF_ENA_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt      = STRING_TOKEN(STR_P2PLL_OFF_ENA_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt      = STRING_TOKEN(STR_P2PLL_OFF_ENA_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt      = STRING_TOKEN(STR_P2PLL_OFF_ENA_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt      = STRING_TOKEN(STR_P2PLL_OFF_ENA_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_PPLL_OFF_ENA_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // SAPMCTL.MC0_PLL_OFF_ENABLE   Bit[22]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.Mc0pllOffEna[INDEX],
        #if ( INDEX == 0)
          prompt      = STRING_TOKEN(STR_MC0PLL_OFF_ENA_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt      = STRING_TOKEN(STR_MC0PLL_OFF_ENA_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt      = STRING_TOKEN(STR_MC0PLL_OFF_ENA_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt      = STRING_TOKEN(STR_MC0PLL_OFF_ENA_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt      = STRING_TOKEN(STR_MC0PLL_OFF_ENA_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt      = STRING_TOKEN(STR_MC0PLL_OFF_ENA_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt      = STRING_TOKEN(STR_MC0PLL_OFF_ENA_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt      = STRING_TOKEN(STR_MC0PLL_OFF_ENA_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_MPLL_OFF_ENA_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // SAPMCTL.MC1_PLL_OFF_ENABLE   Bit[23]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.Mc1pllOffEna[INDEX],
        #if ( INDEX == 0)
          prompt      = STRING_TOKEN(STR_MC1PLL_OFF_ENA_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt      = STRING_TOKEN(STR_MC1PLL_OFF_ENA_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt      = STRING_TOKEN(STR_MC1PLL_OFF_ENA_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt      = STRING_TOKEN(STR_MC1PLL_OFF_ENA_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt      = STRING_TOKEN(STR_MC1PLL_OFF_ENA_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt      = STRING_TOKEN(STR_MC1PLL_OFF_ENA_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt      = STRING_TOKEN(STR_MC1PLL_OFF_ENA_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt      = STRING_TOKEN(STR_MC1PLL_OFF_ENA_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_MPLL_OFF_ENA_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // SAPMCTL.SETVID_DECAY_DISABLE
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.SetvidDecayDisable[INDEX],
        #if ( INDEX == 0)
          prompt      = STRING_TOKEN(STR_SETVID_DECAY_DISABLE_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt      = STRING_TOKEN(STR_SETVID_DECAY_DISABLE_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt      = STRING_TOKEN(STR_SETVID_DECAY_DISABLE_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt      = STRING_TOKEN(STR_SETVID_DECAY_DISABLE_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt      = STRING_TOKEN(STR_SETVID_DECAY_DISABLE_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt      = STRING_TOKEN(STR_SETVID_DECAY_DISABLE_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt      = STRING_TOKEN(STR_SETVID_DECAY_DISABLE_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt      = STRING_TOKEN(STR_SETVID_DECAY_DISABLE_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_SETVID_DECAY_DISABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
        endoneof;

      // SAPMCTL.LOCK
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.SapmCtlLock[INDEX],
        #if ( INDEX == 0)
          prompt      = STRING_TOKEN(STR_SAPMCTL_LOCK_S0),
        #endif // INDEX == 0
        #if ( INDEX == 1)
          prompt      = STRING_TOKEN(STR_SAPMCTL_LOCK_S1),
        #endif // INDEX == 1
        #if ( INDEX == 2)
          prompt      = STRING_TOKEN(STR_SAPMCTL_LOCK_S2),
        #endif // INDEX == 2
        #if ( INDEX == 3)
          prompt      = STRING_TOKEN(STR_SAPMCTL_LOCK_S3),
        #endif // INDEX == 3
        #if ( INDEX == 4)
          prompt      = STRING_TOKEN(STR_SAPMCTL_LOCK_S4),
        #endif // INDEX == 4
        #if ( INDEX == 5)
          prompt      = STRING_TOKEN(STR_SAPMCTL_LOCK_S5),
        #endif // INDEX == 5
        #if ( INDEX == 6)
          prompt      = STRING_TOKEN(STR_SAPMCTL_LOCK_S6),
        #endif // INDEX == 6
        #if ( INDEX == 7)
          prompt      = STRING_TOKEN(STR_SAPMCTL_LOCK_S7),
        #endif // INDEX == 7
          help        = STRING_TOKEN(STR_SAPMCTL_LOCK_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;



 
