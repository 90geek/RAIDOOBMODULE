//****************************************************************************
//**                                                                        **
//**            (C)Copyright 1993-2016 Supermicro Computer, Inc.            **
//**                                                                        **
//****************************************************************************
//  File History
//
//  Rev. 1.02
//    Bug Fix:  Export performance tuning items.
//    Reason:   
//    Auditor:  Kasber Chen
//    Date:     May/26/2017
//
//  Rev. 1.01
//    Bug Fix:  Draft template v0.1.
//    Reason:   
//    Auditor:  Jimmy Chiu
//    Date:     Jan/17/2017
//
//  Rev. 1.00
//    Bug Fix:  Draft template.
//    Reason:   
//    Auditor:  Kasber Chen
//    Date:     Dec/16/2016
//
//****************************************************************************
//
// This file contains an 'Intel Peripheral Driver' and is
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may
// be modified by the user, subject to additional terms of the
// license agreement
//
// *++
//
// Copyright (c) 1999 - 2016 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
//
//
// Module Name:
//
//   KtiSetup.hfr
//
// Abstract:
//
//   KTI Setup formset.
//
// Revision History:
//
// --*/
#include <KtiSetupDefinitions.h>
  //
  // Kti Submenu
  //

form formid = VFR_FORMID_KTI,
    title   = STRING_TOKEN(STR_KTI_CONFIG_FORM_TITLE);

    subtitle text = STRING_TOKEN(STR_KTI_CONFIG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);

#if (SMCPKG_SUPPORT == 0) || (SMC_SETUP_STYLE == 0)
    //
    // Jump to KTI Status Form
    //
    goto VFR_FORMID_KTI_GENERAL,
        prompt  = STRING_TOKEN(STR_KTI_GENERAL_FORM_TITLE),
        help    = STRING_TOKEN(STR_KTI_GENERAL_FORM_HELP);
#endif

    suppressif SMC_SETUP_STYLE;  //SMCPKG_SUPPORT S
    //
    // Jump to KTI Per Socket Configuration Form
    //
    goto VFR_FORMID_KTIPERSOCKET,
        prompt = STRING_TOKEN(STR_KTI_PERSOCKET_FORM_TITLE),
        help   = STRING_TOKEN(STR_KTI_PERSOCKET_FORM_HELP);

    //
    // Jump to KTI Dfx Configuration Form
    //
    goto VFR_FORMID_KTI_DFX,
        prompt = STRING_TOKEN(STR_KTI_DFX_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN(STR_KTI_DFX_CONFIG_FORM_HELP);
    endif;      //SMCPKG_SUPPORT E

#if (SMCPKG_SUPPORT == 0) || (SMC_SETUP_STYLE == 0)
endform;
#endif

#if (SMCPKG_SUPPORT == 0) || (SMC_SETUP_STYLE == 0)
form formid = VFR_FORMID_KTI_GENERAL,
    title   = STRING_TOKEN(STR_KTI_GENERAL_FORM_TITLE);

    subtitle text = STRING_TOKEN(STR_KTI_GENERAL_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
#endif

//SMCPKG_SUPPORT S
#if (SMCPKG_SUPPORT == 0) || (SMC_SETUP_STYLE == 0)
    subtitle text = STRING_TOKEN(STR_KTI_STATUS_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
#endif

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_NUMBER_OF_CPU),
        text   = STRING_TOKEN(STR_KTI_NUMBER_OF_CPU_VAL),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_NUMBER_OF_IIO),
        text   = STRING_TOKEN(STR_KTI_NUMBER_OF_IIO_VAL),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_LINK_SPEED),
        text   = STRING_TOKEN(STR_KTI_LINK_SPEED_STATUS),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_LINK_FREQ),
        text   = STRING_TOKEN(STR_KTI_LINK_FREQ_STATUS),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_GMMIOL_BASE_LIMIT),
        text   = STRING_TOKEN(STR_KTI_GMMIOL_BASE_LIMIT_VAL),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_GMMIOH_BASE_LIMIT),
        text   = STRING_TOKEN(STR_KTI_GMMIOH_BASE_LIMIT_VAL),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_PCI_E_CFG_BASE),
        text   = STRING_TOKEN(STR_KTI_PCI_E_CFG_BASE_VAL),
        flags  = 0, key = 0;
        
//SMCPKG_SUPPORT E

    //
    // Jump to KTI Status Form
    //
//SMCPKG_SUPPORT    goto VFR_FID_KTI_STATUS,
//SMCPKG_SUPPORT        prompt  = STRING_TOKEN(STR_KTI_STATUS_TITLE),
//SMCPKG_SUPPORT        help    = STRING_TOKEN(STR_KTI_STATUS_HELP);

    //
    // SKX KTI General Setup Options
    //
    oneof varid = SOCKET_MP_LINK_CONFIGURATION.DegradePrecedence,
        prompt  = STRING_TOKEN(STR_KTI_DEGRADE_PRECEDENCE),
        help    = STRING_TOKEN(STR_KTI_DEGRADE_PRECEDENCE_HELP),
        option text = STRING_TOKEN(STR_KTI_TOPOLOGY_PRECEDENCE_STRING),         value = TOPOLOGY_PRECEDENCE, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_KTI_FEATURE_PRECEDENCE_STRING),          value = FEATURE_PRECEDENCE,  flags = RESET_REQUIRED;
    endoneof;

    suppressif SMC_SETUP_STYLE;  //SMCPKG_SUPPORT S
    oneof varid = SOCKET_MP_LINK_CONFIGURATION.QpiLinkSpeedMode,
        prompt  = STRING_TOKEN(STR_KTI_LINK_SPEED_MODE),
        help    = STRING_TOKEN(STR_KTI_LINK_SPEED_MODE_HELP),
        option text = STRING_TOKEN(STR_KTI_MODE_SLOW),          value = KTI_LINK_SLOW_SPEED_MODE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_MODE_FAST),          value = KTI_LINK_FULL_SPEED_MODE, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.QpiLinkSpeed,
        prompt  = STRING_TOKEN(STR_KTI_FREQ_SELECT),
        help    = STRING_TOKEN(STR_KTI_FREQ_SELECT_HELP),
        option text = STRING_TOKEN(STR_LINKSPEED_96G_STRING),   value = SPEED_REC_96GT,     flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_LINKSPEED_104G_STRING),  value = SPEED_REC_104GT,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_LINKSPEED_AUTO_STRING),  value = MAX_KTI_LINK_SPEED, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_KTI_PERLINK_SETTING),    value = FREQ_PER_LINK,      flags = RESET_REQUIRED;
    endoneof;
    endif;      //SMCPKG_SUPPORT E

    oneof varid    = SOCKET_MP_LINK_CONFIGURATION.KtiLinkL0pEn,
        prompt   = STRING_TOKEN(STR_LINKL0P_PROMPT),
        help     = STRING_TOKEN(STR_LINKL0P_HELP),
        option text = STRING_TOKEN(STR_KTI_DISABLE),         value = KTI_DISABLE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_ENABLE),          value = KTI_ENABLE,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_AUTO),            value = KTI_AUTO,    flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    oneof varid    = SOCKET_MP_LINK_CONFIGURATION.KtiLinkL1En,
        prompt   = STRING_TOKEN(STR_LINKL1_PROMPT),
        help     = STRING_TOKEN(STR_LINKL1_HELP),
        option text = STRING_TOKEN(STR_KTI_DISABLE),         value = KTI_DISABLE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_ENABLE),          value = KTI_ENABLE,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_AUTO),            value = KTI_AUTO,    flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    suppressif SMC_SETUP_STYLE;  //SMCPKG_SUPPORT S
    oneof varid = SOCKET_MP_LINK_CONFIGURATION.KtiFailoverEn,
        prompt  = STRING_TOKEN(STR_KTI_FAILOVER_ENABLE),
        help    = STRING_TOKEN(STR_KTI_FAILOVER_ENABLE_HELP),
        option text = STRING_TOKEN(STR_KTI_DISABLE),         value = KTI_DISABLE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_ENABLE),          value = KTI_ENABLE,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_AUTO),            value = KTI_AUTO,    flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;
    endif;      //SMCPKG_SUPPORT E

   oneof varid = SOCKET_MP_LINK_CONFIGURATION.IoDcMode,
       prompt  = STRING_TOKEN(STR_IODC),
       help    = STRING_TOKEN(STR_IODC_HELP),
       option text = STRING_TOKEN(STR_KTI_DISABLE),                        value = IODC_DISABLE, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_KTI_AUTO),                           value = IODC_AUTO, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
       option text = STRING_TOKEN(STR_IODC_EN_REM_INVITOM_PUSH),           value = IODC_EN_REM_INVITOM_PUSH, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_IODC_EN_REM_INVITOM_ALLOCFLOW),      value = IODC_EN_REM_INVITOM_ALLOCFLOW, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_IODC_EN_REM_INVITOM_ALLOC_NONALLOC), value = IODC_EN_REM_INVITOM_ALLOC_NONALLOC, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_IODC_EN_REM_INVITOM_AND_WCILF),      value = IODC_EN_REM_INVITOM_AND_WCILF, flags = RESET_REQUIRED;
    endoneof;




    suppressif SMC_SETUP_STYLE;  //SMCPKG_SUPPORT S
    oneof varid = SOCKET_MP_LINK_CONFIGURATION.DirectoryModeEn,
        prompt  = STRING_TOKEN(STR_DIRECTORY_PROMPT),
        help    = STRING_TOKEN(STR_DIRECTORY_HELP),
        option text = STRING_TOKEN(STR_KTI_DISABLE),  value = KTI_DISABLE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_ENABLE),   value = KTI_ENABLE,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;
    endif;      //SMCPKG_SUPPORT E

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.SncEn,
        prompt  = STRING_TOKEN(STR_SNC_PROMPT),
        help    = STRING_TOKEN(STR_SNC_HELP),
        option text = STRING_TOKEN(STR_KTI_DISABLE),  value = KTI_DISABLE, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_KTI_ENABLE),   value = KTI_ENABLE,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_AUTO),     value = KTI_AUTO,    flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.XptPrefetchEn,
       prompt  = STRING_TOKEN(STR_XPT_PREFETCH),
       help    = STRING_TOKEN(STR_XPT_PREFETCH_HELP),
       option text = STRING_TOKEN(STR_DISABLE),                 value = KTI_DISABLE, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
       option text = STRING_TOKEN(STR_ENABLE),                  value = KTI_ENABLE,  flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.KtiPrefetchEn,
       prompt  = STRING_TOKEN(STR_KTI_PREFETCH),
       help    = STRING_TOKEN(STR_KTI_PREFETCH_HELP),
       option text = STRING_TOKEN(STR_DISABLE),                 value = KTI_DISABLE, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_ENABLE),                  value = KTI_ENABLE,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    suppressif SMC_SETUP_STYLE;  //SMCPKG_SUPPORT S
    oneof varid = SOCKET_MP_LINK_CONFIGURATION.RdCurForXptPrefetchEn,
        prompt  = STRING_TOKEN(STR_RDCUR_PROMPT),
        help    = STRING_TOKEN(STR_RDCUR_HELP),
        option text = STRING_TOKEN(STR_KTI_DISABLE),  value = KTI_DISABLE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_ENABLE),   value = KTI_ENABLE,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_AUTO),     value = KTI_AUTO,    flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.KtiLinkVnaOverride,
        prompt  = STRING_TOKEN(STR_KTI_VNA_OVERRIDE),
        help    = STRING_TOKEN(STR_KTI_VNA_OVERRIDE_HELP),
        option text = STRING_TOKEN(STR_VNA_MAX),                value = KTI_LL_VNA_SETUP_MAX,      flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_VNA_MIN),                value = KTI_LL_VNA_SETUP_MIN,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_VNA_PER_LINK),           value = KTI_LL_VNA_SETUP_PER_LINK, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.KtiCrcMode,
        prompt  = STRING_TOKEN(STR_KTI_CRC_MODE),
        help    = STRING_TOKEN(STR_KTI_CRC_MODE_HELP),
        option text = STRING_TOKEN(STR_KTI_16BIT_CRC),          value = CRC_MODE_16BIT,         flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_32BIT_ROLLING),      value = CRC_MODE_ROLLING_32BIT, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_KTI_AUTO),               value = CRC_MODE_AUTO,          flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.KtiLbEn,
        prompt  = STRING_TOKEN(STR_KTI_LB_EN),
        help    = STRING_TOKEN(STR_KTI_LB_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE),                value = KTI_DISABLE, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),                 value = KTI_ENABLE,  flags = RESET_REQUIRED;
    endoneof;

    numeric varid = SOCKET_MP_LINK_CONFIGURATION.LegacyVgaSoc,
        prompt  = STRING_TOKEN (STR_KTI_LEGACY_VGA_SOC),
        help    = STRING_TOKEN (STR_KTI_LEGACY_VGA_SOC_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = LEGACY_VGA_SOCKET_MIN,
        maximum = LEGACY_VGA_SOCKET_MAX,
        step    = 1,  // Stepping of 0 equates to a manual entering of a value,
                      // otherwise it will auto-increment with a left/right arrow
        default = LEGACY_VGA_SOCKET_DFLT, defaultstore = MyStandardDefault,
        default = LEGACY_VGA_SOCKET_DFLT, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SOCKET_MP_LINK_CONFIGURATION.LegacyVgaStack,
        prompt  = STRING_TOKEN (STR_KTI_LEGACY_VGA_STACK),
        help    = STRING_TOKEN (STR_KTI_LEGACY_VGA_STACK_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = LEGACY_VGA_STACK_MIN,
        maximum = LEGACY_VGA_STACK_MAX,
        step    = 1,  // Stepping of 0 equates to a manual entering of a value,
                     // otherwise it will auto-increment with a left/right arrow
        default = LEGACY_VGA_STACK_DFLT, defaultstore = MyStandardDefault,
        default = LEGACY_VGA_STACK_DFLT, defaultstore = MyManufactureDefault,
    endnumeric;

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.MmioP2pDis,
        prompt  = STRING_TOKEN(STR_KTI_MMIO_P2P_DIS),
        help    = STRING_TOKEN(STR_KTI_MMIO_P2P_DIS_HELP),
        option text = STRING_TOKEN(STR_NO),                     value = KTI_DISABLE, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_YES),                    value = KTI_ENABLE,  flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.SystemRasType == HEDT_RAS STANDARD_RAS CORE_RAS FPGA_RAS;
        oneof varid = SOCKET_MP_LINK_CONFIGURATION.QpiCpuSktHotPlugEn,
            prompt  = STRING_TOKEN(STR_KTI_CPU_HOT_PLUG),
            help    = STRING_TOKEN(STR_KTI_CPU_HOT_PLUG_HELP),
            option text = STRING_TOKEN(STR_DISABLE),                value = KTI_DISABLE, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_ENABLE),                 value = KTI_ENABLE,  flags = RESET_REQUIRED;
        endoneof;

        oneof varid = SOCKET_MP_LINK_CONFIGURATION.KtiCpuSktHotPlugTopology,
            prompt  = STRING_TOKEN(STR_KTI_CPU_HOT_PLUG_TOPOLOGY),
            help    = STRING_TOKEN(STR_KTI_CPU_HOT_PLUG_TOPOLOGY_HELP),
            option text = STRING_TOKEN(STR_KTI_CPU_HOT_PLUG_TOPOLOGY_4S),   value = HOT_PLUG_TOPOLOGY_4S, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_KTI_CPU_HOT_PLUG_TOPOLOGY_8S),   value = HOT_PLUG_TOPOLOGY_8S, flags = RESET_REQUIRED;
        endoneof;
    endif;

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.KtiSkuMismatchCheck,
        prompt  = STRING_TOKEN(STR_KTI_SKU_MISMATCH_CHECK),
        help    = STRING_TOKEN(STR_KTI_SKU_MISMATCH_CHECK_HELP),
        option text = STRING_TOKEN(STR_NO),     value = KTI_DISABLE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_YES),    value = KTI_ENABLE,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.DebugPrintLevel,
        prompt  = STRING_TOKEN(STR_DEBUG_PRTLVL_PROMPT),
        help    = STRING_TOKEN(STR_DEBUG_PRTLVL_HELP),
        option text = STRING_TOKEN(STR_DEBUG_PRTLVL_FATAL_STRING),     value = KTI_DEBUG_PRINT_FATAL_ONLY, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DEBUG_PRTLVL_WARNING_STRING),   value = KTI_DEBUG_PRINT_WARNING_ONLY, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DEBUG_PRTLVL_SUMMARY_STRING),   value = KTI_DEBUG_PRINT_INFO_SUMMARY_ONLY, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DEBUG_PRTLVL_DETAIL_STRING),    value = KTI_DEBUG_PRINT_INFO_DETAILED_ONLY, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DEBUG_PRTLVL_ALL_STRING),       value = KTI_DEBUG_PRINT_ALL, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;
    endif;      //SMCPKG_SUPPORT E

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.IrqThreshold,
        prompt  = STRING_TOKEN(STR_KTI_IRQ_THRESHOLD),
        help    = STRING_TOKEN(STR_KTI_IRQ_THRESHOLD_HELP),
          option text = STRING_TOKEN(STR_DISABLE),          value = 0,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO),             value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_LOW_THRESHOLD),    value = 0x2,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_MEDIUM_THRESHOLD), value = 0x3,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_HIGH_THRESHOLD),   value = 0x4,  flags = RESET_REQUIRED;
    endoneof;

    suppressif SMC_SETUP_STYLE;  //SMCPKG_SUPPORT S
    oneof varid = SOCKET_MP_LINK_CONFIGURATION.TscSyncEn,
      prompt  = STRING_TOKEN(STR_TSCSYNCEN),
      help    = STRING_TOKEN(STR_TSCSYNCEN_HELP),
      option text = STRING_TOKEN(STR_DISABLE),      value = KTI_DISABLE,  flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),       value = KTI_ENABLE,  flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTO_STRING),  value = KTI_AUTO,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;
    endif;      //SMCPKG_SUPPORT E

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.StaleAtoSOptEn,
       prompt  = STRING_TOKEN(STR_A_TO_S_OPT_EN),
       help    = STRING_TOKEN(STR_A_TO_S_OPT_EN_HELP),
       option text = STRING_TOKEN(STR_DISABLE),                 value = KTI_DISABLE, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
       option text = STRING_TOKEN(STR_ENABLE),                  value = KTI_ENABLE,  flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_KTI_AUTO),                value = KTI_AUTO,    flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_MP_LINK_CONFIGURATION.LLCDeadLineAlloc,
       prompt  = STRING_TOKEN(STR_LLC_DEAD_LINE_ALLOC),
       help    = STRING_TOKEN(STR_LLC_DEAD_LINE_ALLOC_HELP),
       option text = STRING_TOKEN(STR_DISABLE),                 value = KTI_DISABLE, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_ENABLE),                  value = KTI_ENABLE,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
       option text = STRING_TOKEN(STR_KTI_AUTO),                value = KTI_AUTO,    flags = RESET_REQUIRED;
    endoneof;

//SMCPKG_SUPPORT S
    oneof varid = SOCKET_COMMONRC_CONFIGURATION.IsocEn,
          prompt  = STRING_TOKEN(STR_ISOCEN),
          help    = STRING_TOKEN(STR_ISOCEN_HELP),
#ifdef PPO_FLAG
          option text = STRING_TOKEN(STR_DISABLE),      value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLE),       value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),  value = 2,  flags = RESET_REQUIRED ;
#else
          option text = STRING_TOKEN(STR_DISABLE),      value = 0,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),       value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),  value = 2,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
#endif
//SMCPKG_SUPPORT E
    endoneof;
endform;

form formid = VFR_FID_KTI_STATUS,
    title   = STRING_TOKEN(STR_KTI_STATUS_TITLE);

    subtitle text = STRING_TOKEN(STR_KTI_STATUS_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_NUMBER_OF_CPU),
        text   = STRING_TOKEN(STR_KTI_NUMBER_OF_CPU_VAL),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_NUMBER_OF_IIO),
        text   = STRING_TOKEN(STR_KTI_NUMBER_OF_IIO_VAL),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_LINK_SPEED),
        text   = STRING_TOKEN(STR_KTI_LINK_SPEED_STATUS),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_LINK_FREQ),
        text   = STRING_TOKEN(STR_KTI_LINK_FREQ_STATUS),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_GMMIOL_BASE_LIMIT),
        text   = STRING_TOKEN(STR_KTI_GMMIOL_BASE_LIMIT_VAL),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_GMMIOH_BASE_LIMIT),
        text   = STRING_TOKEN(STR_KTI_GMMIOH_BASE_LIMIT_VAL),
        flags  = 0, key = 0;

    text
        help   = STRING_TOKEN(STR_NULL_STRING),
        text   = STRING_TOKEN(STR_KTI_PCI_E_CFG_BASE),
        text   = STRING_TOKEN(STR_KTI_PCI_E_CFG_BASE_VAL),
        flags  = 0, key = 0;

endform;


