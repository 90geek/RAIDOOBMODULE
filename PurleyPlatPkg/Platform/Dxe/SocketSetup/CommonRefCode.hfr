//***************************************************************************
//***************************************************************************
//**                                                                       **
//**       (C)Copyright 1993-2016 Supermicro Computer, Inc.                **
//**                                                                       **
//**                                                                       **
//***************************************************************************
//***************************************************************************
//
//  File History
//
//  Rev. 1.00
//    Bug Fix:  Modify MMIO High Size to 256G for GPU.
//    Reason:   
//    Auditor:  Hartmann Hsieh
//    Date:     Aug/16/2016
//
//
// This file contains an 'Intel Peripheral Driver' and is      
// licensed for Intel CPUs and chipsets under the terms of your
// license agreement with Intel or your vendor.  This file may 
// be modified by the user, subject to additional terms of the 
// license agreement                                           
//
// *++
//
// Copyright (c) 1999 - 2016 Intel Corporation. All rights reserved
// This software and associated documentation (if any) is furnished
// under a license and may only be used or copied in accordance
// with the terms of the license. Except as permitted by such
// license, no part of this software or documentation may be
// reproduced, stored in a retrieval system, or transmitted in any
// form or by any means without the express written consent of
// Intel Corporation.
// 
// 
// Module Name:
//
//   CommonRefCode.hfr
// 
// Abstract:
// 
//   Common RefCode Setup formset.
// 
// Revision History: 
// 
// --*/

  //
  // Tylersburg Submenu
  //

defaultstore MyStandardDefault,
  prompt      = STRING_TOKEN(STR_STANDARD_DEFAULT_PROMPT),
  attribute   = 0x0000;                         // Default ID: 0000 standard default

defaultstore MyManufactureDefault,
  prompt      = STRING_TOKEN(STR_MANUFACTURE_DEFAULT_PROMPT),
  attribute   = 0x0001;
  
form formid = VFR_FORMID_COMMONRC,
    title   = STRING_TOKEN(STR_RC_COMMON_FORM_TITLE);

    subtitle text = STRING_TOKEN(STR_RC_COMMON_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    
// APTIOV_SERVER_OVERRIDE_RC_START : dynamic MMCFG base change support.
#ifndef DYNAMIC_MMCFG_BASE_FLAG 
suppressif TRUE; 
#endif
// APTIOV_SERVER_OVERRIDE_RC_END : dynamic MMCFG base change support.
    oneof varid = SOCKET_COMMONRC_CONFIGURATION.MmcfgBase,
          prompt  = STRING_TOKEN(STR_CSI_MMCFG_BASE),
          help    = STRING_TOKEN(STR_CSI_MMCFG_BASE_HELP),
          option text = STRING_TOKEN(STR_1G),      value = 0,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_1_5G),    value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_1_75G),   value = 2,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_2G),      value = 3,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_2_25G),   value = 4,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_3G),      value = 5,  flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_COMMONRC_CONFIGURATION.MmcfgSize,
          prompt  = STRING_TOKEN(STR_CSI_MMCFG_SIZE),
          help    = STRING_TOKEN(STR_CSI_MMCFG_SIZE_HELP),
          option text = STRING_TOKEN(STR_64M),     value = 0,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_128M),    value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_256M),    value = 2,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_512M),    value = 3,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_1G),      value = 4,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_2G),      value = 5,  flags = RESET_REQUIRED;
    endoneof;
// APTIOV_SERVER_OVERRIDE_RC_START : dynamic MMCFG base change support.
#ifndef DYNAMIC_MMCFG_BASE_FLAG 
endif;
#endif
// APTIOV_SERVER_OVERRIDE_RC_END : dynamic MMCFG base change support.
    oneof varid = SOCKET_COMMONRC_CONFIGURATION.MmiohBase,
          prompt  = STRING_TOKEN(STR_CSI_MMIOH_BASE),
          help    = STRING_TOKEN(STR_CSI_MMIOH_BASE_HELP),
          option text = STRING_TOKEN(STR_56T),     value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_40T),     value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_24T),     value = 2,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_16T),     value = 3,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_4T),      value = 4,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_1T),      value = 5,  flags = RESET_REQUIRED;
    endoneof;
//SMCPKG_SUPPORT - Start
    oneof varid = SOCKET_COMMONRC_CONFIGURATION.MmiohSize,
          prompt  = STRING_TOKEN(STR_CSI_MMIOH_SIZE),
          help    = STRING_TOKEN(STR_CSI_MMIOH_SIZE_HELP),
          option text = STRING_TOKEN(STR_1G),      value = 0,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_4G),      value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_16G),     value = 2,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_64G),     value = 3,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_256G),    value = 4,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_1024G),   value = 5,  flags = RESET_REQUIRED;
    endoneof;
//SMCPKG_SUPPORT - End
    oneof varid = SOCKET_COMMONRC_CONFIGURATION.IsocEn,
          prompt  = STRING_TOKEN(STR_ISOCEN),
          help    = STRING_TOKEN(STR_ISOCEN_HELP),
#ifdef PPO_FLAG
          option text = STRING_TOKEN(STR_DISABLE),      value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLE),       value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),  value = 2,  flags = RESET_REQUIRED ;
#else
          option text = STRING_TOKEN(STR_DISABLE),      value = 0,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),       value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),  value = 2,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
#endif
    endoneof;
      oneof varid = SOCKET_COMMONRC_CONFIGURATION.NumaEn,
            prompt  = STRING_TOKEN(STR_NUMAEN),
            help    = STRING_TOKEN(STR_NUMAEN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),      value = 0,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),       value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;

    grayoutif  NOT ideqval SOCKET_COMMONRC_CONFIGURATION.NumaEn == NUMA_EN;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.Srat,
            prompt  = STRING_TOKEN(STR_SRAT_PROMPT),
            help    = STRING_TOKEN(STR_SRAT_HELP),
            option text = STRING_TOKEN(STR_DISABLE),          value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),           value = 1, flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
        endoneof;

        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.Srat == 0; 
          oneof varid = SOCKET_MEMORY_CONFIGURATION.SratMemoryHotPlug,
            prompt  = STRING_TOKEN(STR_SRAT_MEM_HOT_PLUG_PROMPT),
            help    = STRING_TOKEN(STR_SRAT_MEM_HOT_PLUG_HELP),
            option text = STRING_TOKEN(STR_DISABLE),          value = 0, flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),           value = 1, flags = RESET_REQUIRED;
          endoneof;

          oneof varid = SOCKET_MEMORY_CONFIGURATION.SratCpuHotPlug,
            prompt  = STRING_TOKEN(STR_SRAT_CPU_HOT_PLUG_PROMPT),
            help    = STRING_TOKEN(STR_SRAT_CPU_HOT_PLUG_HELP),
            option text = STRING_TOKEN(STR_DISABLE),          value = 0, flags = MANUFACTURING | DEFAULT |RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),           value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;
    endif;

endform;
