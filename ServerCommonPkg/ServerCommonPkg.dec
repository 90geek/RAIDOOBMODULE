#
# This file contains an 'Intel Peripheral Driver' and is
# licensed for Intel CPUs and chipsets under the terms of your
# license agreement with Intel or your vendor.  This file may
# be modified by the user, subject to additional terms of the
# license agreement
#
## @file
#    Server Common Package
#
#    Copyright (c) 2011 - 2016, Intel Corporation. All rights reserved.<BR>
#
#    This software and associated documentation (if any) is furnished
#    under a license and may only be used or copied in accordance
#    with the terms of the license. Except as permitted by such
#    license, no part of this software or documentation may be
#    reproduced, stored in a retrieval system, or transmitted in any
#    form or by any means without the express written consent of
#    Intel Corporation.
#
##

[Defines]
  DEC_SPECIFICATION              = 0x00010005
  PACKAGE_NAME                   = ServerCommonPkg
  PACKAGE_GUID                   = 15EBAE44-7A8C-4428-A7AA-01AC7CA35055
  PACKAGE_VERSION                = 0.1

[Includes]
  Include
# APTIOV_SERVER_OVERRIDE_RC_START
  Universal\GetSec
# APTIOV_SERVER_OVERRIDE_RC_END

[LibraryClasses]

[Guids]
  gServerCommonTokenSpaceGuid     = { 0x356471b1, 0xb483, 0x42ae, { 0xb6, 0xe7, 0x3b, 0x2e, 0xba, 0xb1, 0x4e, 0x15 } }
  gEfiIfrFrontPageGuid            = { 0xe58809f8, 0xfbc1, 0x48e2, { 0x88, 0x3a, 0xa3, 0xf, 0xdc, 0x4b, 0x44, 0x1e } }
  gEfiLegacyDevOrderVariableGuid  = { 0xa56074db, 0x65fe, 0x45f7, {0xbd, 0x21, 0x2d, 0x2b, 0xdd, 0x8e, 0x96, 0x52 }}
  gEfiSerialPortTokenSpaceGuid    = { 0xac274b5f, 0x4d79, 0x48d1, { 0x96, 0xdf, 0xfe, 0xe3, 0x54, 0xcf, 0x70, 0x83 }}
# APTIOV_SERVER_OVERRIDE_RC_START
  # gCpPlatFlashTokenSpaceGuid      = { 0xc9c39664, 0x96dd, 0x4c5c, { 0xaf, 0xd7, 0xcd, 0x65, 0x76, 0x29, 0xcf, 0xb0 }}
# APTIOV_SERVER_OVERRIDE_RC_END

  gEfiDefaultBmpLogoGuid         = { 0x7BB28B99, 0x61BB, 0x11d5, { 0x9A, 0x5D, 0x00, 0x90, 0x27, 0x3F, 0xC1, 0x4D }}
  gUsbDbgGuid                    = { 0xf880aae0, 0xe4ac, 0x4c64, { 0xa3, 0x26, 0x82, 0x70, 0x9c, 0xc2, 0x41, 0xea }}

#
#TXT support
#
  gEfiPlatformTxtDeviceMemoryGuid = { 0x73d1d476, 0xa7c9, 0x4efd, { 0x8f, 0x8b, 0xd5, 0x32, 0xef, 0x38, 0x17, 0x8 }}
  gEfiPlatformTxtPolicyDataGuid   = { 0xa353290b, 0x867d, 0x4cd3, { 0xa8, 0x1b, 0x4b, 0x7e, 0x5e, 0x10, 0xe, 0x16 }}
  gPrepareForScheckEventGuid      = { 0xcab9347c, 0x8ce9, 0x4de1, { 0x9c, 0x6f, 0x64, 0x57, 0xac, 0x69, 0x33, 0x2b }}

  gEfiHiiExportDatabaseGuid       = { 0x1b838190, 0x4625, 0x4ead, { 0xab, 0xc9, 0xcd, 0x5e, 0x6a, 0xf1, 0x8f, 0xe0 }}
  gEfiSetupEnterGuid              = { 0x71202EEE, 0x5F53, 0x40d9, { 0xAB, 0x3D, 0x9E, 0x0C, 0x26, 0xD9, 0x66, 0x57 }}

  #
  # TraceHub Support
  #
  gEfiTraceHubTokenSpaceGuid                 = { 0xa69b58a9, 0x6c05, 0x4dc1, { 0x85, 0xbf, 0xaf, 0x80, 0xdc, 0xe6, 0xd9, 0x7d }}
  gEfiTraceHubStatusCodeHandlePeiGuid        = { 0x0fb3bcf9, 0x0a1d, 0x4598, { 0xa5, 0x21, 0xe5, 0xc8, 0x4e, 0x95, 0xd9, 0x7a }}
  gEfiTraceHubStatusCodeHandleRuntimeDxeGuid = { 0xfcf51e6b, 0x527f, 0x438d, { 0xbe, 0x6d, 0xa6, 0xd1, 0x5f, 0x0c, 0xd9, 0x8b }}
  gEfiTraceHubStatusCodeHandleSmmGuid        = { 0xae0b5b70, 0xd044, 0x4456, { 0xba, 0x51, 0x97, 0x0e, 0x4c, 0x68, 0x70, 0xbf }}

  ## Include/Guid/LegacyBios.h
  gEfiLegacyBiosGuid                          = { 0x2E3044AC, 0x879F, 0x490F, { 0x97, 0x60, 0xBB, 0xDF, 0xAF, 0x69, 0x5F, 0x50 }}
  ## Include/Guid/BlockIoVendor.h
  gBlockIoVendorGuid                          = { 0xcf31fac5, 0xc24e, 0x11d2, { 0x85, 0xf3, 0x00, 0xa0, 0xc9, 0x3e, 0xc9, 0x3b }}

[Ppis]
  gPeiSpiSoftStrapsPpiGuid     = { 0x7F19E716, 0x419C, 0x4E79, { 0x8E, 0x37, 0xC2, 0xBD, 0x84, 0xEB, 0x65, 0x28 }}
  gPeiTxtScleanPpiGuid         = { 0x4d5640e5, 0x2702, 0x4df8, { 0x88, 0xf4, 0x56, 0x48, 0x86, 0xfc, 0x43, 0xdc }}
  gPeiTxtMemoryUnlockedPpiGuid = { 0x38cdd10b, 0x767d, 0x4f6e, { 0xa7, 0x44, 0x67, 0xee, 0x1d, 0xfe, 0x2f, 0xa5 }}
  gPeiMpServicePpiGuid          = { 0xee16160a, 0xe8be, 0x47a6, { 0x82, 0x0a, 0xc6, 0x90, 0x0d, 0xb0, 0x25, 0x0a }}  
  gEfiTraceHubStatusCodeHandlePpi       = { 0x882c5d54, 0x1dad, 0x4f4a, { 0x83, 0x16, 0x4b, 0xdf, 0x84, 0x1e, 0x9, 0xd0 }}
  gEfiTraceHubStatusCodeHandleHeaderPpi = { 0x787e0c4a, 0x4a27, 0x4891, { 0x94, 0x89, 0xaf, 0x50, 0x74, 0xc3, 0x6e, 0x89 }}

[Protocols]
  gEfiPciCallbackProtocolGuid   = { 0x1ca0e202, 0xfe9e, 0x4776, { 0x9f, 0xaa, 0x57, 0xc, 0x19, 0x61, 0x7a, 0x06 }}
  gEfiLpcPolicyProtocolGuid              = { 0x64021DFE, 0xA62C, 0x42A7, { 0xBF, 0x46, 0x15, 0x07, 0x8C, 0xDF, 0x9F, 0x89 }}
  gEfiTxtLockConfigGuid                  = { 0xf1f7c421, 0x96df, 0x4c8a, { 0xaf, 0x91, 0x62, 0xa3, 0xc9, 0xae, 0xd3, 0x10 }}
  gEfiIioSystemProtocolGuid              = { 0xddc3080a, 0x2740, 0x4ec2, { 0x9a, 0xa5, 0xa0, 0xad, 0xef, 0xd6, 0xff, 0x9c }}
  gEfiSmmFirmwareVolumeBlockProtocolGuid = { 0xd326d041, 0xbd31, 0x4c01, { 0xb5, 0xa8, 0x62, 0x8b, 0xe8, 0x7f, 0x6, 0x53 }}
  ## OEM Badging Protocol defines the interface to get the OEM badging image with the dispaly attribute.
  #  Include/Protocol/OEMBadging.h
  gEfiOEMBadgingProtocolGuid             = { 0x170E13C0, 0xBF1B, 0x4218, { 0x87, 0x1D, 0x2A, 0xBD, 0xC6, 0xF8, 0x87, 0xBC }}

  ## Vga Mini port binding for a VGA controller
  #  Include/Protocol/VgaMiniPort.h
  gEfiVgaMiniPortProtocolGuid    = { 0xc7735a2f, 0x88f5, 0x4882, { 0xae, 0x63, 0xfa, 0xac, 0x8c, 0x8b, 0x86, 0xb3 }}
  ## Include/Protocol/LegacyBios.h
  gEfiLegacyBiosProtocolGuid     = { 0xdb9a1e3d, 0x45cb, 0x4abb, { 0x85, 0x3b, 0xe5, 0x38, 0x7f, 0xdb, 0x2e, 0x2d }}
  ## Include/Protocol/CpuIo.h
  gEfiCpuIoProtocolGuid          = { 0xB0732526, 0x38C8, 0x4b40, { 0x88, 0x77, 0x61, 0xc7, 0xb0, 0x6a, 0xac, 0x45 }}
  
  ## ISA I/O Protocol is used to perform ISA device Io/Mem operations.
  #  Include/Protocol/IsaIo.h
  gEfiIsaIoProtocolGuid          = { 0x7ee2bd44, 0x3da0, 0x11d4, { 0x9a, 0x38, 0x0, 0x90, 0x27, 0x3f, 0xc1, 0x4d }}
  
  ## Include/Protocol/Legacy8259.h
  gEfiLegacy8259ProtocolGuid     = { 0x38321dba, 0x4fe0, 0x4e17, { 0x8a, 0xec, 0x41, 0x30, 0x55, 0xea, 0xed, 0xc1 }}

  ## Include/Protocol/LegacyBiosPlatform.h
  gEfiLegacyBiosPlatformProtocolGuid = { 0x783658a3, 0x4172, 0x4421, { 0xa2, 0x99, 0xe0, 0x09, 0x07, 0x9c, 0x0c, 0xb4 }}

  ## Include/Protocol/LegacyInterrupt.h
  gEfiLegacyInterruptProtocolGuid = { 0x31ce593d, 0x108a, 0x485d, { 0xad, 0xb2, 0x78, 0xf2, 0x1f, 0x29, 0x66, 0xbe }}

  ## PS/2 policy protocol abstracts the specific platform initialization and setting.
  #  Include/Protocol/Ps2Policy.h
  gEfiPs2PolicyProtocolGuid      = { 0x4DF19259, 0xDC71, 0x4D46, { 0xBE, 0xF1, 0x35, 0x7B, 0xB5, 0x78, 0xC4, 0x18 }}

[PcdsFixedAtBuild,PcdsPatchableInModule,PcdsDynamic,PcdsDynamicEx]
  ## MemoryCheck value for checking memory before boot OS.
  #  To save the boot performance, the default MemoryCheck is set to 0.
  gServerCommonTokenSpaceGuid.PcdPlatformMemoryCheck|0|UINT8|0x40000005
  
  ## Part of the change to allow boot order change with >10 hard drives
  #  See Grantley sighting 4167703 for more info
  gServerCommonTokenSpaceGuid.PcdPlatformMemoryCheckDefault|0|UINT8|0x40000008

  ## This PCD is for workaround for EPCSutil support
  #  To remove the VarStore which is not in Variable if set to TRUE.
  gServerCommonTokenSpaceGuid.PcdPatchHiiDatabase|TRUE|BOOLEAN|0x4000000A
  
  gEfiSerialPortTokenSpaceGuid.PcdSerialRegisterBase|0x3f8|UINT64|0x00000001
  gEfiSerialPortTokenSpaceGuid.PcdSerialBoudRate|115200|UINT32|0x00000002
  gEfiSerialPortTokenSpaceGuid.PcdUsbSerialEhciBus|0x00|UINT8|0x00000010
  gEfiSerialPortTokenSpaceGuid.PcdUsbSerialEhciDev|0x1D|UINT8|0x00000011
  gEfiSerialPortTokenSpaceGuid.PcdUsbSerialEhciFunc|0x00|UINT8|0x00000012

  gServerCommonTokenSpaceGuid.PcdPchPciBusNumber|0x00|UINT32|0x40000010
  gServerCommonTokenSpaceGuid.PcdPchPciDevNumber|0x1F|UINT32|0x40000011
  gServerCommonTokenSpaceGuid.PcdPchSpiFunNumber|0xFF|UINT32|0x40000012
  gServerCommonTokenSpaceGuid.PcdPchSpiBar0Offset|0x10|UINT32|0x40000013

  ## Defines PCI offset in PCH for PM config reg 3 (reg B in newer PCHs)
  ## Defines the bit in that register which indicates RTC power loss occurred
  gServerCommonTokenSpaceGuid.PcdPchLpcGenPmcon3|0xA4|UINT8|0x40000014
  gServerCommonTokenSpaceGuid.PcdPchLpcGenPmcon3RtcPwrSts|0x04|UINT8|0x40000015

  ## following PCDs should remove if CORE accept the fix
  gServerCommonTokenSpaceGuid.PcdPerfPkgPchPmBaseBusNumber|0x00|UINT32|2
  gServerCommonTokenSpaceGuid.PcdPerfPkgPchPmBaseDeviceNumber|0x1F|UINT32|3
  gServerCommonTokenSpaceGuid.PcdPerfPkgPchPmBaseFunctionNumber|0x0|UINT32|4
  #TraceHub support
  ## This PCD specifies that StatusCode is reported as default and could be override.
  gEfiTraceHubTokenSpaceGuid.PcdStatusCodeUseTraceHub|TRUE|BOOLEAN|0x00000000
  gEfiTraceHubTokenSpaceGuid.PcdTraceHubStatusCodeMaster|0x100|UINT32|0x00000020
  gEfiTraceHubTokenSpaceGuid.PcdTraceHubStatusCodeChannel|0xD|UINT8|0x00000021
  gEfiTraceHubTokenSpaceGuid.PcdTraceHubDebugLibMaster|0x100|UINT32|0x00000022
  gEfiTraceHubTokenSpaceGuid.PcdTraceHubDebugLibChannel|0xE|UINT8|0x00000023
  ## Indicates if BiosVideo driver will switch to 80x25 Text VGA Mode when exiting boot service.<BR><BR>
  #   TRUE  - Switch to Text VGA Mode.<BR>
  #   FALSE - Does not switch to Text VGA Mode.<BR>
  # @Prompt Switch to Text VGA Mode on UEFI Boot
  gServerCommonTokenSpaceGuid.PcdBiosVideoSetTextVgaModeEnable|FALSE|BOOLEAN|0x30000001

  ## Indicates if BiosVideo driver will check for VESA BIOS Extension service support.<BR><BR>
  #   TRUE  - Check for VESA BIOS Extension service.<BR>
  #   FALSE - Does not check for VESA BIOS Extension service.<BR>
  # @Prompt Enable Check for VESA BIOS Extension Service
  gServerCommonTokenSpaceGuid.PcdBiosVideoCheckVbeEnable|TRUE|BOOLEAN|0x30000002

  ## Indicates if BiosVideo driver will check for VGA service support.
  #  NOTE: If both PcdBiosVideoCheckVbeEnable and PcdBiosVideoCheckVgaEnable are set to FALSE,
  #  that means Graphics Output protocol will not be installed, the VGA miniport protocol will be installed instead.<BR><BR>
  #   TRUE  - Check for VGA service.<BR>
  #   FALSE - Does not check for VGA service.<BR>
  # @Prompt Enable Check for VGA Service
  gServerCommonTokenSpaceGuid.PcdBiosVideoCheckVgaEnable|TRUE|BOOLEAN|0x30000003

  ## Indicates if memory space for legacy region will be set as cacheable.<BR><BR>
  #   TRUE  - Set cachebility for legacy region.<BR>
  #   FALSE - Does not set cachebility for legacy region.<BR>
  # @Prompt Enable Cachebility for Legacy Region
  gServerCommonTokenSpaceGuid.PcdLegacyBiosCacheLegacyRegion|TRUE|BOOLEAN|0x30000004

  ## Specify memory size with bytes to reserve EBDA below 640K for OPROM.
  # The value should be a multiple of 4KB. 
  # @Prompt Reserved EBDA Memory Size
  # @Expression 0x80000001 | (gServerCommonTokenSpaceGuid.PcdEbdaReservedMemorySize < 0xA0000) AND ((gEfiCsmPkgTokenSpaceGuid.PcdEbdaReservedMemorySize & 0x1000) == 0)
  gServerCommonTokenSpaceGuid.PcdEbdaReservedMemorySize|0x8000|UINT32|0x30000005

  ## Specify memory base address for OPROM to find free memory.
  # Some OPROMs do not use EBDA or PMM to allocate memory for its usage, 
  # instead they find the memory filled with zero from 0x20000.
  # The value should be a multiple of 4KB.
  # The range should be below the EBDA reserved range from 
  # (CONVENTIONAL_MEMORY_TOP - Reserved EBDA Memory Size) to CONVENTIONAL_MEMORY_TOP.
  gServerCommonTokenSpaceGuid.PcdOpromReservedMemoryBase|0x60000|UINT32|0x3000000c

  ## Specify memory size with bytes for OPROM to find free memory.
  #  The value should be a multiple of 4KB. And the range should be below the EBDA reserved range from 
  # (CONVENTIONAL_MEMORY_TOP - Reserved EBDA Memory Size) to CONVENTIONAL_MEMORY_TOP.
  gServerCommonTokenSpaceGuid.PcdOpromReservedMemorySize|0x28000|UINT32|0x3000000d

  ## Specify the end of address below 1MB for the OPROM.
  #  The last shadowed OpROM should not exceed this address.
  # @Prompt Top Address of Shadowed Legacy OpROM
  # @Expression 0x80000001 | gServerCommonTokenSpaceGuid.PcdEndOpromShadowAddress < 0x100000
  gServerCommonTokenSpaceGuid.PcdEndOpromShadowAddress|0xdffff|UINT32|0x30000008

  ## Specify the low PMM (Post Memory Manager) size with bytes below 1MB.
  #  The value should be a multiple of 4KB.
  # @Prompt Low PMM (Post Memory Manager) Size
  # @Expression 0x80000001 | (gServerCommonTokenSpaceGuid.PcdLowPmmMemorySize < 0x100000) AND ((gEfiCsmPkgTokenSpaceGuid.PcdLowPmmMemorySize & 0x1000) == 0)
  gServerCommonTokenSpaceGuid.PcdLowPmmMemorySize|0x10000|UINT32|0x30000009

  ## Specify the high PMM (Post Memory Manager) size with bytes above 1MB.
  #  The value should be a multiple of 4KB.
  # @Prompt High PMM (Post Memory Manager) Size
  # @Expression 0x80000001 | (gServerCommonTokenSpaceGuid.PcdHighPmmMemorySize & 0x1000) == 0
  gServerCommonTokenSpaceGuid.PcdHighPmmMemorySize|0x400000|UINT32|0x3000000a
  ## Indicates if to use the optimized timing for best PS2 detection performance.
  #  Note this PCD could be set to TRUE for best boot performance and set to FALSE for best device compatibility.<BR><BR>
  #     TRUE  - Use the optimized timing for best PS2 detection performance.<BR>
  #     FALSE - Use the normal timing to detect PS2.<BR>
  # @Prompt Enable fast PS2 detection
  gServerCommonTokenSpaceGuid.PcdFastPS2Detection|FALSE|BOOLEAN|0x3000000b
[PcdsFixedAtBuild, PcdsPatchableInModule]
  ## FFS filename to find the default BMP Logo file.
  # @Prompt FFS Name of Boot Logo File
  gServerCommonTokenSpaceGuid.PcdShellFile|{ 0xB7, 0xD6, 0x7A, 0xC5, 0x15, 0x05, 0xA8, 0x40, 0x9D, 0x21, 0x55, 0x16, 0x52, 0x85, 0x4E, 0x37 }|VOID*|0x40000004

[PcdsDynamic,PcdsDynamicEx]
  gServerCommonTokenSpaceGuid.PcdUefiOptimizedBoot|FALSE|BOOLEAN|0x10000001
  gServerCommonTokenSpaceGuid.PcdSocketBaseBusNumbers|{0x00}|VOID*|0x300000A8
# APTIOV_SERVER_OVERRIDE_RC_START
  gServerCommonTokenSpaceGuid.PcdEfiWindowsInt10Workaround|FALSE|BOOLEAN|0x10000002
  # gServerCommonTokenSpaceGuid.PcdSetupRefreshAllBootOption|TRUE|BOOLEAN|0x300000A9
# APTIOV_SERVER_OVERRIDE_RC_END
  ## AHCI max ports
  gServerCommonTokenSpaceGuid.PcdAhciMaxPorts|3|UINT8|0x300000AA

[PcdsFeatureFlag]
  gEfiCpuTokenSpaceGuid.PcdCpuSmmCodeAccessCheckSupport|TRUE|BOOLEAN|0x1000002B
  gEfiCpuTokenSpaceGuid.PcdCpuSmmMsrSaveStateSupport|TRUE|BOOLEAN|0x1000002A

## Indicates if PS2 keyboard does a extended verification during start.
#  Extended verification will take some performance. It can be set to FALSE for boot performance.<BR><BR>
#      TRUE  - Turn on PS2 keyboard extended verification.<BR>
#      FALSE - Turn off PS2 keyboard extended verification.<BR>
# @Prompt Turn on PS2 Keyboard Extended Verification
  gServerCommonTokenSpaceGuid.PcdPs2KbdExtendedVerification|TRUE|BOOLEAN|0x00010045

[PcdsFixedAtBuild]
#
#                Flash map related PCD.
#
# Note: most values here are overridden in the .fdf file
#
#
# Note: FlashNv PCD naming conventions are as follows:
#
#       PcdFlash*Base is an address, usually in the range of 0xf* of FD's, note change in FDF spec
#       PcdFlash*Size is a hex count of the length of the FD or FV
#       All Fv will have the form 'PcdFlashFv', and all Fd will have the form 'PcdFlashFd'
#
#       Also all values will have a PCD assigned so that they can be used in the system, and
#       the FlashMap edit tool can be used to change the values here, without effecting the code.
#       This requires all code to only use the PCD tokens to recover the values.
#



# PCD's that are for the whole SPI part

# Size and Base of the SPI flash in memory,  Base = TOM - SPI Size
gCpPlatFlashTokenSpaceGuid.PcdSpiSize                            |0x00100000 |UINT32|0x50000100
gCpPlatFlashTokenSpaceGuid.PcdSpiBase                            |0xFF000000 |UINT32|0x50000101

#Block size of SPI
gCpPlatFlashTokenSpaceGuid.PcdFlashBlockSize                      |0x00010000 |UINT32|0x50000102


# Size and Base of BIOS in memory, Base is TOM - Bios size
gCpPlatFlashTokenSpaceGuid.PcdBiosSize                            |0x00800000 |UINT32|0x50000103
gCpPlatFlashTokenSpaceGuid.PcdBiosBase                            |0xFF800000 |UINT32|0x50000104

#AJW rename this to be more in keeping with the function
gCpPlatFlashTokenSpaceGuid.PcdFlashAreaBase                       |0xfff00000 |UINT32|0x50000105



# for PeiSec FD


gCpPlatFlashTokenSpaceGuid.PcdFlashFdSecPeiBase                   |0x00000000 |UINT32|0x50000211
gCpPlatFlashTokenSpaceGuid.PcdFlashFdSecPeiSize                   |0x00100000 |UINT32|0x50000212

gCpPlatFlashTokenSpaceGuid.PcdFlashFvMrcNormalSize                |0x00100000 |UINT32|0x50000221
gCpPlatFlashTokenSpaceGuid.PcdFlashFvMrcNormalBase                |0x00000000 |UINT32|0x50000222

#Microcode is in SocketPkg

gCpPlatFlashTokenSpaceGuid.PcdFlashFvAcmHeaderSize               |0x00100000 |UINT32|0x50000231
gCpPlatFlashTokenSpaceGuid.PcdFlashFvAcmHeaderBase               |0x00000000 |UINT32|0x50000232

gCpPlatFlashTokenSpaceGuid.PcdFlashFvPeiPolicySize                |0x00100000 |UINT32|0x50000241
gCpPlatFlashTokenSpaceGuid.PcdFlashFvPeiPolicyBase                |0x00000000 |UINT32|0x50000242

gCpPlatFlashTokenSpaceGuid.PcdFlashFvAcmSize                      |0x00100000 |UINT32|0x50000251
gCpPlatFlashTokenSpaceGuid.PcdFlashFvAcmBase                      |0x00000000 |UINT32|0x50000252

gCpPlatFlashTokenSpaceGuid.PcdFlashFvSecPeiBase                   |0x00000000 |UINT32|0x50000260
gCpPlatFlashTokenSpaceGuid.PcdFlashFvSecPeiSize                   |0x00040000 |UINT32|0x50000261


# for Main FD


gCpPlatFlashTokenSpaceGuid.PcdFlashFdMainBase                      |0xfff00000 |UINT32|0x50000300
gCpPlatFlashTokenSpaceGuid.PcdFlashFdMainSize                      |0x00400000 |UINT32|0x50000301

gCpPlatFlashTokenSpaceGuid.PcdFlashFvMainSize                      |0x00200000 |UINT32|0x50000311
gCpPlatFlashTokenSpaceGuid.PcdFlashFvMainBase                      |0xFF820000 |UINT32|0x50000312

gCpPlatFlashTokenSpaceGuid.PcdFlashFvOemLogoSize                   |0x00200000 |UINT32|0x50000321
gCpPlatFlashTokenSpaceGuid.PcdFlashFvOemLogoBase                   |0xFF820000 |UINT32|0x50000322

gCpPlatFlashTokenSpaceGuid.PcdFlashFvOaSize                        |0x00200000 |UINT32|0x50000331
gCpPlatFlashTokenSpaceGuid.PcdFlashFvOaBase                        |0xFF820000 |UINT32|0x50000332

gCpPlatFlashTokenSpaceGuid.PcdFlashFvWheaSize                      |0x00200000 |UINT32|0x50000341
gCpPlatFlashTokenSpaceGuid.PcdFlashFvWheaBase                      |0xFF820000 |UINT32|0x50000342

gCpPlatFlashTokenSpaceGuid.PcdFlashFvNvStorageEventLogSize         |0x00200000 |UINT32|0x50000351
gCpPlatFlashTokenSpaceGuid.PcdFlashFvNvStorageEventLogBase         |0xFF820000 |UINT32|0x50000352

gCpPlatFlashTokenSpaceGuid.PcdFlashFvSinitHeaderSize               |0x00200000 |UINT32|0x50000361
gCpPlatFlashTokenSpaceGuid.PcdFlashFvSinitHeaderBase               |0xFF820000 |UINT32|0x50000362

gCpPlatFlashTokenSpaceGuid.PcdFlashFvMainPolicySize                |0x00200000 |UINT32|0x50000371
gCpPlatFlashTokenSpaceGuid.PcdFlashFvMainPolicyBase                |0xFF820000 |UINT32|0x50000372

gCpPlatFlashTokenSpaceGuid.PcdFlashFvAcmSinitSize                  |0x00200000 |UINT32|0x50000381
gCpPlatFlashTokenSpaceGuid.PcdFlashFvAcmSinitBase                  |0xFF820000 |UINT32|0x50000382

#gCpPlatFlashTokenSpaceGuid.PcdPTUFlashAreaBaseAddress             |0x00000000 |UINT32|0x50000391
#gCpPlatFlashTokenSpaceGuid.PcdMEFlashAreaBaseAddress              |0x00000000 |UINT32|0x50000392

## This PCD specifies the size of the physical device containing the BIOS, SMBIOS will use it.

gCpPlatFlashTokenSpaceGuid.PcdFlashBackupRegionBase                |0xFF800000 |UINT32|0x50000001
gCpPlatFlashTokenSpaceGuid.PcdFlashBackupRegionSize                |0x00000000 |UINT32|0x50000002



