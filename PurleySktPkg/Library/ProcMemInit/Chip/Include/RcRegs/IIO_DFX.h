//
// This file contains 'Framework Code' and is licensed as such
// under the terms of your license agreement with Intel or your
// vendor.  This file may not be modified, except as allowed by
// additional terms of your license agreement.
//
// **************************************************************************
// *                                                                        *
// *      Intel Restricted Secret                                           *
// *                                                                        *
// *      Reference Code                                                    *
// *                                                                        *
// *      Copyright (c) 2007-2016, Intel Corporation.                       *
// *                                                                        *
// *      This software and associated documentation (if any) is furnished  *
// *      under a license and may only be used or copied in accordance      *
// *      with the terms of the license. Except as permitted by such        *
// *      license, no part of this software or documentation may be         *
// *      reproduced, stored in a retrieval system, or transmitted in any   *
// *      form or by any means without the express written consent of       *
// *      Intel Corporation.                                                *
// *                                                                        *
// *      This program has been developed by Intel Corporation.             *
// *      Licensee has Intel's permission to incorporate this source code   *
// *      into their product, royalty free.  This source code may NOT be    *
// *      redistributed to anyone without Intel's written permission.       *
// *                                                                        *
// *      Intel specifically disclaims all warranties, express or           *
// *      implied, and all liability, including consequential and other     *
// *      indirect damages, for the use of this code, including liability   *
// *      for infringement of any proprietary rights, and including the     *
// *      warranties of merchantability and fitness for a particular        *
// *      purpose.  Intel does not assume any responsibility for any        *
// *      errors which may appear in this code nor any responsibility to    *
// *      update it.                                                        *
// *                                                                        *
// **************************************************************************
// **************************************************************************
// *                                                                        *
// *  PURPOSE:                                                              *
// *                                                                        *
// *      This file contains Silicon register definitions.                  *
// *                                                                        *
// **************************************************************************
//
/* Date Stamp: 9/13/2016 */

#ifndef IIO_DFX_h
#define IIO_DFX_h

#include "DataTypes.h"

/* Device and Function specifications:                                        */
/* For all target CPUs:                                                       */
/* IIO_DFX_DEV 7                                                              */
/* IIO_DFX_FUN 0                                                              */

/* VID_IIO_DFX_REG supported on:                                              */
/*       SKX_A0 (0x20138000)                                                  */
/*       SKX (0x20138000)                                                     */
/* Register default value:              0x8086                                */
#define VID_IIO_DFX_REG 0x12002000
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x000
 */
typedef union {
  struct {
    UINT16 vendor_identification_number : 16;
    /* vendor_identification_number - Bits[15:0], RO, default = 16'b1000000010000110 
       The value is assigned by PCI-SIG to Intel.
     */
  } Bits;
  UINT16 Data;
} VID_IIO_DFX_STRUCT;


/* DID_IIO_DFX_REG supported on:                                              */
/*       SKX_A0 (0x20138002)                                                  */
/*       SKX (0x20138002)                                                     */
/* Register default value:              0x2038                                */
#define DID_IIO_DFX_REG 0x12002002
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x002
 */
typedef union {
  struct {
    UINT16 device_identification_number : 16;
    /* device_identification_number - Bits[15:0], RO, default = 16'b0010000000111000 
       //TODO_HSXA0_SYNC
       Device ID values vary from function to function. Bits 15:8 are equal to 0x0E for 
       Ivytown. The following list is a breakdown of the function groups.0x0E00 - 
       0x0E1F : PCI Express and DMI ports 
       0x0E20 - 0x0E3F : IO Features (CBDMA, APIC, VT, RAS, LT)
       0x0E40 - 0x0E5F : Performance Monitors
       0x0E60 - 0x0E7F : DFX
       0x0E80 - 0x0E9F : Quick Path Interface
       0x0EA0 - 0x0EBF : Home Agent/Memory Controller
       0x0EC0 - 0x0EDF : Power Management
       0x0EE0 - 0x0EFF : Cbo/Ring
       //TODO_HSXA0_SYNC
       //SKX:Oct 18 2012: Post HSX sync values should be as below
       Device ID values vary from function to function. Bits 15:8 are equal to 0x2F for 
       the processor. The following list is a breakdown of the function groups. 
       0x2F00 - 0x2F1F : PCI Express and DMI ports
       0x2F20 - 0x2F3F : IO Features (CBDMA, APIC, VT, RAS, Intel TXT)
       0x2F40 - 0x2F5F : Performance Monitors
       0x2F60 - 0x2F7F : DFX
       0x2F80 - 0x2F9F : Intel Quick Path Interface
       0x2FA0 - 0x2FBF : Home Agent/Memory Controller
       0x2FC0 - 0x2FDF : Power Management
       0x2FE0 - 0x2FFF : Cbo/Ring
       
     */
  } Bits;
  UINT16 Data;
} DID_IIO_DFX_STRUCT;


/* PCICMD_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x20138004)                                                  */
/*       SKX (0x20138004)                                                     */
/* Register default value:              0x0000                                */
#define PCICMD_IIO_DFX_REG 0x12002004
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x004
 */
typedef union {
  struct {
    UINT16 iose : 1;
    /* iose - Bits[0:0], RO, default = 1'b0 
       1
     */
    UINT16 mse : 1;
    /* mse - Bits[1:1], RO, default = 1'b0 
       1
     */
    UINT16 bme : 1;
    /* bme - Bits[2:2], RO, default = 1'b0 
       1
     */
    UINT16 sce : 1;
    /* sce - Bits[3:3], RO, default = 1'b0 
       1
     */
    UINT16 mwie : 1;
    /* mwie - Bits[4:4], RO, default = 1'b0 
       1
     */
    UINT16 vga_palette_snoop_enable : 1;
    /* vga_palette_snoop_enable - Bits[5:5], RO, default = 1'b0 
       Not applicable to internal devices. Hardwired to 0.
     */
    UINT16 perre : 1;
    /* perre - Bits[6:6], RW, default = 1'b0 
       1
     */
    UINT16 idsel_stepping_wait_cycle_control : 1;
    /* idsel_stepping_wait_cycle_control - Bits[7:7], RO, default = 1'b0 
       Not applicable to internal devices. Hardwired to 0.
     */
    UINT16 serre : 1;
    /* serre - Bits[8:8], RW, default = 1'b0 
       1
     */
    UINT16 fast_back_to_back_enable : 1;
    /* fast_back_to_back_enable - Bits[9:9], RO, default = 1'b0 
       Not applicable to PCI Express and is hardwired to 0
     */
    UINT16 intx_interrupt_disable : 1;
    /* intx_interrupt_disable - Bits[10:10], RO, default = 1'b0 
       1
     */
    UINT16 rsvd : 5;
    /* rsvd - Bits[15:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} PCICMD_IIO_DFX_STRUCT;


/* PCISTS_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x20138006)                                                  */
/*       SKX (0x20138006)                                                     */
/* Register default value:              0x0010                                */
#define PCISTS_IIO_DFX_REG 0x12002006
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x006
 */
typedef union {
  struct {
    UINT16 rsvd_0 : 3;
    /* rsvd_0 - Bits[2:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 intxstat : 1;
    /* intxstat - Bits[3:3], RO, default = 1'b0 
       1
     */
    UINT16 capl : 1;
    /* capl - Bits[4:4], RO, default = 1'b1 
       1
     */
    UINT16 pci66mhz_capable : 1;
    /* pci66mhz_capable - Bits[5:5], RO, default = 1'b0 
       Not applicable to PCI Express. Hardwired to 0.
     */
    UINT16 rsvd_6 : 1;
    /* rsvd_6 - Bits[6:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 fb2b : 1;
    /* fb2b - Bits[7:7], RO, default = 1'b0 
       1
     */
    UINT16 mdpe : 1;
    /* mdpe - Bits[8:8], RO, default = 1'b0 
       1
     */
    UINT16 devselt : 2;
    /* devselt - Bits[10:9], RO, default = 2'b00 
       1
     */
    UINT16 sta : 1;
    /* sta - Bits[11:11], RO, default = 1'b0 
       1
     */
    UINT16 rta : 1;
    /* rta - Bits[12:12], RO, default = 1'b0 
       1
     */
    UINT16 rma : 1;
    /* rma - Bits[13:13], RO, default = 1'b0 
       1
     */
    UINT16 sse : 1;
    /* sse - Bits[14:14], RO, default = 1'b0 
       1
     */
    UINT16 dpe : 1;
    /* dpe - Bits[15:15], RO, default = 1'b0 
       1
     */
  } Bits;
  UINT16 Data;
} PCISTS_IIO_DFX_STRUCT;


/* RID_IIO_DFX_REG supported on:                                              */
/*       SKX_A0 (0x10138008)                                                  */
/*       SKX (0x10138008)                                                     */
/* Register default value:              0x00                                  */
#define RID_IIO_DFX_REG 0x12001008
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * Revision ID
 */
typedef union {
  struct {
    UINT8 revision_id : 8;
    /* revision_id - Bits[7:0], RO, default = 8'h0 
       
       	  Revision ID.
       	
     */
  } Bits;
  UINT8 Data;
} RID_IIO_DFX_STRUCT;


/* CCR_N0_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x10138009)                                                  */
/*       SKX (0x10138009)                                                     */
/* Register default value:              0x00                                  */
#define CCR_N0_IIO_DFX_REG 0x12001009
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * Class Code Register
 */
typedef union {
  struct {
    UINT8 interface : 8;
    /* interface - Bits[7:0], RO, default = 8'h0 
       
       	  Base revision.
       	
     */
  } Bits;
  UINT8 Data;
} CCR_N0_IIO_DFX_STRUCT;


/* CCR_N1_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x2013800A)                                                  */
/*       SKX (0x2013800A)                                                     */
/* Register default value:              0x0880                                */
#define CCR_N1_IIO_DFX_REG 0x1200200A
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * Class Code Register
 */
typedef union {
  struct {
    UINT16 sub_class : 8;
    /* sub_class - Bits[7:0], RO, default = 8'h80 
       
       	  Base revision.
       	
     */
    UINT16 base_class : 8;
    /* base_class - Bits[15:8], RO, default = 8'h8 
       
       	  Base revision.
       	
     */
  } Bits;
  UINT16 Data;
} CCR_N1_IIO_DFX_STRUCT;


/* CLSR_IIO_DFX_REG supported on:                                             */
/*       SKX_A0 (0x1013800C)                                                  */
/*       SKX (0x1013800C)                                                     */
/* Register default value:              0x00                                  */
#define CLSR_IIO_DFX_REG 0x1200100C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x00c
 */
typedef union {
  struct {
    UINT8 cacheline_size : 8;
    /* cacheline_size - Bits[7:0], RW, default = 8'b00000000  */
  } Bits;
  UINT8 Data;
} CLSR_IIO_DFX_STRUCT;


/* PLAT_IIO_DFX_REG supported on:                                             */
/*       SKX_A0 (0x1013800D)                                                  */
/*       SKX (0x1013800D)                                                     */
/* Register default value:              0x00                                  */
#define PLAT_IIO_DFX_REG 0x1200100D
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x00d
 */
typedef union {
  struct {
    UINT8 primary_latency_timer : 8;
    /* primary_latency_timer - Bits[7:0], RO, default = 8'b00000000 
       Not applicable to PCI-Express. Hardwired to 00h.
     */
  } Bits;
  UINT8 Data;
} PLAT_IIO_DFX_STRUCT;


/* HDR_IIO_DFX_REG supported on:                                              */
/*       SKX_A0 (0x1013800E)                                                  */
/*       SKX (0x1013800E)                                                     */
/* Register default value:              0x80                                  */
#define HDR_IIO_DFX_REG 0x1200100E
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x00e
 */
typedef union {
  struct {
    UINT8 configuration_layout : 7;
    /* configuration_layout - Bits[6:0], RO, default = 7'b0000000 
       This field identifies the format of the configuration header layout. It is Type 
       0 for all these devices. The default is 00h, indicating a 'endpoint device'. 
     */
    UINT8 multi_function_device : 1;
    /* multi_function_device - Bits[7:7], RO, default = 1'b1 
       This bit defaults to 1b since all these devices are multi-function
     */
  } Bits;
  UINT8 Data;
} HDR_IIO_DFX_STRUCT;


/* BIST_IIO_DFX_REG supported on:                                             */
/*       SKX_A0 (0x1013800F)                                                  */
/*       SKX (0x1013800F)                                                     */
/* Register default value:              0x00                                  */
#define BIST_IIO_DFX_REG 0x1200100F
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x00f
 */
typedef union {
  struct {
    UINT8 bist_tests : 8;
    /* bist_tests - Bits[7:0], RO, default = 8'b00000000 
       Not supported. Hardwired to 00h
     */
  } Bits;
  UINT8 Data;
} BIST_IIO_DFX_STRUCT;


/* SVID_IIO_DFX_REG supported on:                                             */
/*       SKX_A0 (0x2013802C)                                                  */
/*       SKX (0x2013802C)                                                     */
/* Register default value:              0x8086                                */
#define SVID_IIO_DFX_REG 0x1200202C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x02c
 */
typedef union {
  struct {
    UINT16 subsystem_vendor_identification_number : 16;
    /* subsystem_vendor_identification_number - Bits[15:0], RW_O, default = 16'b1000000010000110 
       The default value specifies Intel but can be set to any value once after reset.
     */
  } Bits;
  UINT16 Data;
} SVID_IIO_DFX_STRUCT;


/* SDID_IIO_DFX_REG supported on:                                             */
/*       SKX_A0 (0x2013802E)                                                  */
/*       SKX (0x2013802E)                                                     */
/* Register default value:              0x0000                                */
#define SDID_IIO_DFX_REG 0x1200202E
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x02e
 */
typedef union {
  struct {
    UINT16 subsystem_device_identification_number : 16;
    /* subsystem_device_identification_number - Bits[15:0], RW_O, default = 16'b0000000000000000 
       Assigned by the subsystem vendor to uniquely identify the subsystem
     */
  } Bits;
  UINT16 Data;
} SDID_IIO_DFX_STRUCT;


/* CAPPTR_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x10138034)                                                  */
/*       SKX (0x10138034)                                                     */
/* Register default value:              0x40                                  */
#define CAPPTR_IIO_DFX_REG 0x12001034
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x034
 */
typedef union {
  struct {
    UINT8 capability_pointer : 8;
    /* capability_pointer - Bits[7:0], RO, default = 8'b01000000 
       Points to the first capability structure for the device which is the PCIe 
       capability. 
     */
  } Bits;
  UINT8 Data;
} CAPPTR_IIO_DFX_STRUCT;


/* INTL_IIO_DFX_REG supported on:                                             */
/*       SKX_A0 (0x1013803C)                                                  */
/*       SKX (0x1013803C)                                                     */
/* Register default value:              0x00                                  */
#define INTL_IIO_DFX_REG 0x1200103C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x03c
 */
typedef union {
  struct {
    UINT8 interrupt_line : 8;
    /* interrupt_line - Bits[7:0], RO, default = 8'b00000000 
       N/A for these devices
     */
  } Bits;
  UINT8 Data;
} INTL_IIO_DFX_STRUCT;


/* INTPIN_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x1013803D)                                                  */
/*       SKX (0x1013803D)                                                     */
/* Register default value:              0x00                                  */
#define INTPIN_IIO_DFX_REG 0x1200103D
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x03d
 */
typedef union {
  struct {
    UINT8 interrupt_pin : 8;
    /* interrupt_pin - Bits[7:0], RO, default = 8'b00000000 
       N/A since these devices do not generate any interrupt on their own
     */
  } Bits;
  UINT8 Data;
} INTPIN_IIO_DFX_STRUCT;


/* MINGNT_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x1013803E)                                                  */
/*       SKX (0x1013803E)                                                     */
/* Register default value:              0x00                                  */
#define MINGNT_IIO_DFX_REG 0x1200103E
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x03e
 */
typedef union {
  struct {
    UINT8 mgv : 8;
    /* mgv - Bits[7:0], RO, default = 8'b00000000 
       The Device does not burst as a PCI compliant master.
     */
  } Bits;
  UINT8 Data;
} MINGNT_IIO_DFX_STRUCT;


/* MAXLAT_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x1013803F)                                                  */
/*       SKX (0x1013803F)                                                     */
/* Register default value:              0x00                                  */
#define MAXLAT_IIO_DFX_REG 0x1200103F
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x03f
 */
typedef union {
  struct {
    UINT8 mlv : 8;
    /* mlv - Bits[7:0], RO, default = 8'b00000000 
       The Device has no specific requirements for how often it needs to access the PCI 
       bus. 
     */
  } Bits;
  UINT8 Data;
} MAXLAT_IIO_DFX_STRUCT;


/* PXPCAP_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x40138040)                                                  */
/*       SKX (0x40138040)                                                     */
/* Register default value:              0x00920010                            */
#define PXPCAP_IIO_DFX_REG 0x12004040
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x040
 */
typedef union {
  struct {
    UINT32 capability_id : 8;
    /* capability_id - Bits[7:0], RO, default = 8'b00010000 
       Provides the PCI Express capability ID assigned by PCI-SIG.
     */
    UINT32 next_ptr : 8;
    /* next_ptr - Bits[15:8], RO, default = 8'b00000000 
       Pointer to the next capability. Set to 0 to indicate there are no more 
       capability structures. 
     */
    UINT32 capability_version : 4;
    /* capability_version - Bits[19:16], RO, default = 4'b0010 
       PCI Express Capability is Compliant with Version 1.0 of the PCI Express Spec.
       Note:
       This capability structure is not compliant with Versions beyond 1.0, since they 
       require additional capability registers to be reserved. The only purpose for 
       this capability structure is to make enhanced configuration space available. 
       Minimizing the size of this structure is accomplished by reporting version 1.0 
       compliancy and reporting that this is an integrated root port device. As such, 
       only three Dwords of configuration space are required for this structure. 
     */
    UINT32 device_port_type : 4;
    /* device_port_type - Bits[23:20], RO, default = 4'b1001 
       Device type is Root Complex Integrated Endpoint
     */
    UINT32 slot_implemented : 1;
    /* slot_implemented - Bits[24:24], RO, default = 1'b0 
       N/A for integrated endpoints
     */
    UINT32 interrupt_message_number : 5;
    /* interrupt_message_number - Bits[29:25], RO, default = 5'b00000 
       N/A for this device
     */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPCAP_IIO_DFX_STRUCT;


/* DEVCAP_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x40138044)                                                  */
/*       SKX (0x40138044)                                                     */
/* Register default value:              0x00008000                            */
#define DEVCAP_IIO_DFX_REG 0x12004044
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x044
 */
typedef union {
  struct {
    UINT32 max_payload_size_supported : 3;
    /* max_payload_size_supported - Bits[2:0], RO, default = 3'b000  */
    UINT32 phantom_functions_supported : 2;
    /* phantom_functions_supported - Bits[4:3], RO, default = 2'b00  */
    UINT32 extended_tag_field_supported : 1;
    /* extended_tag_field_supported - Bits[5:5], RO, default = 1'b0  */
    UINT32 endpoint_l0s_acceptable_latency : 3;
    /* endpoint_l0s_acceptable_latency - Bits[8:6], RO, default = 3'b000  */
    UINT32 endpoint_l1_acceptable_latency : 3;
    /* endpoint_l1_acceptable_latency - Bits[11:9], RO, default = 3'b000  */
    UINT32 attention_button_present : 1;
    /* attention_button_present - Bits[12:12], RO, default = 1'b0  */
    UINT32 attention_indicator_present : 1;
    /* attention_indicator_present - Bits[13:13], RO, default = 1'b0  */
    UINT32 power_indicator_present_on_device : 1;
    /* power_indicator_present_on_device - Bits[14:14], RO, default = 1'b0  */
    UINT32 role_based_error_reporting : 1;
    /* role_based_error_reporting - Bits[15:15], RO, default = 1'b1  */
    UINT32 rsvd_16 : 2;
    /* rsvd_16 - Bits[17:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 captured_slot_power_limit_value : 8;
    /* captured_slot_power_limit_value - Bits[25:18], RO, default = 8'b00000000  */
    UINT32 captured_slot_power_limit_scale : 2;
    /* captured_slot_power_limit_scale - Bits[27:26], RO, default = 2'b00  */
    UINT32 rsvd_28 : 4;
    /* rsvd_28 - Bits[31:28], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DEVCAP_IIO_DFX_STRUCT;


/* DEVCON_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x20138048)                                                  */
/*       SKX (0x20138048)                                                     */
/* Register default value:              0x0000                                */
#define DEVCON_IIO_DFX_REG 0x12002048
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * The PCI Express Device Control register controls PCI Express specific 
 * capabilities parameters associated with the device. 
 */
typedef union {
  struct {
    UINT16 correctable_error_reporting_enable : 1;
    /* correctable_error_reporting_enable - Bits[0:0], RO, default = 1'b0 
       N/A for CB DMA
     */
    UINT16 non_fatal_error_reporting_enable : 1;
    /* non_fatal_error_reporting_enable - Bits[1:1], RO, default = 1'b0 
       N/A for CB DMA
     */
    UINT16 fatal_error_reporting_enable : 1;
    /* fatal_error_reporting_enable - Bits[2:2], RO, default = 1'b0 
       N/A for CB DMA
     */
    UINT16 unsupported_request_reporting_enable : 1;
    /* unsupported_request_reporting_enable - Bits[3:3], RO, default = 1'b0 
       N/A for CB DMA
     */
    UINT16 enable_relaxed_ordering : 1;
    /* enable_relaxed_ordering - Bits[4:4], RO, default = 1'b0 
       For most parts, writes from CB DMA are relaxed ordered, except for DMA 
       completion writes. But the fact that CB DMA writes are relaxed ordered is not 
       very useful except when the writes are also non-snooped. If the writes are 
       snooped, relaxed ordering does not provide any particular advantage based on IIO 
       uArch. But when writes are non-snooped, relaxed ordering is required to get good 
       BW and this bit is expected to be set. If this bit is clear, NS writes will get 
       very poor performance. 
     */
    UINT16 max_payload_size : 3;
    /* max_payload_size - Bits[7:5], RO, default = 3'b000 
       N/A for CB DMA
     */
    UINT16 extended_tag_field_enable : 1;
    /* extended_tag_field_enable - Bits[8:8], RO, default = 1'b0  */
    UINT16 phantom_functions_enable : 1;
    /* phantom_functions_enable - Bits[9:9], RO, default = 1'b0 
       Not applicable to CB DMA since it never uses phantom functions as a requester.
     */
    UINT16 auxiliary_power_management_enable : 1;
    /* auxiliary_power_management_enable - Bits[10:10], RO, default = 1'b0 
       Not applicable to CB DMA
     */
    UINT16 enable_no_snoop : 1;
    /* enable_no_snoop - Bits[11:11], RO, default = 1'b0 
       For CB DMA, when this bit is clear, all DMA transactions must be snooped. When 
       set, DMA transactions to main memory can utilize No Snoop optimization under the 
       guidance of the device driver. 
     */
    UINT16 max_read_request_size : 3;
    /* max_read_request_size - Bits[14:12], RO, default = 3'b000 
       N/A to CB DMA since it does not issue tx on PCIE
     */
    UINT16 rsvd : 1;
    /* rsvd - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} DEVCON_IIO_DFX_STRUCT;


/* DEVSTS_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x2013804A)                                                  */
/*       SKX (0x2013804A)                                                     */
/* Register default value:              0x0000                                */
#define DEVSTS_IIO_DFX_REG 0x1200204A
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x04a
 */
typedef union {
  struct {
    UINT16 correctable_error_detected : 1;
    /* correctable_error_detected - Bits[0:0], RO, default = 1'b0  */
    UINT16 non_fatal_error_detected : 1;
    /* non_fatal_error_detected - Bits[1:1], RO, default = 1'b0  */
    UINT16 fatal_error_detected : 1;
    /* fatal_error_detected - Bits[2:2], RO, default = 1'b0  */
    UINT16 unsupported_request_detected : 1;
    /* unsupported_request_detected - Bits[3:3], RO, default = 1'b0  */
    UINT16 aux_power_detected : 1;
    /* aux_power_detected - Bits[4:4], RO, default = 1'b0  */
    UINT16 transactions_pending : 1;
    /* transactions_pending - Bits[5:5], RO, default = 1'b0  */
    UINT16 rsvd : 10;
    /* rsvd - Bits[15:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} DEVSTS_IIO_DFX_STRUCT;


/* LNKCAP_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x4013804C)                                                  */
/*       SKX (0x4013804C)                                                     */
/* Register default value:              0x003BF400                            */
#define LNKCAP_IIO_DFX_REG 0x1200404C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x04c
 */
typedef union {
  struct {
    UINT32 link_speeds_supported : 4;
    /* link_speeds_supported - Bits[3:0], RO, default = 4'b0000  */
    UINT32 maximum_link_width : 6;
    /* maximum_link_width - Bits[9:4], RO, default = 6'b000000  */
    UINT32 active_state_link_pm_support : 2;
    /* active_state_link_pm_support - Bits[11:10], RO, default = 2'b01  */
    UINT32 l0s_exit_latency : 3;
    /* l0s_exit_latency - Bits[14:12], RO, default = 3'b111  */
    UINT32 l1_exit_latency : 3;
    /* l1_exit_latency - Bits[17:15], RO, default = 3'b111  */
    UINT32 clock_power_management : 1;
    /* clock_power_management - Bits[18:18], RO, default = 1'b0  */
    UINT32 surprise_down_error_reporting_capable : 1;
    /* surprise_down_error_reporting_capable - Bits[19:19], RO, default = 1'b1  */
    UINT32 data_link_layer_link_active : 1;
    /* data_link_layer_link_active - Bits[20:20], RO, default = 1'b1  */
    UINT32 link_bandwidth_notification_capability_a : 1;
    /* link_bandwidth_notification_capability_a - Bits[21:21], RO, default = 1'b1  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[23:22], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 port_number : 8;
    /* port_number - Bits[31:24], RO, default = 8'b00000000  */
  } Bits;
  UINT32 Data;
} LNKCAP_IIO_DFX_STRUCT;


/* LNKSTS_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x20138052)                                                  */
/*       SKX (0x20138052)                                                     */
/* Register default value:              0x1000                                */
#define LNKSTS_IIO_DFX_REG 0x12002052
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x052
 */
typedef union {
  struct {
    UINT16 current_link_speed : 4;
    /* current_link_speed - Bits[3:0], RO, default = 4'b0000  */
    UINT16 negotiated_link_width : 6;
    /* negotiated_link_width - Bits[9:4], RO, default = 6'b000000  */
    UINT16 rsvd : 1;
    /* rsvd - Bits[10:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 link_training : 1;
    /* link_training - Bits[11:11], RO, default = 1'b0  */
    UINT16 slot_clock_configuration : 1;
    /* slot_clock_configuration - Bits[12:12], RO, default = 1'b1  */
    UINT16 data_link_layer_link_active : 1;
    /* data_link_layer_link_active - Bits[13:13], RO, default = 1'b0  */
    UINT16 link_bandwidth_management_status_this : 1;
    /* link_bandwidth_management_status_this - Bits[14:14], RO, default = 1'b0  */
    UINT16 link_autonomous_bandwidth_status_this : 1;
    /* link_autonomous_bandwidth_status_this - Bits[15:15], RO, default = 1'b0  */
  } Bits;
  UINT16 Data;
} LNKSTS_IIO_DFX_STRUCT;


/* LNKCAP2_IIO_DFX_REG supported on:                                          */
/*       SKX_A0 (0x4013806C)                                                  */
/*       SKX (0x4013806C)                                                     */
/* Register default value:              0x003BF400                            */
#define LNKCAP2_IIO_DFX_REG 0x1200406C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x06c
 */
typedef union {
  struct {
    UINT32 link_speeds_supported : 4;
    /* link_speeds_supported - Bits[3:0], RO, default = 4'b0000  */
    UINT32 maximum_link_width : 6;
    /* maximum_link_width - Bits[9:4], RO, default = 6'b000000  */
    UINT32 active_state_link_pm_support : 2;
    /* active_state_link_pm_support - Bits[11:10], RO, default = 2'b01  */
    UINT32 l0s_exit_latency : 3;
    /* l0s_exit_latency - Bits[14:12], RO, default = 3'b111  */
    UINT32 l1_exit_latency : 3;
    /* l1_exit_latency - Bits[17:15], RO, default = 3'b111  */
    UINT32 clock_power_management : 1;
    /* clock_power_management - Bits[18:18], RO, default = 1'b0  */
    UINT32 surprise_down_error_reporting_capable : 1;
    /* surprise_down_error_reporting_capable - Bits[19:19], RO, default = 1'b1  */
    UINT32 data_link_layer_link_active : 1;
    /* data_link_layer_link_active - Bits[20:20], RO, default = 1'b1  */
    UINT32 link_bandwidth_notification_capability_a : 1;
    /* link_bandwidth_notification_capability_a - Bits[21:21], RO, default = 1'b1  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[23:22], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 port_number : 8;
    /* port_number - Bits[31:24], RO, default = 8'b00000000  */
  } Bits;
  UINT32 Data;
} LNKCAP2_IIO_DFX_STRUCT;


/* LNKCON2_OLD_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x20138070)                                                  */
/*       SKX (0x20138070)                                                     */
/* Register default value:              0x0000                                */
#define LNKCON2_OLD_IIO_DFX_REG 0x12002070
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x070
 */
typedef union {
  struct {
    UINT16 active_state_link_pm_control : 2;
    /* active_state_link_pm_control - Bits[1:0], RO, default = 2'b00  */
    UINT16 rsvd_2 : 1;
    /* rsvd_2 - Bits[2:2], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 read_completion_boundary : 1;
    /* read_completion_boundary - Bits[3:3], RO, default = 1'b0  */
    UINT16 link_disable : 1;
    /* link_disable - Bits[4:4], RO, default = 1'b0  */
    UINT16 retrain_link : 1;
    /* retrain_link - Bits[5:5], RO, default = 1'b0  */
    UINT16 common_clock_configuration : 1;
    /* common_clock_configuration - Bits[6:6], RO, default = 1'b0  */
    UINT16 extended_synch : 1;
    /* extended_synch - Bits[7:7], RO, default = 1'b0  */
    UINT16 enable_clock_power_management_na : 1;
    /* enable_clock_power_management_na - Bits[8:8], RO, default = 1'b0  */
    UINT16 hardware_autonomous_width_disable_ioh : 1;
    /* hardware_autonomous_width_disable_ioh - Bits[9:9], RO, default = 1'b0  */
    UINT16 link_bandwidth_management_interrupt_enable : 1;
    /* link_bandwidth_management_interrupt_enable - Bits[10:10], RO, default = 1'b0  */
    UINT16 link_autonomous_bandwidth_interrupt_enable : 1;
    /* link_autonomous_bandwidth_interrupt_enable - Bits[11:11], RO, default = 1'b0  */
    UINT16 rsvd_12 : 4;
    /* rsvd_12 - Bits[15:12], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LNKCON2_OLD_IIO_DFX_STRUCT;


/* LNKSTS2_IIO_DFX_REG supported on:                                          */
/*       SKX_A0 (0x20138072)                                                  */
/*       SKX (0x20138072)                                                     */
/* Register default value:              0x1000                                */
#define LNKSTS2_IIO_DFX_REG 0x12002072
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x072
 */
typedef union {
  struct {
    UINT16 current_link_speed : 4;
    /* current_link_speed - Bits[3:0], RO, default = 4'b0000  */
    UINT16 negotiated_link_width : 6;
    /* negotiated_link_width - Bits[9:4], RO, default = 6'b000000  */
    UINT16 rsvd : 1;
    /* rsvd - Bits[10:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 link_training : 1;
    /* link_training - Bits[11:11], RO, default = 1'b0  */
    UINT16 slot_clock_configuration : 1;
    /* slot_clock_configuration - Bits[12:12], RO, default = 1'b1  */
    UINT16 data_link_layer_link_active : 1;
    /* data_link_layer_link_active - Bits[13:13], RO, default = 1'b0  */
    UINT16 link_bandwidth_management_status_this : 1;
    /* link_bandwidth_management_status_this - Bits[14:14], RO, default = 1'b0  */
    UINT16 link_autonomous_bandwidth_status_this : 1;
    /* link_autonomous_bandwidth_status_this - Bits[15:15], RO, default = 1'b0  */
  } Bits;
  UINT16 Data;
} LNKSTS2_IIO_DFX_STRUCT;


/* SLTCAP2_IIO_DFX_REG supported on:                                          */
/*       SKX_A0 (0x40138074)                                                  */
/*       SKX (0x40138074)                                                     */
/* Register default value:              0x00000000                            */
#define SLTCAP2_IIO_DFX_REG 0x12004074
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x074
 */
typedef union {
  struct {
    UINT32 attention_button_present : 1;
    /* attention_button_present - Bits[0:0], RO, default = 1'b0  */
    UINT32 power_controller_present : 1;
    /* power_controller_present - Bits[1:1], RO, default = 1'b0  */
    UINT32 mrl_sensor_present : 1;
    /* mrl_sensor_present - Bits[2:2], RO, default = 1'b0  */
    UINT32 attention_indicator_present : 1;
    /* attention_indicator_present - Bits[3:3], RO, default = 1'b0  */
    UINT32 power_indicator_present : 1;
    /* power_indicator_present - Bits[4:4], RO, default = 1'b0  */
    UINT32 hotplug_surprise : 1;
    /* hotplug_surprise - Bits[5:5], RO, default = 1'b0  */
    UINT32 hotplug_capable : 1;
    /* hotplug_capable - Bits[6:6], RO, default = 1'b0  */
    UINT32 slot_power_limit_value : 8;
    /* slot_power_limit_value - Bits[14:7], RO, default = 8'b00000000  */
    UINT32 slot_power_limit_scale : 2;
    /* slot_power_limit_scale - Bits[16:15], RO, default = 2'b00  */
    UINT32 electromechanical_interlock_present : 1;
    /* electromechanical_interlock_present - Bits[17:17], RO, default = 1'b0  */
    UINT32 command_complete_not_capable : 1;
    /* command_complete_not_capable - Bits[18:18], RO, default = 1'b0  */
    UINT32 physical_slot_number : 13;
    /* physical_slot_number - Bits[31:19], RO, default = 13'b0000000000000  */
  } Bits;
  UINT32 Data;
} SLTCAP2_IIO_DFX_STRUCT;


/* SLTSTS2_IIO_DFX_REG supported on:                                          */
/*       SKX_A0 (0x2013807A)                                                  */
/*       SKX (0x2013807A)                                                     */
/* Register default value:              0x0000                                */
#define SLTSTS2_IIO_DFX_REG 0x1200207A
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x07a
 */
typedef union {
  struct {
    UINT16 attention_button_pressed : 1;
    /* attention_button_pressed - Bits[0:0], RO, default = 1'b0  */
    UINT16 power_fault_detected : 1;
    /* power_fault_detected - Bits[1:1], RO, default = 1'b0  */
    UINT16 mrl_sensor_changed : 1;
    /* mrl_sensor_changed - Bits[2:2], RO, default = 1'b0  */
    UINT16 presence_detect_changed : 1;
    /* presence_detect_changed - Bits[3:3], RO, default = 1'b0  */
    UINT16 command_completed : 1;
    /* command_completed - Bits[4:4], RO, default = 1'b0  */
    UINT16 mrl_sensor_state : 1;
    /* mrl_sensor_state - Bits[5:5], RO, default = 1'b0  */
    UINT16 presence_detect_state : 1;
    /* presence_detect_state - Bits[6:6], RO, default = 1'b0  */
    UINT16 electromechanical_latch_status : 1;
    /* electromechanical_latch_status - Bits[7:7], RO, default = 1'b0  */
    UINT16 data_link_layer_state_changed : 1;
    /* data_link_layer_state_changed - Bits[8:8], RO, default = 1'b0  */
    UINT16 rsvd : 7;
    /* rsvd - Bits[15:9], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} SLTSTS2_IIO_DFX_STRUCT;


/* REUTHDREXT_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138100)                                                  */
/*       SKX (0x40138100)                                                     */
/* Register default value:              0x0001000B                            */
#define REUTHDREXT_IIO_DFX_REG 0x12004100
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x100
 */
typedef union {
  struct {
    UINT32 pciecapid : 16;
    /* pciecapid - Bits[15:0], RO, default = 16'b0000000000001011 
       PCIe Extended CapIDThis field has the value 0Bh to identify the CAP_ID assigned 
       by the PCI SIG indicating a vendor specific capability. 
     */
    UINT32 pciecapver : 4;
    /* pciecapver - Bits[19:16], RO, default = 4'b0001 
       Capability VersionThis field is a PCI-SIG defined version number that indicates 
       the nature and format of the extended capability. This indicates the version of 
       the REUT Capability. 
     */
    UINT32 pcienxtptr : 12;
    /* pcienxtptr - Bits[31:20], RO, default = 12'b000000000000 
       1
     */
  } Bits;
  UINT32 Data;
} REUTHDREXT_IIO_DFX_STRUCT;


/* REUTHDRCAP_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138104)                                                  */
/*       SKX (0x40138104)                                                     */
/* Register default value:              0x0B800001                            */
#define REUTHDRCAP_IIO_DFX_REG 0x12004104
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x104
 */
typedef union {
  struct {
    UINT32 vsecid : 16;
    /* vsecid - Bits[15:0], RO, default = 16'b0000000000000001 
       REUT Engine VSECIDThis field is a Intel-defined ID number that indicates the 
       nature and format of the VSEC structure. '01h' is the ID Council defined for 
       REUT engines. Software must qualify the Vendor ID before interpreting this 
       field. 
       NOTE: '00h' is reserved, '02h' is specified for the REUT 'leaf' capability 
       structure which resides in each link which in supported by a REUT engine. 
     */
    UINT32 vsecidrev : 4;
    /* vsecidrev - Bits[19:16], RO, default = 4'b0000 
       REUT VSECID RevThis field is defined as the version number that indicates the 
       nature and format of the VSEC structure. Software must quality the Vendor ID 
       before interpreting this field. 
     */
    UINT32 vseclen : 12;
    /* vseclen - Bits[31:20], RO, default = 12'b000010111000 
       VSEC LengthThis field defines the length of the REUT 'capability body'. 
       Currently the size of the body is 184 bytes or 46 DWORDs. 
     */
  } Bits;
  UINT32 Data;
} REUTHDRCAP_IIO_DFX_STRUCT;


/* REUTENGOVR_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138108)                                                  */
/*       SKX (0x40138108)                                                     */
/* Register default value:              0x06403007                            */
#define REUTENGOVR_IIO_DFX_REG 0x12004108
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x108
 */
typedef union {
  struct {
    UINT32 txmultlnk : 1;
    /* txmultlnk - Bits[0:0], RO, default = 1'b1 
       Can Transmit or Receive on Multiple Links? indicates whether the REUT Engine can 
       transmit and/or receive on multiple Links simultaneously. 
       Can Transmit or Receive on Multiple Links? = 0 - Can only control the link 
       indicated by Link Select, 
       Can Transmit or Receive on Multiple Links? = 1 - Can control multiple links 
       advertised in Link Capability with further behavior dictated by the setting of 
       Can Control a Partial Set Of Links. 
     */
    UINT32 contrlpart : 1;
    /* contrlpart - Bits[1:1], RO, default = 1'b1 
       Can Control a Partial Set Of Links? is only used if Can Transmit or Receive on 
       Multiple Links? Is set to 1. Otherwise Can Control a Partial Set Of Links is 
       always set to 0. 
       Can Control a Partial Set Of Links? is used to indicate whether a REUT engine 
       can control any possible subset of multiple Links simultaneously. 
       If Can Control a Partial Set Of Links? Is set to 0 then all links advertised in 
       the Link Capability are controlled together. 
       If Can Control a Partial Set Of Links? Is set to 1 the Links advertised in Link 
       Capability can be controlled separately by programming Link Control. 
     */
    UINT32 linkautocap : 1;
    /* linkautocap - Bits[2:2], RO, default = 1'b1 
       Link Auto Configuration Capability indicates whether a PCI Express port can Auto 
       Configure multiple Links through initialization. 
       If Link Auto Configuration Capability = 0 or Link Auto Configuration = 0 then 
       the settings of the odd bits within Link Control will dictate the initial link 
       configuration to be used (reflected by reading the Pre Configuration Lane ID) 
       If Link Auto Configuration Capability = 1 and Link Auto Configuration = 1 then 
       the settings of all the odd Link Control bit will be ignored with a value of 
       zero used instead which will cause negotiation of larger Link to occur 
       dynamically through Initialization. The Pre Configuration Lane ID should have 
       all of the Links advertised by # of supported Links present when read back. 
       Notes:
       There is no Link Select dependence for this field.
       PCI Express Specific Field
     */
    UINT32 rsvd_3 : 8;
    /* rsvd_3 - Bits[10:3], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 reutendid : 6;
    /* reutendid - Bits[16:11], RO_V, default = 6'b000110 
       REUT Engine ID[5:0]
     */
    UINT32 reutsprev : 8;
    /* reutsprev - Bits[24:17], RO, default = 8'b00100000 
       REUT revision[5:0]
       [7:5]: major revision = 001b
       [4:0]: minor revision = 0 0000b
     */
    UINT32 numlinks : 5;
    /* numlinks - Bits[29:25], RO, default = 5'b00011 
       The number of links supported +1 is the total number of separate Links that this 
       REUT Engine is designed to support. 
     */
    UINT32 rsvd_30 : 2;
    /* rsvd_30 - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTENGOVR_IIO_DFX_STRUCT;


/* REUTENGLD_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x4013810C)                                                  */
/*       SKX (0x4013810C)                                                     */
/* Register default value:              0x020301EF                            */
#define REUTENGLD_IIO_DFX_REG 0x1200410C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * Multiple links can be strapped (forced to be combined) into a larger Link, they 
 * might be fused off (Disabled) and unable to be used, or they might be severed 
 * from other Links so that they cannot combine into a wider Logical Link.  All of 
 * these are considered Strapping or Fusing options. The actual method of 
 * controlling this arrangement of Links (LTSSMs) may be through Si options, 
 * fusing, chip Power On Configuration (POC), or a control register.  It is the 
 * result of this arrangement of Strapping, Fusing, and Boundary creation that the 
 * REUT hardware and software must be able to discover.  Also, Links may have the 
 * ability to be ganged together through the training Configuration process, and 
 * new Link Boundaries established.  To that end, a few register fields are defined 
 * to enable this discovery of both the Package Constraints (fuses etc) and the 
 * Platform Constraints (connectors &amp; downstream devices etc). 
 */
typedef union {
  struct {
    UINT32 rxlw2 : 5;
    /* rxlw2 - Bits[4:0], RO, default = 5'b01111 
       1
     */
    UINT32 rxlw : 5;
    /* rxlw - Bits[9:5], RO, default = 5'b01111 
       Width of the Link indicated by LinkSelect in REUT-ENG-LS. Actual width is N+1.
       03h = 3dec. Actual width is 3+ 1 = 4 lanes.
       PCI Express Link Behavior:
       There is no Link Select dependence to this register.
       RX Link Width displays the total number of Lanes controlled by this REUT engine.
       32 Lanes is Maximum Lane Support for REUT 1.0
     */
    UINT32 rsvd_10 : 3;
    /* rsvd_10 - Bits[12:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 devfct : 8;
    /* devfct - Bits[20:13], RO_V, default = 8'b00011000 
       Describes the unique Device/Function number for the selected Link (indicated by 
       the LinkSelect setting). 
       Device/Function number is a unique identifier that is component specific that is 
       not repeated for any two Links of within the component (i.e. every CSI Link must 
       have a unique device number but a CSI and DDR link can share a similar device 
       number. 
       XP located at:
       Device0 = 00000b, function0 = 000b = 0000 0000b
       ReutDevID = (Devnum &lt;&lt; 3) | Function number
     */
    UINT32 rsvd_21 : 2;
    /* rsvd_21 - Bits[22:21], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 lnkinact : 1;
    /* lnkinact - Bits[23:23], RO_V, default = 1'b0 
       Indicates whether the current Link (indicated by the Link Select) is in use.
       In general this bit is used to indicate that this link is disabled and no 
       testing can be performed. 
       PCI Express Link Behavior:
       PCI Express uses this bit to indicate that the selected link is disabled (by 
       fuse, strapping, or any other means) or that no Lane within this Link has 
       detected a receiver during the last Detect operation. This enables the user to 
       understand which Links are connected to a physical device and that they should 
       be tested. 
     */
    UINT32 lnktype : 6;
    /* lnktype - Bits[29:24], RO, default = 6'b000010 
       Indicates the type of Link selected by Link Select.
       000000: CSI
       000001: FBD
       000010: PCI Express
       000011: DDR3
     */
    UINT32 rsvd_30 : 2;
    /* rsvd_30 - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTENGLD_IIO_DFX_STRUCT;


/* REUTENGLSCAP_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138110)                                                  */
/*       SKX (0x40138110)                                                     */
/* Register default value:              0x00000002                            */
#define REUTENGLSCAP_IIO_DFX_REG 0x12004110
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x110
 */
typedef union {
  struct {
    UINT32 lnkspeedcap : 32;
    /* lnkspeedcap - Bits[31:0], RO_V, default = 32'b00000000000000000000000000000010 
       Advertises the possible speed capabilities of the Link if there is more than 
       one. 
       Displayed as One Hot
       PCI Express:
       00000001: Gen 1 Speed (2.5 GT/s)
       00000010: Gen 2 Speed (5 GT/s)
       00000100: Gen 3 Speed (8 GT/s)
       Notes:
       PCI Express Specific Field
       
     */
  } Bits;
  UINT32 Data;
} REUTENGLSCAP_IIO_DFX_STRUCT;


/* REUTENGLSSEL_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138114)                                                  */
/*       SKX (0x40138114)                                                     */
/* Register default value:              0x00000002                            */
#define REUTENGLSSEL_IIO_DFX_REG 0x12004114
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x114 [Index=reutengltrcon.linkselect]
 */
typedef union {
  struct {
    UINT32 lnkspeedsel : 32;
    /* lnkspeedsel - Bits[31:0], IND, default = 32'b00000000000000000000000000000010 
       Bit 7 is used as the enable bit for this field to override LNKCON2.'Target Link 
       Speed' 
       01h: Gen 1 Speed (2.5 GT/s) - benign, has no effect
       02h: Gen 2 Speed (5 GT/s) - benign, has no effect
       04h: Gen 3 Speed (8 GT/s) - benign, has no effect
       81h: Override with Gen 1 Speed (2.5 GT/s)
       82h: Override with Gen 2 Speed (5 GT/s)
       84h: Override with Gen 3 Speed (8GT/s)
       Others: Reserved
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
       Note: PCI Express Specific Field 
       
     */
  } Bits;
  UINT32 Data;
} REUTENGLSSEL_IIO_DFX_STRUCT;


/* REUTENGLTRCAP_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138118)                                                  */
/*       SKX (0x40138118)                                                     */
/* Register default value:              0x000000FF                            */
#define REUTENGLTRCAP_IIO_DFX_REG 0x12004118
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x118
 */
typedef union {
  struct {
    UINT32 linkcap : 8;
    /* linkcap - Bits[7:0], RO, default = 8'b11111111 
       PCI Express link Behavior:
       Every even bit represents a Link.
       [0]: Link 0
       [1]: Merge capability with link 0
       [2]: Link 1
       [3]: Merge capability with link 1
       [4]: Link 2
       [5]: Merge capability with link 2
       Etc..
       Any odd bit set to 1 indicates the capability to merge the two nearest even 
       Links into one Link with the lowest Link number controlling the merged Links for 
       register fields that are Link Select dependent. 
       Groups of three or more Links can be merged if consecutive odd bits are set to 
       1. 
       Example:
       Assume a x16 PCI Express Port can be configured into the following combinations 
       of Links. 
       X4,x4,x4,x4
       X4,x4,x8
       X8,x4,x4
       X8,x8
       X16
       The Link Capability field would be set to 003F (hex) with bits 0-6 set to 1 to 
       represent 4 possible links (Bit 0 = Link 0, Bit 2 = Link 1, Bit 4 = Link 2, and 
       Bit 6 = Link 3) and three possible merge Link bits (Bit 1, Bit 3, and Bit 5) 
       See Link Control for additional usage information.
     */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTENGLTRCAP_IIO_DFX_STRUCT;


/* REUTENGLTRCON_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x4013811C)                                                  */
/*       SKX (0x4013811C)                                                     */
/* Register default value:              0x00000000                            */
#define REUTENGLTRCON_IIO_DFX_REG 0x1200411C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * Additional Information on 'Links To Control' Bit Field
 */
typedef union {
  struct {
    UINT32 linkctrl : 16;
    /* linkctrl - Bits[15:0], RWS_L, default = 16'b0000000000000000 
       Link ControlDependency on Link Control is called out explicitly throughout 
       various REUT registers definition when it occurs. 
       Every even bit in Link Control represents a Link.
       Bit 0 = Link 0
       Bit 2 = Link 1
       Bit 4 = Link 2
       Etc.
       The following Rules apply to the Even bits of Link Control.
       If Can Transmit or Receive on Multiple Links? = 0 then the even Bits of Link 
       Control are not writable and must always be equal to Link Capability. Link 
       Select must be the sole method to determine which Link is being accessed and 
       controlled. 
       If Can Transmit or Receive on Multiple Links? = 1 then the REUT engine can 
       transmit and/or receive on multiple links based on the following rules. 
       If Can Select a Partial Set Of Link Control is set to 0 then the even Bits of 
       Link Control are not writable and must always be equal to Link Capability 
       Else,
       If Can Select a Partial Set Of Link Control is set to 1 then the even bits of 
       Link Control can be set to '0' or '1' for any combination of Links which are set 
       to '1' in the Link Capability. Writing to register dependent on Link Control 
       will cause only the selected Links to be written to while leaving non selected 
       Link register values unchanged. 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd_16 : 7;
    /* rsvd_16 - Bits[22:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 linkautoneg : 1;
    /* linkautoneg - Bits[23:23], RWS_L, default = 1'b0 
       If Link Auto Configuration Capability is set to 0 then Link Auto Configuration 
       is always reserved as 0. 
       Else,
       If Link Auto Configuration is set to 0 then all odd Link Control bits that are 
       set to '1' will condition how the Pre Configuration Lane ID values are set. 
       If Link Auto Configuration is set to 1 then all odd Link Control bits are 
       ignored and are assumed to be 0. 
       See Link Control for more details.
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd_24 : 1;
    /* rsvd_24 - Bits[24:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 linkselect : 2;
    /* linkselect - Bits[26:25], RWS_L, default = 2'b00 
       Link SelectThis bit is used in conjunction with many other REUT register bits 
       which are explicitly called out within the description field of the particular 
       bit where it has a potential affect. 
       The bit field selects the following link depending on which REUT engine is being 
       used. 
       00: PXP0, PXP1, PXP3, PXP7
       01: -------, PXP2, PXP4, PXP8
       10: -------, --------, PXP5, PXP9
       11: --------, -------, PXP6, PXP10
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 linkselect_notused : 2;
    /* linkselect_notused - Bits[28:27], RWS_L, default = 2'b00  */
    UINT32 rsvd_29 : 3;
    /* rsvd_29 - Bits[31:29], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTENGLTRCON_IIO_DFX_STRUCT;


/* REUTERRCED_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138120)                                                  */
/*       SKX (0x40138120)                                                     */
/* Register default value:              0x00000000                            */
#define REUTERRCED_IIO_DFX_REG 0x12004120
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is dependent on the value of the link selection CSR: 
 * [Index=reutengltrcon.linkselect]. 
 */
typedef union {
  struct {
    UINT32 crccount : 15;
    /* crccount - Bits[14:0], IND, default = 15'b000000000000000 
       Link CRC Error Counter is used to measure bit errors while in L0. It is useful 
       to correlate the well controlled stress of Loopback.Pattern tests to normal 
       operating conditions. 
       The CRC Error counters are incremented every time a non correctable error is 
       detected. 
       When Link CRC Error Counter wraps around the Link CRC Overflow bit (bit 15) is 
       set to '1'. 
       Notes:
       The Link Type behavior description below outlines how this field behaves.
       If # of links supported is greater than 0 there is a Link Select dependence for 
       this field, that is, this bit field is dependent on the value selected in the 
       link selection CSR: XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 crcoverflow : 1;
    /* crcoverflow - Bits[15:15], IND, default = 1'b0 
       When Link CRC Error Counter wraps around the Link CRC Overflow bit is set to 
       '1'. 
       Notes:
       If # of links supported is greater than 0, there is a Link Select dependence for 
       this field, that is, this bit field is dependent on the value selected in the 
       link selection CSR: XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTERRCED_IIO_DFX_STRUCT;


/* REUTERRRCV_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138124)                                                  */
/*       SKX (0x40138124)                                                     */
/* Register default value:              0x00000000                            */
#define REUTERRRCV_IIO_DFX_REG 0x12004124
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is dependent on the value of the link selection CSR: 
 * [Index=reutengltrcon.linkselect]. 
 */
typedef union {
  struct {
    UINT32 rcverrcount : 15;
    /* rcverrcount - Bits[14:0], IND, default = 15'b000000000000000 
       If # of links supported is greater than 0 there is a Link Select dependence for 
       this field. 
       ECC/Receiver Error Counter is used to help measure bit errors while in L0. It is 
       useful to correlate the well controlled stress of Loopback.Pattern tests to 
       normal operating conditions. 
       PCI Express Link Behavior:
       The Receiver Error Counter is incremented every time an 8b/10b receiver error 
       (i.e. decode error) is detected. 
       Receiver Error Counter is a direct measure of the physical layer stability and 
       is used in conjunction with CRC Counter and Recovery Counter to monitor L0 
       physical layer behavior. 
       When Receiver Error Counter wraps around the corresponding overflow bit (bit 15) 
       is set to '1'. 
       Cleared only by software or Cold Reset.
     */
    UINT32 rcverroverflow : 1;
    /* rcverroverflow - Bits[15:15], IND, default = 1'b0 
       If # of links supported is greater than 0 there is a Link Select dependence for 
       this field. 
       PCI Express Link Behavior:
       The Receiver Error Counter is incremented every time an 8b/10b receiver error 
       (i.e. decode error) is detected. 
       When Receiver Error Counter wraps around the corresponding overflow bit (bit 15) 
       is set to '1'. 
       Cleared only by software or Cold Reset.
     */
    UINT32 reccount : 15;
    /* reccount - Bits[30:16], IND, default = 15'b000000000000000 
       If # of links supported is greater than 0 there is a Link Select dependence for 
       this field. 
       ECC Dimm1/Recovery Counter is used to help measure bit errors while in L0. It is 
       useful to correlate the well controlled stress of Loopback.Pattern tests to 
       normal operating conditions. 
       PCI Express Link Behavior:
       The Recovery Counter is used to validate successful transitions from L0s to L0 
       as measured by the Recovery counter not being incremented. 
       Recovery is also entered when multiple errors occur on a Link and the protocol 
       layer attempts to Recover stability. 
       The Recovery Counter is incremented every time a Link enters the Recovery LTSSM 
       state. 
       When Recovery Counter wraps around the corresponding overflow bit (bit 31) is 
       set to '1'. 
       Cleared only by software or Cold Reset.
     */
    UINT32 recoverflow : 1;
    /* recoverflow - Bits[31:31], IND, default = 1'b0 
       If # of links supported is greater than 0 there is a Link Select dependence for 
       this field. 
       PCI Express Link Behavior:
       When Recovery Counter wraps around the Recovery Overflow bit (bit 31) is set to 
       '1'. 
       Cleared only by software or Cold Reset.
     */
  } Bits;
  UINT32 Data;
} REUTERRRCV_IIO_DFX_STRUCT;


/* REUTPHCPR_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138128)                                                  */
/*       SKX (0x40138128)                                                     */
/* Register default value:              0x00400003                            */
#define REUTPHCPR_IIO_DFX_REG 0x12004128
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is dependent on the value of the link selection CSR: 
 * [Index=reutengltrcon.linkselect]. 
 */
typedef union {
  struct {
    UINT32 phyver : 4;
    /* phyver - Bits[3:0], RO, default = 4'b0011 
       Built to the (please add version number) version of PCI Express Specification. 
       The rest are reserved. 
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 rsvd_4 : 18;
    /* rsvd_4 - Bits[21:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 scramen : 1;
    /* scramen - Bits[22:22], RO, default = 1'b1 
       If # of links supported is greater than 0 there can be a Link Select dependence 
       for this field. 
       PCI Express Link Behavior
       If set, implementation capable of data scrambling/descrambling with LFSR
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 rsvd_23 : 9;
    /* rsvd_23 - Bits[31:23], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPHCPR_IIO_DFX_STRUCT;


/* REUTENGLTRON_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x4013812C)                                                  */
/*       SKX (0x4013812C)                                                     */
/* Register default value:              0x00400020                            */
#define REUTENGLTRON_IIO_DFX_REG 0x1200412C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x12c [Index=reutengltrcon.linkselect]
 */
typedef union {
  struct {
    UINT32 phyreset : 1;
    /* phyreset - Bits[0:0], IND, default = 1'b0 
       Used to Reset the Physical Layer, and is Link Type dependent in it usage and 
       definition. 
       PCI Express Behavior:
       If # of links supported is greater than 0 then
            Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Transmit or 
       Receive on Multiple Links? 
            If Can Transmit or Receive on Multiple Links? = 0 then Link Select must be 
       used to only write to the selected Link. 
            If Can Transmit or Receive on Multiple Links? = 1 then every Link selected 
       in Link Control will receive the written value. 
       Physical Layer Reset is RWD type for PCI Express and must be both set and 
       cleared by software. 
       Setting Physical Layer Reset to 1 continuously initiates a transition to 
       Detect.Quiet and selected Links must not perform any Detect functions until 
       Physical Layer Reset is cleared and then the LTSSM may proceed with Detect.Quiet 
       as specified in the PCI Express Specification. 
       Setting and clearing must be done by software.
       Notes:
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
       
     */
    UINT32 rsvd_1 : 4;
    /* rsvd_1 - Bits[4:1], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 phyinit : 1;
    /* phyinit - Bits[5:5], IND, default = 1'b1 
       If # of links supported is greater than 0 then
            Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Transmit or 
       Receive on Multiple Links? 
            If Can Transmit or Receive on Multiple Links? = 0 then Link Select must be 
       used to only write to the selected Link. 
            If Can Transmit or Receive on Multiple Links? = 1 then every Link selected 
       in Link Control will receive the written value. 
       PCI Express Behavior:
            Writing a 0 to PhyinitBegin stops the LTSSM from entering Detect.Quiet 
       state after any transition to Detect is initiated. 
            The RX impedance must meet ZRX-HIGH-IMP-DC so as to not allow the endpoint 
       to enter compliance. 
            PhyInitBegin can be used to synchronize an HVM tester and DUT, and also 
       freeze any LTSSM at the beginning of initialization to help LTSSM debug. 
       0: Stall initialization on default initialization
       1: Begin initialization if stalled on default initialization
       Notes:
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
       
     */
    UINT32 rsvd_6 : 2;
    /* rsvd_6 - Bits[7:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 initmode : 3;
    /* initmode - Bits[10:8], IND, default = 3'b000 
       If # of links supported is greater than 0 then
            Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Transmit or 
       Receive on Multiple Links? 
            If Can Transmit or Receive on Multiple Links? = 0 then Link Select must be 
       used to only write to the selected Link. 
            If Can Transmit or Receive on Multiple Links? = 1 then every Link selected 
       in Link Control will receive the written value. 
       Initialization Mode determines how a selected Link Physical Layer will 
       initialize. 
       Note: Initialization Mode is a key field that will need to be tied into the 
       implementation of Link initialization and so great care should be taken in 
       making sure these fields are working as designed. 
       PCI Express Link Behavior :
       A change in the Initialization Mode only takes effect after Physical Layer Reset 
       is asserted. 
       000: Normal Initialization. This is the normal protocol mode for the Link.
       Transmitted TS Bit Encodings - Loopback = 0 and Compliance Receive = 0
       001: Initialization towards Loopback state. This is requires some amount of Link 
       functionality to initialize. Details in respective architecture sections. 
       Transmitted TS Bit Encodings - Loopback = 1 and Compliance Receive = 0
       010: Tester Mode - Bypass all Detect states and directly enter Polling.Active. 
       Used with Phy Init Begin to sync up test equipment and DUTs. 
       Transmitted TS Bit Encodings - Loopback = 1 and Compliance Receive = 0
       011: Initialization towards Loopback.Compliance Master. This is requires Gen1 
       Speed Link functionality to initialize. 
       Transmitted TS Bit Encodings - Loopback = 1 and Compliance Receive = 1
       100: Forced Entry to Compliance Master. This is requires limited or no Link 
       functionality to initialize. 
       The transition to Compliance Master immediately follows the clearing of Physical 
       Layer Reset. 
       Transmitted TS Bit Encodings - Loopback = don't care and Compliance Receive = 
       don't care since it never occurs. 
       101: Forced Entry to Compliance Slave. This is requires limited or no Link 
       functionality to initialize. 
       The transition to Compliance Slave immediately follows the clearing of Physical 
       Layer Reset. 
       Transmitted TS Bit Encodings - Loopback = don't care and Compliance Receive = 
       don't care since it never occurs. 
       110: Initialization towards Compliance Receive (modified pattern 2 in PCI 
       Express 2). This is requires limited Link functionality. 
       Transmitted TS Bit Encodings - Loopback = 0 and Compliance Receive = 1
       111: Reserved.
       Notes:
            See respective Link architecture chapter for more details.
            This bit field is dependent on the value selected in the link selection 
       CSR: XPREUT_ENG_LTRCON.LinkSelect 
       
     */
    UINT32 rsvd_11 : 1;
    /* rsvd_11 - Bits[11:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 initabortfrz : 1;
    /* initabortfrz - Bits[12:12], IND, default = 1'b0 
       If # of links supported is greater than 0 then
            Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Transmit or 
       Receive on Multiple Links? 
            If Can Transmit or Receive on Multiple Links? = 0 then Link Select must be 
       used to only write to the selected Link. 
            If Can Transmit or Receive on Multiple Links? = 1 then every Link selected 
       in Link Control will receive the written value. 
       PCI Express Behavior:
       0: Follow PCI Specification
       1: Freeze the LTSSM state Machine at any point a timeout causes an exit to 
       Detect. This will be used with the RX and TX state tracker to help debug LTSSM 
       problems. 
       Notes:
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
       
     */
    UINT32 disautocompl : 1;
    /* disautocompl - Bits[13:13], IND, default = 1'b0 
       If # of links supported is greater than 0 then
            Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Transmit or 
       Receive on Multiple Links? 
            If Can Transmit or Receive on Multiple Links? = 0 then Link Select must be 
       used to only write to the selected Link. 
            If Can Transmit or Receive on Multiple Links? = 1 then every Link selected 
       in Link Control will receive the written value. 
       PCI Express Behavior:
       0: Path from Polling to Compliance because of squelch is allowed.
       1: Path from Polling to Compliance because of squelch is disabled.
       Notes:
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
       
     */
    UINT32 rsvd_14 : 8;
    /* rsvd_14 - Bits[21:14], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 enablescram : 1;
    /* enablescram - Bits[22:22], IND, default = 1'b1 
       If # of links supported is greater than 0 then
            Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Transmit or 
       Receive on Multiple Links? 
            If Can Transmit or Receive on Multiple Links? = 0 then Link Select must be 
       used to only write to the selected Link. 
            If Can Transmit or Receive on Multiple Links? = 1 then every Link selected 
       in Link Control will receive the written value. 
       PCI Express Behavior:
       0: Disable L0 data scrambling. The transmitted disable scrambling bit in TS1 
       must be set to equal 1. 
       1: Scramble data in L0. The transmitted disable scrambling bit in TS1 must be 
       set to equal 0. 
       Notes:
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
       
     */
    UINT32 rsvd_23 : 6;
    /* rsvd_23 - Bits[28:23], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 lanesel : 2;
    /* lanesel - Bits[30:29], RWS_L, default = 2'b00 
       Notes:
            Locked by REUTENGLCK
       
     */
    UINT32 bypassdet : 1;
    /* bypassdet - Bits[31:31], IND, default = 1'b0 
       If # of links supported is greater than 0 then
            Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Transmit or 
       Receive on Multiple Links? 
            If Can Transmit or Receive on Multiple Links? = 0 then Link Select must be 
       used to only write to the selected Link. 
            If Can Transmit or Receive on Multiple Links? = 1 then every Link selected 
       in Link Control will receive the written value. 
       Notes:
            Bypass Detect will assume that all active Lanes that aren't disabled by TX 
       Data Lane Disable Detect a termination and immediately move into Polling.Active 
       anytime a transition to Detect is made. 
            Bypass Detect can be utilized with Phy Init Begin to sync a DUT with an HVM 
       tester to enter Polling.Active at approximately the same time. 
            Link will stay in detect as long the spec states and then move to 
       Polling.Active. This is used to bypass the receive detect state for debug 
       issues. 
            This bit field is dependent on the value selected in the link selection 
       CSR: XPREUT_ENG_LTRCON.LinkSelect 
       
     */
  } Bits;
  UINT32 Data;
} REUTENGLTRON_IIO_DFX_STRUCT;


/* REUTPHTDC_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138130)                                                  */
/*       SKX (0x40138130)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPHTDC_IIO_DFX_REG 0x12004130
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x130
 */
typedef union {
  struct {
    UINT32 txdatalanedis : 16;
    /* txdatalanedis - Bits[15:0], RWS_L, default = 16'b0000000000000000 
       A bit mask used for selectively enabling/disabling data TX Lanes.
       A bit value of 1 indicates the corresponding lane is disabled.
       Each bit represents a unique Lane independent of pre or post Link Configuration. 
       The number of bits in this field vary, depending on the number of lanes in this 
       link. The valid number of lanes will be 4, 8, or 16. For links with less than 16 
       lanes, the remaining bits will be reserved. 
       Bit 0: Controls Lane 0.
       Bit 1: Controls Lane 1.
       .. and so on.
       Notes:
       This register is not Link Select dependent.
       Used for debug and validation purposes.
       Locked by REUTENGLCK
     */
    UINT32 rsvd : 15;
    /* rsvd - Bits[30:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 csr_tdc_dont_maskrxdet4tdc : 1;
    /* csr_tdc_dont_maskrxdet4tdc - Bits[31:31], RWS_L, default = 1'b0 
       For TDC control, ignore tx detection. IVT 3247662.
       Used for debug and validation purposes.
       Locked by REUTENGLCK
     */
  } Bits;
  UINT32 Data;
} REUTPHTDC_IIO_DFX_STRUCT;


/* REUTPHTDS_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138134)                                                  */
/*       SKX (0x40138134)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPHTDS_IIO_DFX_REG 0x12004134
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is dependent on the value of the link selection CSR: 
 * [Index=reutengltrcon.linkselect]. 
 */
typedef union {
  struct {
    UINT32 txlanedetstat : 16;
    /* txlanedetstat - Bits[15:0], RO_V, default = 16'b0000000000000000 
       If # of links supported is greater than 0 then the behavior of this register is 
       Link Select dependent. 
       PCI Express Behavior:
       A bit value of 0 indicates the TX lane did not Detect a receiver termination 
       upon exiting Detect. 
       Each bit represents a unique Lane independent of pre or post Link Configuration. 
       The number of bits in this field vary, depending on the number of lanes in this 
       link. The valid number of lanes will be 4, 8, or 16. For links with less than 16 
       lanes, the remaining bits will be reserved. 
       Bit 0: Status of lane 0.
       Bit 1: Status of lane 1.
       .. and so on.
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPHTDS_IIO_DFX_STRUCT;


/* REUTPHRDS_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138138)                                                  */
/*       SKX (0x40138138)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPHRDS_IIO_DFX_REG 0x12004138
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is dependent on the value of the link selection CSR: 
 * [Index=reutengltrcon.linkselect]. 
 */
typedef union {
  struct {
    UINT32 rxdataready : 16;
    /* rxdataready - Bits[15:0], RO_V, default = 16'b0000000000000000 
       If # of links supported is greater than 0 then the behavior of this register is 
       Link Select dependent. 
       PCI Express Behavior
       Indication of what Lanes have trained into L0.
       A bit value of 0 indicates Rx lane has not trained to L0.
       Each bit represents a unique Lane independent of pre or post Link Configuration. 
       The number of bits in this field vary, depending on the number of lanes in this 
       link. The valid number of lanes will be 4, 8, or 16. For links with less than 16 
       lanes, the remaining bits will be reserved. 
       Bit 0: Status of Lane 0
       Bit 1: Status of Lane 1.
       .. and so on.
       0: indicates it is not trained.
       1: indicates that it is trained.
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPHRDS_IIO_DFX_STRUCT;


/* REUTPHRDC_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x4013813C)                                                  */
/*       SKX (0x4013813C)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPHRDC_IIO_DFX_REG 0x1200413C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x13c
 */
typedef union {
  struct {
    UINT32 rxdatalanedis : 16;
    /* rxdatalanedis - Bits[15:0], RWS_L, default = 16'b0000000000000000 
       1
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPHRDC_IIO_DFX_STRUCT;


/* REUTPHPIS_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138140)                                                  */
/*       SKX (0x40138140)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPHPIS_IIO_DFX_REG 0x12004140
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is dependent on the value of the link selection CSR: 
 * [Index=reutengltrcon.linkselect].REUT_PH_XP Tracking State Table 
 */
typedef union {
  struct {
    UINT32 linkup : 1;
    /* linkup - Bits[0:0], RO_V, default = 1'b0 
       If # of links supported is greater than 0 then the behavior of this register is 
       Link Select dependent. 
       PCI Express Behavior:
       Set to 0 as dictated by the PCI Base Specification when entering Detect, L1, 
       Loopback, or Hot Reset. 
       Set to 1 when entering L0.
     */
    UINT32 rsvd_1 : 7;
    /* rsvd_1 - Bits[7:1], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 ltssmstate : 5;
    /* ltssmstate - Bits[12:8], RO_V, default = 5'b00000 
       If # of links supported is greater than 0 then the behavior of this register is 
       Link Select dependent. 
       PCI Express Link Behavior:
       Indicates the current state of the remaining Lanes in the TX LTSSM and has no 
       Lane dependency. 
       Note: Since we do not have separate Rx and Tx LTSSMs, the Tx tracker indicates 
       the state of the LTSSM and the Rx tracker will have lane specific debug 
       information regarding the LTSSM. 
       Rx tracker: lane specific receive state information
       Tx tracker: LTSSM state information of the link.
       State tracker encoding is given in Table 14-62.
     */
    UINT32 rsvd_13 : 3;
    /* rsvd_13 - Bits[15:13], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 rxtracker : 4;
    /* rxtracker - Bits[19:16], RO_V, default = 4'b0000 
       If # of links supported is greater than 0 then the behavior of this register is 
       Link Select dependent. 
       PCI Express Behavior:
       Displays the current Lane status.
       The displayed Lane status is dependent on the value RX Error Lane Select field
       The decoding for the various Lane Status states is the following:
       0000: lane didn't do rcv detect or discarded during training.
       0001: lane did rcv detect
       0010: lane did rcv detect and exit EI seen
       0011: COM decoded
       0100: rcvd TS1
       0101: rcvd multiple TSs
       0110: rcvd 2 TS with link num
       0111: reserved
       1001: RCVD TS with lane num set
       1010: lane configured (entered cfg idle)
       1011: rcvd polarity inverted TS1
       1100: RCV_TS_2NPAD
       1101: deconfigure lane in cfg complete send EIOS
       1110: deconfigure lane in cfg complete
       1111: SEND EIOS on lane
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 rsvd_20 : 8;
    /* rsvd_20 - Bits[27:20], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 testbusy : 1;
    /* testbusy - Bits[28:28], RO_V, default = 1'b0 
       If # of links supported is greater than 0 then the behavior of this register is 
       Link Select dependent. 
       PCI Express Behavior
       This bit indicates a test in progress, or failure to obtain Loopback.Marker 
       training sequences while in Loopback.Marker state 
       Set in Loopack.Pattern, or when first entering Loopback.Marker from Config or 
       Recovery States 
       Cleared either in Loopback.Marker when receiving a Loopback.Marker training 
       sequence, or by entering Detect. 
       TestBusy is polled while in Loopback. When it is equal to 0 the user should know 
       that any previous Loopback test has completed, and that a new test is ready to 
       be initiated using Start Test. 
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 globerr : 1;
    /* globerr - Bits[29:29], RO_V, default = 1'b0 
       Useful only when the # of links supported is greater than 0 otherwise Global 
       Error is always set to 0. 
       There is no Link Select dependency for this field
       PCI Express Link Behavior:
       Global Error is set upon any error detected on any Link during Loopback.Pattern.
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 globtestbusy : 1;
    /* globtestbusy - Bits[30:30], RO_V, default = 1'b0 
       Useful only when If number of links supported (NumLinks) is greater than 0, 
       otherwise GlobTestBusy is always set to 0. 
       GlobTestBusy represents the OR'ing of all the separate Link specific Test Busy 
       bits 
       Allows for polling of one bit to determine whether any Link has not successfully 
       re-entered Loopback.Marker from Loopback.Pattern. 
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 globteststart : 1;
    /* globteststart - Bits[31:31], RO_V, default = 1'b0 
       Global Start Test represents the or'ing of all the separate Link specific Start 
       Test bits 
       Allows for polling of one bit to determine whether any Link has not successfully 
       entered Loopback.Pattern from Loopback.Marker. 
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
  } Bits;
  UINT32 Data;
} REUTPHPIS_IIO_DFX_STRUCT;


/* REUTPHPRE_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138148)                                                  */
/*       SKX (0x40138148)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPHPRE_IIO_DFX_REG 0x12004148
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x148
 */
typedef union {
  struct {
    UINT32 precfgid : 32;
    /* precfgid - Bits[31:0], RO_V, default = 32'b00000000000000000000000000000000 
       If the total of all the Lanes in a REUT port exceeds 8 than this register will 
       have a dependency on Lane PHY Lane Select. 
       Depending on the value of Phy Lane Select this field will represent Lane x of 
       the selected byte group and will identify what the Pre-configuration Link ID is 
       thought to be for that Lane. 
       Example:
       The value must match the Link number that Lane x plans on using in initial 
       negotiation within Config.Linkwidth as defined in the PCI Express Base 
       Specification. 
       0000: Link 0
       0001: Link 1
       ...
       1110: Link 14
       1111: No Link ID - A value of 1111 means that Lane 0 is disabled.
       Note: The default is hardware specific but it is assigned to zero for 
       Critter/SpecTR tool compatibility. 
     */
  } Bits;
  UINT32 Data;
} REUTPHPRE_IIO_DFX_STRUCT;


/* REUTPHPOST_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x4013814C)                                                  */
/*       SKX (0x4013814C)                                                     */
/* Register default value:              0xFFFFFFFF                            */
#define REUTPHPOST_IIO_DFX_REG 0x1200414C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x14c
 */
typedef union {
  struct {
    UINT32 postfgid : 32;
    /* postfgid - Bits[31:0], RO_V, default = 32'b11111111111111111111111111111111 
       1
     */
  } Bits;
  UINT32 Data;
} REUTPHPOST_IIO_DFX_STRUCT;


/* REUTPATCGTR_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138168)                                                  */
/*       SKX (0x40138168)                                                     */
/* Register default value:              0x06000004                            */
#define REUTPATCGTR_IIO_DFX_REG 0x12004168
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is dependent on the value of the link selection CSR: 
 * [Index=reutengltrcon.linkselect]. 
 */
typedef union {
  struct {
    UINT32 starttest : 1;
    /* starttest - Bits[0:0], IND, default = 1'b0 
       Start testIf # of links supported is greater than 0 then
       Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Control 
       Multiple Links? 
       If Can Control Multiple Links? = 0 then Link Select must be used to only write 
       to the selected Link. 
       If Can Control Multiple Links? = 1 then every Link selected in Link Control will 
       receive the written value. 
       Start Test is used to initialize a transition to Loopback.Pattern.
       1: Initiates transition to Loopback.Pattern.from either Compliance or 
       Loopback.Marker 
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 stoponerr : 1;
    /* stoponerr - Bits[1:1], IND, default = 1'b0 
       Stop test On Error If # of links supported is greater than 0 then
       Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Control 
       Multiple Links? 
       If Can Control Multiple Links? = 0 then Link Select must be used to only write 
       to the selected Link. 
       If Can Control Multiple Links? = 1 then every Link selected in Link Control will 
       receive the written value. 
       Exit Loopback.Pattern upon Global Error being set.
       0: Do not Reset the test because of any Link errors during Loopback.Pattern.
       1: Stop test and latch current Loop in the Loopcount Status Register on the 
       assertion of Global Error. 
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 autoinven : 1;
    /* autoinven - Bits[2:2], RWS_L, default = 1'b1 
       Enable the auto inversionIf # of links supported is greater than 0 then
       Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Control 
       Multiple Links? 
       If Can Control Multiple Links? = 0 then Link Select must be used to only write 
       to the selected Link. 
       If Can Control Multiple Links? = 1 then every Link selected in Link Control will 
       receive the written value. 
       Enable Auto Inversion
       0: The lanes enabled in Pattern Inversion Selection Register (REUT-PAT-PIS) 
       remain statically inverted during a Loopback.Pattern test. 
       1: The Lanes enabled in the Pattern Inversion Selection Register (REUT-PAT-PIS) 
       will automatically left rotate shift after exactly one length of the pattern 
       buffer occurs. 
       For Example:
       The least significant bit becomes the least significant bit + 1, and the most 
       significant bit becomes the least significant bit. 
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 lfdrpat1 : 1;
    /* lfdrpat1 - Bits[3:3], RWS_L, default = 1'b0 
       Enable Pseudo-random pattern generation for PatBuf1If # of links supported is 
       greater than 0 then 
       Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Control 
       Multiple Links? 
       If Can Control Multiple Links? = 0 then Link Select must be used to only write 
       to the selected Link. 
       If Can Control Multiple Links? = 1 then every Link selected in Link Control will 
       receive the written value. 
       Enable Pseudo random pattern generation by using Pattern Generator Buffer 1 
       XOR'd with LFSR1. 
       0: Don't Scramble Pattern Buffer 1
       1: Globally Scramble Pattern Buffer 1 for all Lanes.
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 lfdrpat2 : 1;
    /* lfdrpat2 - Bits[4:4], RWS_L, default = 1'b0 
       Enable pseudo-random pattern generation for PatBuf2If # of links supported is 
       greater than 0 then 
       Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Control 
       Multiple Links? 
       If Can Control Multiple Links? = 0 then Link Select must be used to only write 
       to the selected Link. 
       If Can Control Multiple Links? = 1 then every Link selected in Link Control will 
       receive the written value. 
       Enable Pseudo random pattern generation by using Pattern Generator Buffer 2 
       XOR'd with LFSR2. 
       0: Don't Scramble Pattern Buffer 2
       1: Globally Scramble Pattern Buffer 2 for all Lanes.
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd_5 : 4;
    /* rsvd_5 - Bits[8:5], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 patbuffdsel : 2;
    /* patbuffdsel - Bits[10:9], RWS_L, default = 2'b00 
       Used to select which pattern buffer is visible for RW access through 
       'REUT-PAT-BA: Pattern Generator or Buffer Access 'Buffer Access Register'. 
       PCI Express Behavior:
       00: Access 120 bit pattern buffer 1.
       01: Access 120 bit pattern buffer 2.
       10: Access 24 bit LFSR Pattern Scrambling seeds.
       If Pattern Buffer Word Selection = 0 then the LFSR seed for Pat Buff 1
       If Pattern Buffer Word Selection = 1 then the LFSR seed for Pat Buff 2
       11: Reserved
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd_11 : 1;
    /* rsvd_11 - Bits[11:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 patbuffwsel : 2;
    /* patbuffwsel - Bits[13:12], RWS_L, default = 2'b00 
       This bit field indexes which 32-bit slice of the pattern buffer will be read or 
       written to using register in Section 14.11.6.3, 'XPREUT_PAT_BA: Pattern Buffer 
       Access Register'. 
       00: Access [31:0] in selected pattern buffer (1 or 2)
       01: Access [63:32] in selected pattern buffer (1 or 2)
       10: Access [95:64] in selected pattern buffer (1 or 2)
       11: Access [127:96] in selected pattern buffer (1 or 2)
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd_14 : 5;
    /* rsvd_14 - Bits[18:14], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 drive0or1 : 1;
    /* drive0or1 - Bits[19:19], RWS_L, default = 1'b0 
       If # of links supported is greater than 0 then
       Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Control 
       Multiple Links? 
       If Can Control Multiple Links? = 0 then Link Select must be used to only write 
       to the selected Link. 
       If Can Control Multiple Links? = 1 then every Link selected in Link Control will 
       receive the written value. 
       Indicates whether any Lanes with a value of 1 in TX DC Data Lane Control will 
       result in driving either a logic 1 or logic zero depending on the state of Drive 
       Zero Instead of One. 
       0: Drive a logic 1 for all Lanes selected in TX DC Data Lane Control
       1: Drive a logic 0 for all Lanes selected in TX DC Data Lane Control
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 stoptest : 1;
    /* stoptest - Bits[20:20], IND, default = 1'b0 
       If # of links supported is greater than 0 then
       Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Control 
       Multiple Links? 
       If Can Control Multiple Links? = 0 then Link Select must be used to only write 
       to the selected Link. 
       If Can Control Multiple Links? = 1 then every Link selected in Link Control will 
       receive the written value. 
       Forces an immediate exit from Loopcount.Pattern.
       Stop Test can only be cleared by writing a '0' to this register
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 errcntstall : 1;
    /* errcntstall - Bits[21:21], IND, default = 1'b0 
       If # of links supported is greater than 0 then
       Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Control 
       Multiple Links? 
       If Can Control Multiple Links? = 0 then Link Select must be used to only write 
       to the selected Link. 
       If Can Control Multiple Links? = 1 then every Link selected in Link Control will 
       receive the written value. 
       While this bit is set one must stall any accumulation of Lane errors 
       (REUT-PAT-RES and REUT-PAT-REC) in Loopback.Pattern. 
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 lfsrpolysel : 1;
    /* lfsrpolysel - Bits[22:22], IND, default = 1'b0 
       1
     */
    UINT32 rsvd_23 : 1;
    /* rsvd_23 - Bits[23:23], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 exploopcount : 5;
    /* exploopcount - Bits[28:24], RWS_L, default = 5'b00110 
       If # of links supported is greater than 0 then
       Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Control 
       Multiple Links? 
       If Can Control Multiple Links? = 0 then Link Select must be used to only write 
       to the selected Link. 
       If Can Control Multiple Links? = 1 then every Link selected in Link Control will 
       receive the written value. 
       Loop count is 2^(count in this field) * the length of the pattern buffer.
       Each increment in loop counter indicates the reception of one period Pattern 
       Buffer Register content. 
       The length of the pattern buffer varies from implementation between Link Type.
       CSI = 128 bit pattern buffer.
       DDR = 64 bit pattern buffer
       PCI-Express = 120 bit pattern buffer
       00000: Infinite count. Use Stop Test or Physical Layer Reset to exit.
       00001: 2^1 = 2 * 1 pattern buffer
       ---
       00110: 2^6 = 64 * 1 pattern buffer (Default)
       ---
       11111: 2^31 = 2,147,483,648 * 1 pattern buffer
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd_29 : 3;
    /* rsvd_29 - Bits[31:29], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPATCGTR_IIO_DFX_STRUCT;


/* REUTPATCCTR_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x4013816C)                                                  */
/*       SKX (0x4013816C)                                                     */
/* Register default value:              0x04000F02                            */
#define REUTPATCCTR_IIO_DFX_REG 0x1200416C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is dependent on the value of the link selection CSR: 
 * [Index=reutengltrcon.linkselect]. 
 */
typedef union {
  struct {
    UINT32 initchkmask : 4;
    /* initchkmask - Bits[3:0], RWS_L, default = 4'b0010 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd_4 : 1;
    /* rsvd_4 - Bits[4:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 selchkintl : 3;
    /* selchkintl - Bits[7:5], RWS_L, default = 3'b000 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 selchkstart : 8;
    /* selchkstart - Bits[15:8], RWS_L, default = 8'b00001111 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rxerrcntsel : 4;
    /* rxerrcntsel - Bits[19:16], RWS_L, default = 4'b0000 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd_20 : 3;
    /* rsvd_20 - Bits[22:20], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 autoinrxdis : 1;
    /* autoinrxdis - Bits[23:23], IND, default = 1'b0 
       If # of links supported is greater than 0 then
       Link Select must always be used to display the current read value for this 
       field. 
       There is a write dependency for this field based on the value of Can Control 
       Multiple Links? 
       If Can Control Multiple Links? = 0 then Link Select must be used to only write 
       to the selected Link. 
       If Can Control Multiple Links? = 1 then every Link selected in Link Control will 
       receive the written value. 
       1: Disable Auto Inversion shift on Rx side only.
       Used to inject errors on Rx side.
       Use Selective Error masking to control how many errors you inject.
       Used with Stop on Error, you can determine stop skid value to subtract from Stop 
       on Error loop results. 
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
    UINT32 eighttenbmode1 : 1;
    /* eighttenbmode1 - Bits[24:24], RWS_L, default = 1'b0 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 eighttenbmode2 : 1;
    /* eighttenbmode2 - Bits[25:25], RWS_L, default = 1'b0 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 usepcieselmask : 1;
    /* usepcieselmask - Bits[26:26], RO, default = 1'b1  */
    UINT32 rsvd_27 : 5;
    /* rsvd_27 - Bits[31:27], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPATCCTR_IIO_DFX_STRUCT;


/* REUTPATBA_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138170)                                                  */
/*       SKX (0x40138170)                                                     */
/* Register default value:              0x4DAE1577                            */
#define REUTPATBA_IIO_DFX_REG 0x12004170
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x170 
 * [Index=reutpatcgtr.patbuffdsel:reutpatcgtr.patbuffwsel] 
 */
typedef union {
  struct {
    UINT32 patbufgen : 32;
    /* patbufgen - Bits[31:0], IND, default = 32'b01001101101011100001010101110111 
       Link Select has no effect on this register
       All words of Pattern generator buffers are accessed through this register.
       A particular pattern buffer is indexed using Pattern Buffer Selection bits in 
       XPREUT_PAT_CGTR.PattBuffSel'. 
       Patterns larger than 32 bits are indexed using Pattern Buffer Word Selection 
       field in XPREUT_PAT_CGTR.PattBuffWordSel'. 
       PCI Express Link Behavior:
       Pattern Buffer Selection = 00 = Pattern Buffer 1
       Allows programming of the 120 bit Pattern Buffer 1.
       The mode indicated by 8b/10b mode Enable1 will dictate how the pattern buffer is 
       interpreted. 
       If 8b/10b mode Enable1 is set to 0 (8 bit mode) then the pattern buffer uses the 
       lower 0:7 bits of every 10 bit symbol along with the upper bit (bit 9 indicates 
       a K or D symbol) to encode the 10 bit symbol. 
       If 8b/10b mode Enable1 is set to 1 (10 bit mode) then the pattern buffer uses 
       all 10 bits of every symbol without any encoding. 
       Need to add a default pattern here that is a legal 8b/10b sequence when sent in 
       10 bit domain. 
       Default for Buffer 1, Word 0: 4DAE1577h
       Default for Buffer 1, Word 1: ACBCB211h
       Default for Buffer 1, Word 2: 100FF7FFh
       Default for Buffer 1, Word 3: ACE3C3E0h
       Pattern Buffer Selection = 01 = Pattern Buffer 2
       Allows programming of the 120 bit Pattern Buffer 2.
       If 8b/10b mode Enable2 is set to 0 (8 bit mode) then the pattern buffer uses the 
       lower 0:7 bits of every 10 bit symbol along with the upper bit (bit 9 indicates 
       a K or D symbol) to encode the 10 bit symbol. 
       If 8b/10b mode Enable2 is set to 1 (10 bit mode) then the pattern buffer uses 
       all 10 bits of every symbol without any encoding. 
       Default for Buffer 2, Word 0-3: 00000000h
       Pattern Buffer Selection = 10 = Pattern Buffer 3 (LFSR Seed)
       Allows programming of the LFSR 1 and LFSR 2 pattern scrambling seeds using bits 
       0:22 of both D0 and D1 respectively 
       If Pattern Buffer Word Selection = 0 then the LFSR seed for Pat Buff 1
       If Pattern Buffer Word Selection = 1 then the LFSR seed for Pat Buff 2
       The actual LFSR pattern is generated by the 23 bit LFSR using ITU-T polynomial 
       P(x) = x^23 + x^18 + 1. 
       LFSR seed2 (D1): 1111b = F hex
       LFSR seed1 (D0): 1b = 1 hex
       Default for Buffer 3, Word 0: 0000000Fh
       Default for Buffer 3, Word 1: 00000001h
     */
  } Bits;
  UINT32 Data;
} REUTPATBA_IIO_DFX_STRUCT;


/* REUTPATBS_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138174)                                                  */
/*       SKX (0x40138174)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPATBS_IIO_DFX_REG 0x12004174
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x174
 */
typedef union {
  struct {
    UINT32 patbuflanesel : 16;
    /* patbuflanesel - Bits[15:0], RWS_L, default = 16'b0000000000000000 
       Link Select has no effect on this register
       Used to select which Lanes will transmit either Pattern Buffer 1 or Pattern 
       Buffer 2 during Loopback.Pattern. 
       One bit per each lane
       0: Corresponding lane will use Pattern Buffer 1 during Loopback.Pattern.
       1: Corresponding lane will use Pattern Buffer 2 during Loopback.Pattern.
       Bit [0]: Used to select pattern for Lane 0.
       Bit [1]: Used to select pattern for Lane 0.
       ... etc.
       Notes:
       Each bit represents a unique Lane independent of pre or post Link Configuration. 
       The number of bits in this field vary, depending on the number of lanes in this 
       link. The valid number of lanes will be 4, 8, or 16. For links with less than 16 
       lanes, the remaining bits will be reserved. 
       Locked by REUTENGLCK
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPATBS_IIO_DFX_STRUCT;


/* REUTPATREC_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138178)                                                  */
/*       SKX (0x40138178)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPATREC_IIO_DFX_REG 0x12004178
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x178
 */
typedef union {
  struct {
    UINT32 rxerrchkdis : 16;
    /* rxerrchkdis - Bits[15:0], RWS_L, default = 16'b0000000000000000 
       RX Lane Error Check Disable
       When a Lane has RX Error Check Disable is set to a logical '1' the selected Lane 
       must disable error check and accumulation during Loopback.Pattern test. 
       One bit for each Rx lane,
       Bit 0: Rx Lane 0.
       Bit 1: Rx Lane 1.
       etc...
       Notes:
       Each bit represents a unique Lane independent of pre or post Link Configuration. 
       The number of bits in this field vary, depending on the number of lanes in this 
       link. The valid number of lanes will be 4, 8, or 16. For links with less than 16 
       lanes, the remaining bits will be reserved. 
       Link Select has no effect on this register
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPATREC_IIO_DFX_STRUCT;


/* REUTPATIS_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x4013817C)                                                  */
/*       SKX (0x4013817C)                                                     */
/* Register default value:              0x00000001                            */
#define REUTPATIS_IIO_DFX_REG 0x1200417C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x17c
 */
typedef union {
  struct {
    UINT32 patinvsel : 16;
    /* patinvsel - Bits[15:0], RWS_L, default = 16'b0000000000000001 
       One bit for each TX lane.
       Bit[0]: TX Lane 0
       Bit [1]: TX Lane 1
       etc.
       When Pattern Invert is set to a '1' - Invert the pattern in corresponding TX 
       lane. 
       If Pattern Invert bit mask is set for a particular Lane, then the following 
       algorithm will apply: 
       Step 1: The currently selected Lanes invert the polarity of the transmitted 
       pattern for only one period of the pattern buffer. 
       Step 2: If Auto Inversion Enabled is enabled The current selected Lanes are 
       shifted by one to the next highest Lane. A shift for the highest Lane number 
       will rotate back around to the lowest Lane number. 
       Repeat Step 1.
       Notes:
       Each bit represents a unique Lane independent of pre or post Link Configuration. 
       The number of bits in this field vary, depending on the number of lanes in this 
       link. The valid number of lanes will be 4, 8, or 16. For links with less than 16 
       lanes, the remaining bits will be reserved. 
       Link Select has no effect on this register
       Locked by REUTENGLCK
       
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPATIS_IIO_DFX_STRUCT;


/* REUTPATDCD_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138180)                                                  */
/*       SKX (0x40138180)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPATDCD_IIO_DFX_REG 0x12004180
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x180
 */
typedef union {
  struct {
    UINT32 txdcdatactrl : 16;
    /* txdcdatactrl - Bits[15:0], RWS_L, default = 16'b0000000000000000 
       Link Select has no effect on this register
       A bit mask used for selectively overriding the data TX to output a DC logical 
       '1' or '0' (depending on Drive DC Zero or DC One) condition during 
       Loopback.Pattern. 
       Used for debug and validation purposes to quiet neighboring crosstalk lines, and 
       is only applied during Loopback.Pattern. 
       A bit value of 1 indicates the corresponding lane is transmitting either a 
       logical 1 or logic 0 depending on Drive DC Zero or DC One. 
       Bit 0: Controls Lane 0.
       Bit 1: Controls Lane 1.
       ..and so on.
       PCI Express Link Behavior:
       Each bit represents a unique Lane independent of pre or post Link Configuration. 
       The number of bits in this field vary, depending on the number of lanes in this 
       link. The valid number of lanes will be 4, 8, or 16. For links with less than 16 
       lanes, the remaining bits will be reserved. 
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPATDCD_IIO_DFX_STRUCT;


/* REUTPATLEC_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138184)                                                  */
/*       SKX (0x40138184)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPATLEC_IIO_DFX_REG 0x12004184
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x184
 */
typedef union {
  struct {
    UINT32 laneerrcnt : 31;
    /* laneerrcnt - Bits[30:0], RW1CS, default = 31'b0000000000000000000000000000000 
       Lane Error Counter is used to measure the accumulation of multiple bit errors 
       occurring on a Lane selected by RX Error Counter Lane Select during 
       Loopback.Pattern. 
       RX Error Counter Lane Select interacts with Lane Error Counter in the following 
       ways. 
       PCI Express Link Behavior
       There is no Link Select dependency for this field.
       The Lane indicated by RX Error Counter Lane Select indicates which lane the 31 
       bits of Lane Error Counter must be used to count multiple bit errors during 
       Loopback.Pattern. 
       No other Lanes will accumulate errors besides the selected Lane and must return 
       a value of zero if selected by RX Error Counter Lane Select. 
       Upon saturating to all '1's the Error Overflow bit gets set and the Lane Error 
       Counter rolls over back through '0's and continues counting errors. 
       Lane Error Counter can only be cleared though software writing all 1's to this 
       register. 
     */
    UINT32 erroverflow : 1;
    /* erroverflow - Bits[31:31], RW1CS, default = 1'b0 
       If # of links supported is greater than 0 then there is a Link Select dependency 
       for this field. 
       If set, indicates that the error counter has overflow in selected lane.
       Cleared with writing 1 or Default Reset.
     */
  } Bits;
  UINT32 Data;
} REUTPATLEC_IIO_DFX_STRUCT;


/* REUTPATLCS_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138188)                                                  */
/*       SKX (0x40138188)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPATLCS_IIO_DFX_REG 0x12004188
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is dependent on the value of the link selection CSR: 
 * [Index=reutengltrcon.linkselect]. 
 */
typedef union {
  struct {
    UINT32 loopcountstatus : 32;
    /* loopcountstatus - Bits[31:0], RO_V, default = 32'b00000000000000000000000000000000 
       If # of links supported is greater than 0 then is a Link Select dependency for 
       this field. 
       The Loop Count Status register represents the current received loop count while 
       in Loopback.Pattern, which is useful in the following ways. 
       When Stop on Error is set to 1 and a specific LFSR is used to scramble either 
       Pattern Buffer 1 or 2, the Loop Count Status can recreate the failing pattern by 
       incrementing the initial LFSR seed which can be derived using Loop Count Status. 
       The Loop Count Status is continuously incremented by 1 on the reception of a 
       complete pattern buffer boundary while in Loopback.Pattern and rolls over to all 
       0's upon hitting the maximum value. 
       Loop Count Status is only reset by hardware to all 0's upon entry to 
       Loopcount.Pattern 
       This bit field is dependent on the value selected in the link selection CSR: 
       XPREUT_ENG_LTRCON.LinkSelect 
     */
  } Bits;
  UINT32 Data;
} REUTPATLCS_IIO_DFX_STRUCT;


/* REUTPATRES_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x4013818C)                                                  */
/*       SKX (0x4013818C)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPATRES_IIO_DFX_REG 0x1200418C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x18c
 */
typedef union {
  struct {
    UINT32 rxlaneerrstat : 16;
    /* rxlaneerrstat - Bits[15:0], RW1CS, default = 16'b0000000000000000 
       Rx Lane Error StatusRX Lane Error Status indicates a particular Lane encountered 
       an error during Loopback.Pattern. 
       A value of 1 indicates the particular Lane has received an error during 
       Loopback.Pattern. 
       Notes:
       There is no Link Select dependency for this field.
       Each bit represents a unique Lane independent of pre or post Link Configuration. 
       The number of bits in this field vary, depending on the number of lanes in this 
       link. The valid number of lanes will be 4, 8, or 16. For links with less than 16 
       lanes, the remaining bits will be reserved. 
       Note: RX Error Status can only be cleared by writing all 1s and never by 
       hardware. 
       
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPATRES_IIO_DFX_STRUCT;


/* REUTPMR0_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138190)                                                  */
/*       SKX (0x40138190)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPMR0_IIO_DFX_REG 0x12004190
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is dependent on the value of the link selection CSR: 
 * [Index=reutengltrcon.linkselect]. 
 */
typedef union {
  struct {
    UINT32 rsvd : 16;
    /* rsvd - Bits[15:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 gen1ftssentovd : 8;
    /* gen1ftssentovd - Bits[23:16], IND, default = 8'b00000000 
       Represents the number of Gen1 FTS sequences that the local agent must send when 
       waking up the remote agent during L0s. 
     */
    UINT32 nfts_remote : 8;
    /* nfts_remote - Bits[31:24], RO_V, default = 8'b00000000 
       1
     */
  } Bits;
  UINT32 Data;
} REUTPMR0_IIO_DFX_STRUCT;


/* REUTPMR2_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138194)                                                  */
/*       SKX (0x40138194)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPMR2_IIO_DFX_REG 0x12004194
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is dependent on the value of the link selection CSR: 
 * [Index=reutengltrcon.linkselect]. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 8;
    /* rsvd_0 - Bits[7:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 gen3ftssentovd : 8;
    /* gen3ftssentovd - Bits[15:8], IND, default = 8'b00000000 
       1
     */
    UINT32 gen2ftssentovd : 8;
    /* gen2ftssentovd - Bits[23:16], IND, default = 8'b00000000 
       1
     */
    UINT32 rsvd_24 : 8;
    /* rsvd_24 - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPMR2_IIO_DFX_STRUCT;


/* REUTPMR3_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138198)                                                  */
/*       SKX (0x40138198)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPMR3_IIO_DFX_REG 0x12004198
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x198
 */
typedef union {
  struct {
    UINT32 l0srxcnt : 4;
    /* l0srxcnt - Bits[3:0], RO_V, default = 4'b0000  */
    UINT32 rsvd_4 : 1;
    /* rsvd_4 - Bits[4:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 l0xtxcnt : 4;
    /* l0xtxcnt - Bits[8:5], RO_V, default = 4'b0000  */
    UINT32 rsvd_9 : 23;
    /* rsvd_9 - Bits[31:9], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPMR3_IIO_DFX_STRUCT;


/* REUTEPOVR_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x4013819C)                                                  */
/*       SKX (0x4013819C)                                                     */
/* Register default value:              0x00040000                            */
#define REUTEPOVR_IIO_DFX_REG 0x1200419C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register is a window to other registers indexed by 
 * EParamSel.[Index=reutepsr.eparamsel:reutengltrcon.linkselect] 
 */
typedef union {
  struct {
    UINT32 eparamid : 8;
    /* eparamid - Bits[7:0], IND, default = 8'b00000000 
       The electrical parameter ID identifies the electrical parameter selected.
     */
    UINT32 rsvd_8 : 8;
    /* rsvd_8 - Bits[15:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 numeparams : 8;
    /* numeparams - Bits[23:16], RO, default = 8'b00000100 
       This lists the total number of Electrical Parameters that can be interfaced to 
       through REUT. The selection of a particular electrical parameter is set by 
       XPREUT_EP_SR.EParamSel. 
     */
    UINT32 rsvd_24 : 8;
    /* rsvd_24 - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTEPOVR_IIO_DFX_STRUCT;


/* REUTEPSR_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x401381A0)                                                  */
/*       SKX (0x401381A0)                                                     */
/* Register default value:              0x000000FF                            */
#define REUTEPSR_IIO_DFX_REG 0x120041A0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * Not a template CSR for indirection.This register is not indirectly addressed 
 * since there is only one register required for all REUT eparam registers. 
 */
typedef union {
  struct {
    UINT32 eparamlanesel : 8;
    /* eparamlanesel - Bits[7:0], RWS_L, default = 8'b11111111 
       Used for Electrical Parameter ID that has a Lane specific status and/or 
       override. 
       00h: Lane 0 for XP[7,3,1,0]
       01h: Lane 1 for XP[7,3,1,0]
       02h: Lane 2 for XP[7,3,1,0]
       03h: Lane 3 for XP[7,3,1,0]
       04h: Lane 4 for XP[7,3, 1]
       ---- 05h to 07h: Lanes 5 through 7 for XP[7,3, 1]
       ---- 08h to 0Eh: Lanes 5 through 14 for XP[7,3]
       0Fh: Lane 15 for XP[7,3]
       [FFh]: All lanes
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd_8 : 8;
    /* rsvd_8 - Bits[15:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 eparamsel : 8;
    /* eparamsel - Bits[23:16], RWS_L, default = 8'b00000000 
       Electrical parameter select [7:0]This selects the particular Electrical 
       Parameter to be interfaced to through REUT. 
       The Electrical Parameter ID (EParamID) is then used to inform the user the 
       particular details about the Electrical Parameter. 
       Note: Valid selection is 0h to 5h.
       0h: PI (Rx phase interpolator)
       1h: VOC (Rx voltage offset)
       2h: TDV (Tx Drive)
       3h: TRP (Tx Rcomp P-leg)
       4h: TRN (Tx Rcomp N-leg)
       5h: TEQ (Tx Equalization)
       Notes:
       Locked by REUTENGLCK
     */
    UINT32 rsvd_24 : 8;
    /* rsvd_24 - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTEPSR_IIO_DFX_STRUCT;


/* REUTEPSS_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x401381A4)                                                  */
/*       SKX (0x401381A4)                                                     */
/* Register default value:              0x00000000                            */
#define REUTEPSS_IIO_DFX_REG 0x120041A4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x1a4 
 * [Index=reutepsr.eparamsel:reutengltrcon.linkselect] 
 */
typedef union {
  struct {
    UINT32 currstepval : 8;
    /* currstepval - Bits[7:0], IND, default = 8'b00000000 
       If Read Current Step Value Capability is set to 1
       Then this field reflects the current calibrated step value that can range from 0 
       to TotNumSteps - 1. 
       If status independently varies from Lane to Lane then the particular Lane is 
       selected by Electrical Parameter Lane Select 
     */
    UINT32 rsvd_8 : 8;
    /* rsvd_8 - Bits[15:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 totnumsteps : 9;
    /* totnumsteps - Bits[24:16], IND, default = 9'b000000000 
       This field indicates the total number of configurable steps (starting at 0) for 
       the selected Electrical Parameter (EParamSel). 
       Example: 4 total steps would be represented a value of '100'
     */
    UINT32 rsvd_25 : 7;
    /* rsvd_25 - Bits[31:25], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTEPSS_IIO_DFX_STRUCT;


/* REUTEPCAP_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401381A8)                                                  */
/*       SKX (0x401381A8)                                                     */
/* Register default value:              0x00000000                            */
#define REUTEPCAP_IIO_DFX_REG 0x120041A8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x1a8 
 * [Index=reutepsr.eparamsel:reutengltrcon.linkselect] 
 */
typedef union {
  struct {
    UINT32 eparamstat : 16;
    /* eparamstat - Bits[15:0], IND, default = 16'b0000000000000000 
       Specific electrical parameter status bitsThe last 16 bits are intended to be 
       defined for a particular Electrical Parameter ID only if needed. 
       Bits [15:0]: Reserved
     */
    UINT32 simultovroffsetposs : 1;
    /* simultovroffsetposs - Bits[16:16], IND, default = 1'b0 
       Offset/override can be used simultaneouslyDetermines whether the override and 
       offset values can be used simultaneously or instead they can only be used on a 
       either or basis. 
       0: An Override or Offset can't be used simultaneously and must be selected by 
       Offset/Override Select 
       1: An Override or Offset can be used simultaneously and Offset/Override Select 
       has no effect. 
     */
    UINT32 offovrvalid : 1;
    /* offovrvalid - Bits[17:17], IND, default = 1'b0 
       Offset/override is validAfter writing an offset (Global or Loopback.Pattern) or 
       override this bit is used to indicate whether the new value is valid. 
       This bit is intended to allow an implementation specific amount of time for 
       offsets/overrides to settle into a valid state, and provides a key feedback 
       mechanism to the user to know when to interpret results with the newly written 
       offset or override. 
     */
    UINT32 eparamlinkselectdependent : 1;
    /* eparamlinkselectdependent - Bits[18:18], IND, default = 1'b0 
       Is the Electrical Parameter Link Select DependentThis field is dependent on 
       Electrical Parameter Select and is only valid when # of Links Supported is \&gt; 
       0. 
       Informs the user whether there is Link Select dependence to the particular 
       Electrical Parameter. 
     */
    UINT32 valcontinupdated : 1;
    /* valcontinupdated - Bits[19:19], IND, default = 1'b0 
       Current value is continuously updatedInforms the user whether the Current value 
       of this electrical parameter is continuously updated or only periodically 
       adjusted during appropriate states (i.e. Calibrate, Retraining) 
     */
    UINT32 rsvd : 1;
    /* rsvd - Bits[20:20], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 offsetformat : 1;
    /* offsetformat - Bits[21:21], IND, default = 1'b0 
       Offset formatInforms the user whether programmed offsets (Global or 
       Loopback.Pattern) are expected as 2's compliment or signed binary. 
       0: 2's compliment
       1: Signed Binary
     */
    UINT32 lovrgloboffset : 1;
    /* lovrgloboffset - Bits[22:22], IND, default = 1'b0 
       Lane Capability for OffsetThis field is dependent on Electrical Parameter 
       Select. 
       Lane Capability for Offset indicates whether the Global and Loopback offset can 
       be applied on a per Lane basis. 
       Electrical Parameters that do allow Offsets to be applied on a per Lane basis 
       require the usage of Electrical Parameter Lane Select. 
       0: Offset can be applied on a per Link basis.
       1: Link and Lane specific behavior. (See Global Offset and Loopback Offset 
       control for more details.) 
     */
    UINT32 loopbpattoffsetcap : 1;
    /* loopbpattoffsetcap - Bits[23:23], IND, default = 1'b0 
       Loopback.Pattern offset capabilityIndicates whether an Electrical Parameter can 
       accept an offset to the existing Current Step Value that will take effect only 
       during Loopback.Pattern 
       0: No Loopack.Pattern offset capability
       1: Loopback.Patern Offset capability
     */
    UINT32 looppatovrcap : 1;
    /* looppatovrcap - Bits[24:24], IND, default = 1'b0 
       1
     */
    UINT32 globoffsetlateaction : 1;
    /* globoffsetlateaction - Bits[25:25], IND, default = 1'b0 
       Global offset is late actionIndicates whether the selected Electrical parameter 
       that can accept a Global Offset to the existing Current Step Value that will 
       take effect immediately or after only after a physical layer rest (Late Action). 
       Global Offsets that can take effect immediately are allowed to have a finite 
       settling time to take effect, which is reflected in the Offset/Override Valid 
       bit. 
       0: Can take effect immediately.
       1: Late Action - Only after Physical Layer Reset is asserted.
     */
    UINT32 globoffsetcap : 1;
    /* globoffsetcap - Bits[26:26], IND, default = 1'b0 
       Global Offset CapabilityIndicates whether an Electrical Parameter can accept an 
       offset to the existing Current Step Value that will either take place 
       immediately or after a Physical Layer Reset based on the Global Offset is Late 
       Action Bit. 
       0: No global offset capability
       1: Global Offset capability
     */
    UINT32 ovrislateaction : 1;
    /* ovrislateaction - Bits[27:27], IND, default = 1'b0 
       : Override is late actionIf Override Current Step Value is set to 1
       Then this bit indicates whether the override value to the existing Current Step 
       Value will take effect immediately or after only after a physical layer rest 
       (Late Action). 
       An override that can take effect immediately is allowed to have a finite 
       settling time to take effect, which is reflected in the Offset/Override Valid 
       bit. 
       0: Can take effect immediately.
       1: Late Action - Only after Physical Layer Reset is asserted.
     */
    UINT32 llovrcurrstep : 1;
    /* llovrcurrstep - Bits[28:28], IND, default = 1'b0 
       Behavior of overriding current stepThis indicates whether overriding a current 
       step value is done for the entire Link or if overriding can be done 
       independently for each Lane. 
       Electrical Parameters that do allow one to override the current step value 
       independently on each Lane requires the usage of Electrical Parameter Lane 
       Select. 
       0: Link only behavior
       1: Lane specific behavior
     */
    UINT32 ovrcurrstepvalcap : 1;
    /* ovrcurrstepvalcap - Bits[29:29], IND, default = 1'b0 
       Override current step value capabilityIndicates whether an Electrical Parameter 
       can accept an override to the Current Step Value. 
       0: No override capability is available
       1: Current Step Value can be overridden.
     */
    UINT32 llreadcurrstep : 1;
    /* llreadcurrstep - Bits[30:30], IND, default = 1'b0 
       Link or Lane Behavior for Reading Current StepIf Read Current Step Value 
       Capability (RdCurrStepValCap)is set then 
       This bit indicates whether reading a current step value is done for the entire 
       Link or if each Lane may have an independent value. 
       Electrical Parameters that do have Lane specific behavior when reading out the 
       current step value will require the usage of Electrical Parameter Lane Select. 
       0: Link only behavior
       1: Lane specific behavior
     */
    UINT32 rdcurrstepvalcap : 1;
    /* rdcurrstepvalcap - Bits[31:31], IND, default = 1'b0 
       Read current step value capabilityIndicates whether a user can read out the 
       Current Step Value (CurrStepVal ) for the currently selected Electrical 
       Parameter ID. 
       0: No ability to read out Current Step Value (CurrStepVal )
       1: Ability to read out Current Step Value (CurrStepVal )
     */
  } Bits;
  UINT32 Data;
} REUTEPCAP_IIO_DFX_STRUCT;


/* REUTEPOVD_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401381AC)                                                  */
/*       SKX (0x401381AC)                                                     */
/* Register default value:              0x00000001                            */
#define REUTEPOVD_IIO_DFX_REG 0x120041AC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x1ac 
 * [Index=reutepsr.eparamsel:reutengltrcon.linkselect] 
 */
typedef union {
  struct {
    UINT32 offsetovrsel : 1;
    /* offsetovrsel - Bits[0:0], IND, default = 1'b1 
       If the selected Electrical Parameter can not implement an override and offset at 
       the same time (Is a Simultaneous Override and Offset possible set to 0) 
       Determines whether the selected Electrical Parameter is in offset or override 
       mode. 
       0: Offset Mode
       1: Override Mode
     */
    UINT32 rsvd_1 : 15;
    /* rsvd_1 - Bits[15:1], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 ovrtocurrval : 5;
    /* ovrtocurrval - Bits[20:16], IND, default = 5'b00000 
       If Override Capability is set
       And
       [Is a Simultaneous Override and Offset possible? is set to 1 or Offset/Override 
       Select is set to Override] 
       Then this field is used to override the Current Step Value.
       The format of this field is assumed to be binary and thus the minimum value is 0 
       and the maximum is Total # of Steps - 1. 
     */
    UINT32 ovrtocurrval1 : 2;
    /* ovrtocurrval1 - Bits[22:21], IND, default = 2'b00 
       If Override Capability is set
       And
       [Is a Simultaneous Override and Offset possible? is set to 1 or Offset/Override 
       Select is set to Override] 
       Then this field is used to override the Current Step Value.
       The format of this field is assumed to be binary and thus the minimum value is 0 
       and the maximum is Total # of Steps - 1. 
     */
    UINT32 rsvd_23 : 9;
    /* rsvd_23 - Bits[31:23], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTEPOVD_IIO_DFX_STRUCT;


/* REUTEPOFT_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401381B0)                                                  */
/*       SKX (0x401381B0)                                                     */
/* Register default value:              0x00000000                            */
#define REUTEPOFT_IIO_DFX_REG 0x120041B0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x1b0 
 * [Index=reutepsr.eparamsel:reutengltrcon.linkselect] 
 */
typedef union {
  struct {
    UINT32 loopbpatoffset : 8;
    /* loopbpatoffset - Bits[7:0], IND, default = 8'b00000000 
       Loopback.pattern offset [7:0]If Loopback.Pattern Offset Capability is set
       And
       [Is a Simultaneous Override and Offset possible? is set to 1 or Offset/Override 
       Select is set to Offset] 
       Then this field is added to the Current Step Value only during the 
       Loopback.Pattern. 
       The format of this field is defined by Offset Format.
       This field by the definition of it's usage model can't be implemented as Late 
       Action. 
     */
    UINT32 rsvd_8 : 8;
    /* rsvd_8 - Bits[15:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 globaloffset : 8;
    /* globaloffset - Bits[23:16], IND, default = 8'b00000000 
       Global offset [7:0]If Global Offset Capability is set
       And
       [Is a Simultaneous Override and Offset possible?] is set to 1 or Offset/Override 
       Select is set to Offset] 
       Then this field is added to the Current Step Value.
       The format of this field is defined by Offset Format.
     */
    UINT32 rsvd_24 : 8;
    /* rsvd_24 - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTEPOFT_IIO_DFX_STRUCT;


/* REUTMCTR_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x401381B4)                                                  */
/*       SKX (0x401381B4)                                                     */
/* Register default value:              0x00000000                            */
#define REUTMCTR_IIO_DFX_REG 0x120041B4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x1b4 
 * [Index=reutepsr.eparamsel:reutengltrcon.linkselect] 
 */
typedef union {
  struct {
    UINT32 reutmctr : 32;
    /* reutmctr - Bits[31:0], IND, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} REUTMCTR_IIO_DFX_STRUCT;


/* REUTPERLANEERR_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x201381B8)                                                  */
/*       SKX (0x201381B8)                                                     */
/* Register default value:              0x0000                                */
#define REUTPERLANEERR_IIO_DFX_REG 0x120021B8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x1b8
 */
typedef union {
  struct {
    UINT16 reutperlanecnt : 5;
    /* reutperlanecnt - Bits[4:0], RWS_L, default = 5'b00000 
       Notes:
       Locked by REUTENGLCK
     */
    UINT16 rsvd : 11;
    /* rsvd - Bits[15:5], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} REUTPERLANEERR_IIO_DFX_STRUCT;


/* REUTG3PLNSCREN_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x201381BA)                                                  */
/*       SKX (0x201381BA)                                                     */
/* Register default value:              0x0000                                */
#define REUTG3PLNSCREN_IIO_DFX_REG 0x120021BA
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x1ba
 */
typedef union {
  struct {
    UINT16 reutg3scren : 16;
    /* reutg3scren - Bits[15:0], RWS_L, default = 16'b0000000000000000 
       start_fld_desc:
       Notes:
       Locked by REUTENGLCK
     */
  } Bits;
  UINT16 Data;
} REUTG3PLNSCREN_IIO_DFX_STRUCT;


/* REUTPATTES_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x401381BC)                                                  */
/*       SKX (0x401381BC)                                                     */
/* Register default value:              0x00000000                            */
#define REUTPATTES_IIO_DFX_REG 0x120041BC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x1bc
 */
typedef union {
  struct {
    UINT32 tststart : 1;
    /* tststart - Bits[0:0], RO_V, default = 1'b0 
       Test started
     */
    UINT32 errchkstart : 1;
    /* errchkstart - Bits[1:1], RO_V, default = 1'b0 
       Error check start
     */
    UINT32 tstcomplete : 1;
    /* tstcomplete - Bits[2:2], RO_V, default = 1'b0 
       Test completed
     */
    UINT32 masterrelck : 1;
    /* masterrelck - Bits[3:3], RO_V, default = 1'b0 
       Master relock acheived
     */
    UINT32 anylaneerr : 1;
    /* anylaneerr - Bits[4:4], RO_V, default = 1'b0 
       Any lanes are have error
     */
    UINT32 alllaneerr : 1;
    /* alllaneerr - Bits[5:5], RO_V, default = 1'b0 
       All lanes are have error
     */
    UINT32 anylaneovflw : 1;
    /* anylaneovflw - Bits[6:6], RO_V, default = 1'b0 
       Any lanes are have error overflow
     */
    UINT32 alllaneovflw : 1;
    /* alllaneovflw - Bits[7:7], RO_V, default = 1'b0 
       All lanes are have error overflow
     */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} REUTPATTES_IIO_DFX_STRUCT;


/* GIOINBDC_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x10138200)                                                  */
/*       SKX (0x10138200)                                                     */
/* Register default value:              0x00                                  */
#define GIOINBDC_IIO_DFX_REG 0x12001200
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register selects which event signal and which header match is active for 
 * in-band debug event messages on this port. 
 */
typedef union {
  struct {
    UINT8 inbmask : 8;
    /* inbmask - Bits[7:0], RWS_L, default = 8'b00000000 
       If a bit field encoding is a logic 1 then that signal may cause an in-band debug 
       event when asserted. 
       0000_0000: Disable inband messages
       1xxx_xxxx: GE[5]
       x1xx_xxxx: GE[4]
       xx1x_xxxx: GE[3]
       xxx1_xxxx: GE[2]
       xxxx_1xxx: GE[1]
       xxxx_x1xx: GE[0]
       xxxx_xxx1: Enable inband message w/MRKEN = 1
       Notes:
       Locked by RSPLCK
     */
  } Bits;
  UINT8 Data;
} GIOINBDC_IIO_DFX_STRUCT;


/* GIOCDTTHROTTLE_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138204)                                                  */
/*       SKX (0x40138204)                                                     */
/* Register default value:              0x00000000                            */
#define GIOCDTTHROTTLE_IIO_DFX_REG 0x12004204
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register controls the PCIe throttling behavior through the control of 
 * available credits. 
 */
typedef union {
  struct {
    UINT32 nprh : 6;
    /* nprh - Bits[5:0], RWS_L, default = 6'b000000 
       Non Posted Request Header Throttling.Transaction layer will withhold the release 
       of credits to downstream devices until the credit available (in switch FIFO) 
       builds up to the value programmed here. 
       Notes:
       Locked by RSPLCK
     */
    UINT32 nprd : 8;
    /* nprd - Bits[13:6], RWS_L, default = 8'b00000000 
       Non Posted Request Data Throttling.Transaction layer will withhold the release 
       of credits to downstream devices until the credit available (in switch FIFO) 
       builds up to the value programmed here. 
       Notes:
       Locked by RSPLCK
     */
    UINT32 prh : 6;
    /* prh - Bits[19:14], RWS_L, default = 6'b000000 
       Posted Request Header Throttling.Transaction layer will withhold the release of 
       credits to downstream devices until the credit available (in switch FIFO) builds 
       up to the value programmed here. 
       Notes:
       Locked by RSPLCK
     */
    UINT32 prd : 8;
    /* prd - Bits[27:20], RWS_L, default = 8'b00000000 
       Posted Request Data Throttling.Transaction layer will withhold the release of 
       credits to downstream devices until the credit available (in switch FIFO) builds 
       up to the value programmed here. 
       Notes:
       Locked by RSPLCK
     */
    UINT32 throttle_resp_dis : 1;
    /* throttle_resp_dis - Bits[28:28], RWS_L, default = 1'b0 
       Notes:
       Locked by RSPLCK
     */
    UINT32 rsvd : 3;
    /* rsvd - Bits[31:29], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} GIOCDTTHROTTLE_IIO_DFX_STRUCT;


/* GIOTHR_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x10138208)                                                  */
/*       SKX (0x10138208)                                                     */
/* Register default value:              0xCA                                  */
#define GIOTHR_IIO_DFX_REG 0x12001208
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register controls PCIe throttling through the use of the DFx Response Logic 
 * Function. 
 */
typedef union {
  struct {
    UINT8 start_sel : 4;
    /* start_sel - Bits[3:0], RWS_L, default = 4'b1010 
       Selects the event/function to be used as the drl_start_req in the Response Logic 
       Function described in Section 2.3. 
       Notes:
       Locked by RSPLCK
     */
    UINT8 stop_sel : 4;
    /* stop_sel - Bits[7:4], RWS_L, default = 4'b1100 
       Selects the event/function to be used as the drl_stop_req in the Response Logic 
       Function described in Section 2.3. 
       Notes:
       Locked by RSPLCK
     */
  } Bits;
  UINT8 Data;
} GIOTHR_IIO_DFX_STRUCT;


/* PXPTGTTHROTTLE_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x10138210)                                                  */
/*       SKX (0x10138210)                                                     */
/* Register default value:              0x00                                  */
#define PXPTGTTHROTTLE_IIO_DFX_REG 0x12001210
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x210
 */
typedef union {
  struct {
    UINT8 override_val : 4;
    /* override_val - Bits[3:0], RW, default = 4'b0000  */
    UINT8 override_en : 1;
    /* override_en - Bits[4:4], RW, default = 1'b0  */
    UINT8 rsvd : 3;
    /* rsvd - Bits[7:5], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT8 Data;
} PXPTGTTHROTTLE_IIO_DFX_STRUCT;


/* DIOEINJ_IIO_DFX_REG supported on:                                          */
/*       SKX_A0 (0x40138214)                                                  */
/*       SKX (0x40138214)                                                     */
/* Register default value:              0x00000000                            */
#define DIOEINJ_IIO_DFX_REG 0x12004214
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x214
 */
typedef union {
  struct {
    UINT32 parerr : 6;
    /* parerr - Bits[5:0], RW_L, default = 6'b000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_6 : 1;
    /* rsvd_6 - Bits[6:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 pmeacsmsk : 1;
    /* pmeacsmsk - Bits[7:7], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 atomicaddrmsk : 1;
    /* atomicaddrmsk - Bits[8:8], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_9 : 23;
    /* rsvd_9 - Bits[31:9], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DIOEINJ_IIO_DFX_STRUCT;


/* DESKEWPSMICAPTURE_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138234)                                                  */
/*       SKX (0x40138234)                                                     */
/* Register default value:              0x00000000                            */
#define DESKEWPSMICAPTURE_IIO_DFX_REG 0x12004234
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x234
 */
typedef union {
  struct {
    UINT32 dskwctl_psmi_capture : 8;
    /* dskwctl_psmi_capture - Bits[7:0], RW_LV, default = 8'b00000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 dskwctl_psmi_1strxskp : 8;
    /* dskwctl_psmi_1strxskp - Bits[15:8], RW_LV, default = 8'b00000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DESKEWPSMICAPTURE_IIO_DFX_STRUCT;


/* OBEINJCTL_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138240)                                                  */
/*       SKX (0x40138240)                                                     */
/* Register default value:              0x00000000                            */
#define OBEINJCTL_IIO_DFX_REG 0x12004240
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains the error injection mask register to determine which bits 
 * get corrupted for error detection testing. 
 */
typedef union {
  struct {
    UINT32 aeilceninj : 1;
    /* aeilceninj - Bits[0:0], RWS_L, default = 1'b0 
       0: Disable error injection
       1: Enable error injection
       Notes:
       Locked by SPARELCK
     */
    UINT32 aeilcinj1 : 1;
    /* aeilcinj1 - Bits[1:1], RWS_L, default = 1'b0 
       0: Select EINJ0 response function
       1: Select EINJ1 response function
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd_2 : 1;
    /* rsvd_2 - Bits[2:2], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 etrans_en : 1;
    /* etrans_en - Bits[3:3], RWS_L, default = 1'b0 
       0: do not inject this type of error
       1: inject an error based on the bit fields ETRANS and EBITPOS. This assumes that 
       EINJEN=1 and EINJFUNCTSEL is pointing to the EINJ of interest. 
       Notes:
       Locked by SPARELCK
     */
    UINT32 ebitpos : 10;
    /* ebitpos - Bits[13:4], RWS_L, default = 10'b0000000000 
       Bit field can contain more than one bit for multi-bit error injection.
       Notes:
       Locked by SPARELCK
     */
    UINT32 etrans : 6;
    /* etrans - Bits[19:14], RWS_L, default = 6'b000000 
       This field indicates which symbol contains the corrupted bit. A maximum depth of 
       64 is where the corruption could occur. 
       Notes:
       Locked by SPARELCK
     */
    UINT32 crcerrinj : 1;
    /* crcerrinj - Bits[20:20], RWS_L, default = 1'b0 
       CRC error injectionSelects which type of injection will be performed when 
       EINJ0,1 is asserted. 
       0: Data bit corruption. Based ETRANS and EBITPOS values.
       1: CRC bit corruption. Based on values in PEX[6:0]EINJMSK.
       Notes:
       Locked by SPARELCK
     */
    UINT32 stpinj : 1;
    /* stpinj - Bits[21:21], RWS_L, default = 1'b0 
       0: Do not inject error on STP
       1: Inject error on STP when EINJEN is set.
       Notes:
       Locked by SPARELCK
     */
    UINT32 endinj : 1;
    /* endinj - Bits[22:22], RWS_L, default = 1'b0 
       0: Do not inject error on END
       1: Inject error on END when EINJEN is set
       Notes:
       Locked by SPARELCK
     */
    UINT32 sdpinj : 1;
    /* sdpinj - Bits[23:23], RWS_L, default = 1'b0 
       0: Do not inject error on SDP
       1: Inject error on SDP when EINJEN is set
       Notes:
       Locked by SPARELCK
     */
    UINT32 othrinj : 1;
    /* othrinj - Bits[24:24], RWS_L, default = 1'b0 
       0: Do not inject error on type Others
       1: Inject error on type Others when EINJEN is set
       Notes:
       Locked by SPARELCK
     */
    UINT32 err_lane : 4;
    /* err_lane - Bits[28:25], RWS_L, default = 4'b0000 
       Select one of the 16 lanes to inject error on
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd_29 : 1;
    /* rsvd_29 - Bits[29:29], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 ecrcerrinj : 1;
    /* ecrcerrinj - Bits[30:30], RWS_L, default = 1'b0 
       ECRC error injectionSelects which type of injection will be performed when 
       EINJ0,1 is asserted. 
       0: No ECRC error injection
       1: ECRC bit corruption. Based on values in PEX[6:0]EINJMSK.
       ECRC and CRC uses same mask values
       Notes:
       Locked by SPARELCK
     */
    UINT32 disretryerr : 1;
    /* disretryerr - Bits[31:31], RWS_L, default = 1'b0 
       
       Notes:
       Locked by SPARELCK
     */
  } Bits;
  UINT32 Data;
} OBEINJCTL_IIO_DFX_STRUCT;


/* PXPEINJMSK_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138244)                                                  */
/*       SKX (0x40138244)                                                     */
/* Register default value:              0x00000000                            */
#define PXPEINJMSK_IIO_DFX_REG 0x12004244
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains the error injection mask register to determine which bits 
 * get corrupted for error detection testing. 
 */
typedef union {
  struct {
    UINT32 crcmsk : 32;
    /* crcmsk - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000 
       CRC Mask.A logic '1' in any location inverts the CRC for an outbound 
       transaction. 
       Notes:
       Locked by SPARELCK
     */
  } Bits;
  UINT32 Data;
} PXPEINJMSK_IIO_DFX_STRUCT;


/* SPARE_IIO_DFX_REG supported on:                                            */
/*       SKX_A0 (0x40138248)                                                  */
/*       SKX (0x40138248)                                                     */
/* Register default value:              0x003FF200                            */
#define SPARE_IIO_DFX_REG 0x12004248
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x248
 */
typedef union {
  struct {
    UINT32 force_data_perr_once : 1;
    /* force_data_perr_once - Bits[0:0], RWS_LV, default = 1'b0  */
    UINT32 pmnak_idlecycle : 5;
    /* pmnak_idlecycle - Bits[5:1], RWS_L, default = 5'b00000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 enable_gc2wakeupl1 : 1;
    /* enable_gc2wakeupl1 - Bits[6:6], RWS_L, default = 1'b0 
       Notes:
       Locked by SPARELCK
     */
    UINT32 enable_gc2controll1 : 1;
    /* enable_gc2controll1 - Bits[7:7], RWS_L, default = 1'b0 
       Notes:
       Locked by SPARELCK
     */
    UINT32 cgtt_sparebits : 4;
    /* cgtt_sparebits - Bits[11:8], RWS_L, default = 4'b0010 
       [1] csr_disable_ok2startnxttlp, [3] dis_stored_words_clock_gating, [2] 
       dis_acs_mem_check_error_logging 
     */
    UINT32 txn_port_spare1 : 10;
    /* txn_port_spare1 - Bits[21:12], RWS_L, default = 10'b1111111111  */
    UINT32 txn_port_spare0 : 10;
    /* txn_port_spare0 - Bits[31:22], RWS_L, default = 10'b0000000000  */
  } Bits;
  UINT32 Data;
} SPARE_IIO_DFX_STRUCT;


/* XPPRIVC_IIO_DFX_REG supported on:                                          */
/*       SKX_A0 (0x40138268)                                                  */
/*       SKX (0x40138268)                                                     */
/* Register default value:              0x00000000                            */
#define XPPRIVC_IIO_DFX_REG 0x12004268
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains bits for the design team for defeature bits in the PCIe 
 * transaction layer. The architectural visible defeatures are placed here as well. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 4;
    /* rsvd_0 - Bits[3:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 notused0 : 4;
    /* notused0 - Bits[7:4], RWS, default = 4'b0000  */
    UINT32 rsvd_8 : 1;
    /* rsvd_8 - Bits[8:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 notused1 : 7;
    /* notused1 - Bits[15:9], RWS, default = 7'b0000000  */
    UINT32 rsvd_16 : 16;
    /* rsvd_16 - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPPRIVC_IIO_DFX_STRUCT;


/* XPPRIVC1_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x4013826C)                                                  */
/*       SKX (0x4013826C)                                                     */
/* Register default value:              0x00000355                            */
#define XPPRIVC1_IIO_DFX_REG 0x1200426C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x26c
 */
typedef union {
  struct {
    UINT32 bwmsirevalen : 1;
    /* bwmsirevalen - Bits[0:0], RWS, default = 1'b1  */
    UINT32 bwmsiclapsen : 1;
    /* bwmsiclapsen - Bits[1:1], RWS, default = 1'b0  */
    UINT32 pmmsirevalen : 1;
    /* pmmsirevalen - Bits[2:2], RWS, default = 1'b1  */
    UINT32 pmmsiclapsen : 1;
    /* pmmsiclapsen - Bits[3:3], RWS, default = 1'b0  */
    UINT32 hpmsirevalen : 1;
    /* hpmsirevalen - Bits[4:4], RWS, default = 1'b1  */
    UINT32 hpmsiclapsen : 1;
    /* hpmsiclapsen - Bits[5:5], RWS, default = 1'b0 
       1
     */
    UINT32 aermsirevalen : 1;
    /* aermsirevalen - Bits[6:6], RWS, default = 1'b1  */
    UINT32 aermsiclapsen : 1;
    /* aermsiclapsen - Bits[7:7], RWS, default = 1'b0  */
    UINT32 mmcapen : 1;
    /* mmcapen - Bits[8:8], RWS, default = 1'b1  */
    UINT32 lermsirevalen : 1;
    /* lermsirevalen - Bits[9:9], RWS, default = 1'b1  */
    UINT32 lermsiclapsen : 1;
    /* lermsiclapsen - Bits[10:10], RWS, default = 1'b0  */
    UINT32 rsvd : 21;
    /* rsvd - Bits[31:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPPRIVC1_IIO_DFX_STRUCT;


/* DIOHMATH0_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401382D0)                                                  */
/*       SKX (0x401382D0)                                                     */
/* Register default value:              0x00000000                            */
#define DIOHMATH0_IIO_DFX_REG 0x120042D0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains the Least Significant Dword (LSD) of a 128-bit match 
 * register that is used to compare inbound transactions finding a unique match. 
 * This register is used with the mask register to produced ranges of searches for 
 * particular types of transactions. The output of the match logic is connected to 
 * XPCTO0. 
 */
typedef union {
  struct {
    UINT32 hmat0 : 8;
    /* hmat0 - Bits[7:0], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat1 : 8;
    /* hmat1 - Bits[15:8], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat2 : 8;
    /* hmat2 - Bits[23:16], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat3 : 8;
    /* hmat3 - Bits[31:24], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIOHMATH0_IIO_DFX_STRUCT;


/* DIOHMATH1_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401382D4)                                                  */
/*       SKX (0x401382D4)                                                     */
/* Register default value:              0x00000000                            */
#define DIOHMATH1_IIO_DFX_REG 0x120042D4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains the Least Significant Dword (LSD) +1 of a 128-bit match 
 * register that is used to compare transactions finding a unique match. This 
 * register is used with the mask register to produced ranges of searches for 
 * particular types of transactions. 
 */
typedef union {
  struct {
    UINT32 hmat0 : 8;
    /* hmat0 - Bits[7:0], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat1 : 8;
    /* hmat1 - Bits[15:8], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat2 : 8;
    /* hmat2 - Bits[23:16], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat3 : 8;
    /* hmat3 - Bits[31:24], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIOHMATH1_IIO_DFX_STRUCT;


/* DIOHMATH2_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401382D8)                                                  */
/*       SKX (0x401382D8)                                                     */
/* Register default value:              0x00000000                            */
#define DIOHMATH2_IIO_DFX_REG 0x120042D8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains the Most Significant Dword (MSD) - 1 of a 128-bit match 
 * register that is used to compare transactions finding a unique match. This 
 * register is used with the mask register to produced ranges of searches for 
 * particular types of transactions. 
 */
typedef union {
  struct {
    UINT32 hmat0 : 8;
    /* hmat0 - Bits[7:0], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat1 : 8;
    /* hmat1 - Bits[15:8], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat2 : 8;
    /* hmat2 - Bits[23:16], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat3 : 8;
    /* hmat3 - Bits[31:24], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIOHMATH2_IIO_DFX_STRUCT;


/* DIOHMATH3_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401382DC)                                                  */
/*       SKX (0x401382DC)                                                     */
/* Register default value:              0x00000000                            */
#define DIOHMATH3_IIO_DFX_REG 0x120042DC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains the Most Significant Dword (MSD) of a 128-bit match 
 * register that is used to compare transactions finding a unique match. This 
 * register is used with the mask register to produced ranges of searches for 
 * particular types of transactions. 
 */
typedef union {
  struct {
    UINT32 hmat0 : 8;
    /* hmat0 - Bits[7:0], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat1 : 8;
    /* hmat1 - Bits[15:8], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat2 : 8;
    /* hmat2 - Bits[23:16], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat3 : 8;
    /* hmat3 - Bits[31:24], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIOHMATH3_IIO_DFX_STRUCT;


/* DIOHMASK0_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401382E0)                                                  */
/*       SKX (0x401382E0)                                                     */
/* Register default value:              0x00000000                            */
#define DIOHMASK0_IIO_DFX_REG 0x120042E0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * The header bits to be used in matching are selected by the mask bits in this 
 * register. A zero in a mask bit position causes the corresponding bit in the 
 * header to be ignored. A one in a mask bit position indicates that the 
 * corresponding bit in the header must match the value of the same bit in the 
 * Match register for that bit to be considered to have matched. Pattern match out 
 * is asserted only if all enabled bit match (AND matching). If all mask bits are 
 * 0, MatchOut is 0. 
 */
typedef union {
  struct {
    UINT32 hmat0 : 8;
    /* hmat0 - Bits[7:0], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat1 : 8;
    /* hmat1 - Bits[15:8], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat2 : 8;
    /* hmat2 - Bits[23:16], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat3 : 8;
    /* hmat3 - Bits[31:24], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIOHMASK0_IIO_DFX_STRUCT;


/* DIOHMASK1_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401382E4)                                                  */
/*       SKX (0x401382E4)                                                     */
/* Register default value:              0x00000000                            */
#define DIOHMASK1_IIO_DFX_REG 0x120042E4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains the mask bits to determine which fields of bits the match 
 * register is effective. 
 */
typedef union {
  struct {
    UINT32 hmat0 : 8;
    /* hmat0 - Bits[7:0], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat1 : 8;
    /* hmat1 - Bits[15:8], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat2 : 8;
    /* hmat2 - Bits[23:16], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat3 : 8;
    /* hmat3 - Bits[31:24], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIOHMASK1_IIO_DFX_STRUCT;


/* DIOHMASK2_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401382E8)                                                  */
/*       SKX (0x401382E8)                                                     */
/* Register default value:              0x00000000                            */
#define DIOHMASK2_IIO_DFX_REG 0x120042E8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains the mask bits to determine which fields of bits the match 
 * register is effective. 
 */
typedef union {
  struct {
    UINT32 hmat0 : 8;
    /* hmat0 - Bits[7:0], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat1 : 8;
    /* hmat1 - Bits[15:8], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat2 : 8;
    /* hmat2 - Bits[23:16], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat3 : 8;
    /* hmat3 - Bits[31:24], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIOHMASK2_IIO_DFX_STRUCT;


/* DIOHMASK3_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401382EC)                                                  */
/*       SKX (0x401382EC)                                                     */
/* Register default value:              0x00000000                            */
#define DIOHMASK3_IIO_DFX_REG 0x120042EC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains the mask bits to determine which fields of bits the match 
 * register is effective. 
 */
typedef union {
  struct {
    UINT32 hmat0 : 8;
    /* hmat0 - Bits[7:0], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat1 : 8;
    /* hmat1 - Bits[15:8], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat2 : 8;
    /* hmat2 - Bits[23:16], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hmat3 : 8;
    /* hmat3 - Bits[31:24], RWS_L, default = 8'b00000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIOHMASK3_IIO_DFX_STRUCT;


/* PXPCTRL_IIO_DFX_REG supported on:                                          */
/*       SKX_A0 (0x401382F0)                                                  */
/*       SKX (0x401382F0)                                                     */
/* Register default value:              0x03607400                            */
#define PXPCTRL_IIO_DFX_REG 0x120042F0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x2f0
 */
typedef union {
  struct {
    UINT32 devhide : 1;
    /* devhide - Bits[0:0], RW, default = 1'b0  */
    UINT32 dis_apic_eoi : 1;
    /* dis_apic_eoi - Bits[1:1], RW, default = 1'b0  */
    UINT32 dis_vpp : 1;
    /* dis_vpp - Bits[2:2], RW, default = 1'b0  */
    UINT32 vpp : 4;
    /* vpp - Bits[6:3], RW, default = 4'b0000  */
    UINT32 dis_inb_cfg : 1;
    /* dis_inb_cfg - Bits[7:7], RW_O, default = 1'b0  */
    UINT32 msihpen : 1;
    /* msihpen - Bits[8:8], RW, default = 1'b0  */
    UINT32 msipmen : 1;
    /* msipmen - Bits[9:9], RW, default = 1'b0  */
    UINT32 coalesce_en : 1;
    /* coalesce_en - Bits[10:10], RW, default = 1'b1  */
    UINT32 cf : 1;
    /* cf - Bits[11:11], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 tg256b_en : 1;
    /* tg256b_en - Bits[12:12], RW, default = 1'b1  */
    UINT32 interleave_en : 1;
    /* interleave_en - Bits[13:13], RW, default = 1'b1  */
    UINT32 stream_interleave_check_en : 1;
    /* stream_interleave_check_en - Bits[14:14], RW, default = 1'b1  */
    UINT32 dzlmr : 1;
    /* dzlmr - Bits[15:15], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dzlir : 1;
    /* dzlir - Bits[16:16], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dzlcr : 1;
    /* dzlcr - Bits[17:17], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dzlmw : 1;
    /* dzlmw - Bits[18:18], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dzliw : 1;
    /* dzliw - Bits[19:19], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dzlcw : 1;
    /* dzlcw - Bits[20:20], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 maltlp_en : 1;
    /* maltlp_en - Bits[21:21], RW_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 timeout_enable : 1;
    /* timeout_enable - Bits[22:22], RW, default = 1'b1  */
    UINT32 timeout_enable_cfg : 1;
    /* timeout_enable_cfg - Bits[23:23], RW, default = 1'b0  */
    UINT32 coalesce_mode : 2;
    /* coalesce_mode - Bits[25:24], RW, default = 2'b11  */
    UINT32 read_interlock : 1;
    /* read_interlock - Bits[26:26], RW, default = 1'b0  */
    UINT32 dis_toggle_pop_pri : 1;
    /* dis_toggle_pop_pri - Bits[27:27], RW, default = 1'b0  */
    UINT32 gpo : 1;
    /* gpo - Bits[28:28], RW, default = 1'b0  */
    UINT32 msifaten : 1;
    /* msifaten - Bits[29:29], RW, default = 1'b0  */
    UINT32 msinfaten : 1;
    /* msinfaten - Bits[30:30], RW, default = 1'b0  */
    UINT32 msicoren : 1;
    /* msicoren - Bits[31:31], RW, default = 1'b0  */
  } Bits;
  UINT32 Data;
} PXPCTRL_IIO_DFX_STRUCT;


/* PXPCTRL3_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x401382F4)                                                  */
/*       SKX (0x401382F4)                                                     */
/* Register default value:              0x00000046                            */
#define PXPCTRL3_IIO_DFX_REG 0x120042F4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x2f4
 */
typedef union {
  struct {
    UINT32 abort_c_if_non_d0 : 1;
    /* abort_c_if_non_d0 - Bits[0:0], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 abort_np_if_non_d0 : 1;
    /* abort_np_if_non_d0 - Bits[1:1], RW_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 abort_p_if_non_d0 : 1;
    /* abort_p_if_non_d0 - Bits[2:2], RW_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_abort_in_d1 : 1;
    /* en_abort_in_d1 - Bits[3:3], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_abort_in_d2 : 1;
    /* en_abort_in_d2 - Bits[4:4], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_abort_in_d3 : 1;
    /* en_abort_in_d3 - Bits[5:5], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_maltlp_4k_cross_rule : 1;
    /* en_maltlp_4k_cross_rule - Bits[6:6], RW_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 25;
    /* rsvd - Bits[31:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPCTRL3_IIO_DFX_STRUCT;


/* PORT_CTL_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138300)                                                  */
/*       SKX (0x40138300)                                                     */
/* Register default value:              0x81300000                            */
#define PORT_CTL_IIO_DFX_REG 0x12004300
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x300
 */
typedef union {
  struct {
    UINT32 tx_rxdetect_en : 1;
    /* tx_rxdetect_en - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 tx_rxdetect_en_override_enable : 1;
    /* tx_rxdetect_en_override_enable - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 rsvd_2 : 2;
    /* rsvd_2 - Bits[3:2], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 nearend_lpbk_en : 1;
    /* nearend_lpbk_en - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 rsvd_5 : 7;
    /* rsvd_5 - Bits[11:5], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 rx_invert_phasedet_slope : 1;
    /* rx_invert_phasedet_slope - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 rsvd_13 : 3;
    /* rsvd_13 - Bits[15:13], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 rx_sum_bias_sel : 1;
    /* rx_sum_bias_sel - Bits[16:16], RWS_L, default = 1'b0  */
    UINT32 rsvd_17 : 3;
    /* rsvd_17 - Bits[19:17], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 rx_dfesum_mfc_10gen : 2;
    /* rx_dfesum_mfc_10gen - Bits[21:20], RWS_L, default = 2'b11  */
    UINT32 rsvd_22 : 2;
    /* rsvd_22 - Bits[23:22], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 rx_dfelsb_sel : 2;
    /* rx_dfelsb_sel - Bits[25:24], RWS_L, default = 2'd1  */
    UINT32 rsvd_26 : 2;
    /* rsvd_26 - Bits[27:26], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 rx_dfe_c1_ctl_notgen2 : 2;
    /* rx_dfe_c1_ctl_notgen2 - Bits[29:28], RWS_L, default = 2'b00  */
    UINT32 rx_dfe_c1_ctl_gen2 : 2;
    /* rx_dfe_c1_ctl_gen2 - Bits[31:30], RWS_L, default = 2'b10  */
  } Bits;
  UINT32 Data;
} PORT_CTL_IIO_DFX_STRUCT;


/* SPCFGONLY_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138320)                                                  */
/*       SKX (0x40138320)                                                     */
/* Register default value:              0x00000000                            */
#define SPCFGONLY_IIO_DFX_REG 0x12004320
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 06_0_0x320
 */
typedef union {
  struct {
    UINT32 spempty : 28;
    /* spempty - Bits[27:0], RO, default = 28'b0000000000000000000000000000  */
    UINT32 rsvd : 4;
    /* rsvd - Bits[31:28], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} SPCFGONLY_IIO_DFX_STRUCT;


/* DIO_OB_HMATCH0_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138330)                                                  */
/*       SKX (0x40138330)                                                     */
/* Register default value:              0x00000000                            */
#define DIO_OB_HMATCH0_IIO_DFX_REG 0x12004330
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains Dword 0 [31:0] of the 128b match register for outbound 
 * headers. 
 */
typedef union {
  struct {
    UINT32 hmatch : 32;
    /* hmatch - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIO_OB_HMATCH0_IIO_DFX_STRUCT;


/* DIO_OB_HMATCH1_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138334)                                                  */
/*       SKX (0x40138334)                                                     */
/* Register default value:              0x00000000                            */
#define DIO_OB_HMATCH1_IIO_DFX_REG 0x12004334
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains Dword 1 [63:32] of the 128b match register for outbound 
 * headers. 
 */
typedef union {
  struct {
    UINT32 hmatch : 32;
    /* hmatch - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIO_OB_HMATCH1_IIO_DFX_STRUCT;


/* DIO_OB_HMATCH2_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138338)                                                  */
/*       SKX (0x40138338)                                                     */
/* Register default value:              0x00000000                            */
#define DIO_OB_HMATCH2_IIO_DFX_REG 0x12004338
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains Dword 2 [95:64] of the 128b match register for outbound 
 * headers. 
 */
typedef union {
  struct {
    UINT32 hmatch : 32;
    /* hmatch - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIO_OB_HMATCH2_IIO_DFX_STRUCT;


/* DIO_OB_HMATCH3_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x4013833C)                                                  */
/*       SKX (0x4013833C)                                                     */
/* Register default value:              0x00000000                            */
#define DIO_OB_HMATCH3_IIO_DFX_REG 0x1200433C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains Dword 3 [127:96] of the 128b match register for outbound 
 * headers. 
 */
typedef union {
  struct {
    UINT32 hmatch : 32;
    /* hmatch - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIO_OB_HMATCH3_IIO_DFX_STRUCT;


/* DIO_OB_HMASK0_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138340)                                                  */
/*       SKX (0x40138340)                                                     */
/* Register default value:              0x00000000                            */
#define DIO_OB_HMASK0_IIO_DFX_REG 0x12004340
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains Dword 0 [31:0] of the 128b mask register for outbound 
 * headers. 
 */
typedef union {
  struct {
    UINT32 hmask : 32;
    /* hmask - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIO_OB_HMASK0_IIO_DFX_STRUCT;


/* DIO_OB_HMASK1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138344)                                                  */
/*       SKX (0x40138344)                                                     */
/* Register default value:              0x00000000                            */
#define DIO_OB_HMASK1_IIO_DFX_REG 0x12004344
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains Dword 1 [63:32] of the 128b mask register for outbound 
 * headers. 
 */
typedef union {
  struct {
    UINT32 hmask : 32;
    /* hmask - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIO_OB_HMASK1_IIO_DFX_STRUCT;


/* DIO_OB_HMASK2_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138348)                                                  */
/*       SKX (0x40138348)                                                     */
/* Register default value:              0x00000000                            */
#define DIO_OB_HMASK2_IIO_DFX_REG 0x12004348
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains Dword 2 [95:64] of the 128b mask register for outbound 
 * headers. 
 */
typedef union {
  struct {
    UINT32 hmask : 32;
    /* hmask - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIO_OB_HMASK2_IIO_DFX_STRUCT;


/* DIO_OB_HMASK3_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x4013834C)                                                  */
/*       SKX (0x4013834C)                                                     */
/* Register default value:              0x00000000                            */
#define DIO_OB_HMASK3_IIO_DFX_REG 0x1200434C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains Dword 3 [127:96] of the 128b mask register for outbound 
 * headers. 
 */
typedef union {
  struct {
    UINT32 hmask : 32;
    /* hmask - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} DIO_OB_HMASK3_IIO_DFX_STRUCT;


/* PCIEBURST_ERR_CNTR_IIO_DFX_REG supported on:                               */
/*       SKX_A0 (0x40138350)                                                  */
/*       SKX (0x40138350)                                                     */
/* Register default value:              0x00000000                            */
#define PCIEBURST_ERR_CNTR_IIO_DFX_REG 0x12004350
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x334
 */
typedef union {
  struct {
    UINT32 error_burst_mode : 2;
    /* error_burst_mode - Bits[1:0], RW, default = 2'b00 
       Error Burst Mode is used define the mode of Burst. For BDX below is the set of 
       Burst mode supported 
       00 -- Reserved
       01 -- Burst Mode 2
       10 -- Burst Mode 3
       11 -- Burst Mode 4
     */
    UINT32 error_burst_mode_en : 1;
    /* error_burst_mode_en - Bits[2:2], RW, default = 1'b0 
       Error Burst Mode Enable enables the Burst Mode 2/3/4.
     */
    UINT32 rsvd_3 : 5;
    /* rsvd_3 - Bits[7:3], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 burst_count : 8;
    /* burst_count - Bits[15:8], RW1C, default = 8'b00000000 
       Error Burst Count value
     */
    UINT32 burst_overflow : 1;
    /* burst_overflow - Bits[16:16], RW1C, default = 1'b0 
       Error Burst Overflow
     */
    UINT32 rsvd_17 : 15;
    /* rsvd_17 - Bits[31:17], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PCIEBURST_ERR_CNTR_IIO_DFX_STRUCT;


/* PXPHDRXENG_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x4013837C)                                                  */
/*       SKX (0x4013837C)                                                     */
/* Register default value:              0x00000000                            */
#define PXPHDRXENG_IIO_DFX_REG 0x1200437C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register contains the bits to translate the address and attributes field.
 */
typedef union {
  struct {
    UINT32 xor_ttype : 5;
    /* xor_ttype - Bits[4:0], RW_L, default = 5'b00000 
       When translation is enabled by one of the xxx_TTYPE_XOR_EN, this field is XOR'd 
       with the corresponding TTYPE field 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_5 : 4;
    /* rsvd_5 - Bits[8:5], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 xor_mem_cfg_addr : 4;
    /* xor_mem_cfg_addr - Bits[12:9], RW_L, default = 4'b0000 
       When translation is enabled by MEM_XOR_EN or CFG_XOR_EN, this field is XOR'd 
       with bits [31:28] of the Mem or CFG Address 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 xor_io_addr : 3;
    /* xor_io_addr - Bits[15:13], RW_L, default = 3'b000 
       When translation is enabled by IO_ADDR_XOR_EN, this field is XOR'd with bits 
       [15:13] of the IO Address 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 cfg_ttype_xor_en : 1;
    /* cfg_ttype_xor_en - Bits[16:16], RW_L, default = 1'b0 
       0: no translation
       1: transaction type is XOR'd with XOR_TTYPE on CFG space transactions
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 io_ttype_xor_en : 1;
    /* io_ttype_xor_en - Bits[17:17], RW_L, default = 1'b0 
       0: no translation
       1: transaction type is XOR'd with XOR_TTYPE on IO space transactions
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 mem_ttype_xor_en : 1;
    /* mem_ttype_xor_en - Bits[18:18], RW_L, default = 1'b0 
       0: no translation
       1: transaction type is XOR'd with XOR_TTYPE on Memory space transactions
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 cfg_addr_xor_en : 1;
    /* cfg_addr_xor_en - Bits[19:19], RW_L, default = 1'b0 
       0: no translation
       1: CFG Address bits [31:28] are XOR'd with XOR_MEM_CFG_ADDR
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 io_addr_xor_en : 1;
    /* io_addr_xor_en - Bits[20:20], RW_L, default = 1'b0 
       0: no translation
       1: IO Address bits [15:13] are XOR'd with XOR_IO_ADDR
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 mem_addr_xor_en : 1;
    /* mem_addr_xor_en - Bits[21:21], RW_L, default = 1'b0 
       0: no translation
       1: Mem Address bits [31:28] are XOR'd with XOR_MEM_CFG_ADDR
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 memwrmodification_en : 1;
    /* memwrmodification_en - Bits[22:22], RW_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 drop_completions_en : 1;
    /* drop_completions_en - Bits[23:23], RW_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 disable_credit_check_en : 1;
    /* disable_credit_check_en - Bits[24:24], RW_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 memwrmodification_3dw : 1;
    /* memwrmodification_3dw - Bits[25:25], RW_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 datamodification_3dw : 1;
    /* datamodification_3dw - Bits[26:26], RW_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_27 : 5;
    /* rsvd_27 - Bits[31:27], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPHDRXENG_IIO_DFX_STRUCT;


/* PXPHDRXENG1_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138380)                                                  */
/*       SKX (0x40138380)                                                     */
/* Register default value:              0x00000000                            */
#define PXPHDRXENG1_IIO_DFX_REG 0x12004380
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x380
 */
typedef union {
  struct {
    UINT32 xor_tc : 3;
    /* xor_tc - Bits[2:0], RW_L, default = 3'b000  */
    UINT32 io_tc_xor_en : 1;
    /* io_tc_xor_en - Bits[3:3], RW_L, default = 1'b0  */
    UINT32 cfg_tc_xor_en : 1;
    /* cfg_tc_xor_en - Bits[4:4], RW_L, default = 1'b0  */
    UINT32 mem_tc_xor_en : 1;
    /* mem_tc_xor_en - Bits[5:5], RW_L, default = 1'b0  */
    UINT32 xor_attrib : 2;
    /* xor_attrib - Bits[7:6], RW_L, default = 2'b00  */
    UINT32 io_attrib_xor_en : 1;
    /* io_attrib_xor_en - Bits[8:8], RW_L, default = 1'b0  */
    UINT32 cfg_attrib_xor_en : 1;
    /* cfg_attrib_xor_en - Bits[9:9], RW_L, default = 1'b0  */
    UINT32 mem_attrib_xor_en : 1;
    /* mem_attrib_xor_en - Bits[10:10], RW_L, default = 1'b0  */
    UINT32 xor_mem_cfg_addr11_4 : 8;
    /* xor_mem_cfg_addr11_4 - Bits[18:11], RW_L, default = 8'b00000000  */
    UINT32 xor_mem_cfg_addr18_12 : 7;
    /* xor_mem_cfg_addr18_12 - Bits[25:19], RW_L, default = 7'b0000000  */
    UINT32 rsvd : 6;
    /* rsvd - Bits[31:26], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPHDRXENG1_IIO_DFX_STRUCT;


/* PXPPRTGEN3EQPRIV_IIO_DFX_REG supported on:                                 */
/*       SKX_A0 (0x4013839C)                                                  */
/*       SKX (0x4013839C)                                                     */
/* Register default value:              0x0024001E                            */
#define PXPPRTGEN3EQPRIV_IIO_DFX_REG 0x1200439C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x39c
 */
typedef union {
  struct {
    UINT32 dmplenfovrd : 1;
    /* dmplenfovrd - Bits[0:0], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_july0_7spec : 1;
    /* en_july0_7spec - Bits[1:1], RWS_L, default = 1'b1  */
    UINT32 bypass_txeqcoeff_rule4b : 1;
    /* bypass_txeqcoeff_rule4b - Bits[2:2], RWS_L, default = 1'b1  */
    UINT32 dis_txdcbal : 1;
    /* dis_txdcbal - Bits[3:3], RWS_L, default = 1'b1 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_rxdcbal : 1;
    /* dis_rxdcbal - Bits[4:4], RWS_L, default = 1'b1 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_ts_rxdcbalcheck : 1;
    /* en_ts_rxdcbalcheck - Bits[5:5], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_6 : 2;
    /* rsvd_6 - Bits[7:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 dis_mask_p2l_lnkup4eq : 1;
    /* dis_mask_p2l_lnkup4eq - Bits[8:8], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_eqph23 : 1;
    /* dis_eqph23 - Bits[9:9], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bypass_g3eq : 1;
    /* bypass_g3eq - Bits[10:10], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 use_g3eqprivatecsrvalues : 1;
    /* use_g3eqprivatecsrvalues - Bits[11:11], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 use_g3eqprivcsr4adaptsm : 1;
    /* use_g3eqprivcsr4adaptsm - Bits[12:12], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_gen3dis200mstimer4eqfail : 1;
    /* en_gen3dis200mstimer4eqfail - Bits[13:13], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_check_dsc_reqeq : 1;
    /* dis_check_dsc_reqeq - Bits[14:14], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_setg3spdfailcsr_inrcvrlck : 1;
    /* dis_setg3spdfailcsr_inrcvrlck - Bits[15:15], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_setg3spdfailcsr_inrcvrcfg : 1;
    /* dis_setg3spdfailcsr_inrcvrcfg - Bits[16:16], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dsc_redoeq_woquiesceg : 1;
    /* dsc_redoeq_woquiesceg - Bits[17:17], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dsc_redoeqcnt : 2;
    /* dsc_redoeqcnt - Bits[19:18], RWS_L, default = 2'b01 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 redoeqcnt_1sttime : 2;
    /* redoeqcnt_1sttime - Bits[21:20], RWS_L, default = 2'b10 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 byp_adaptsm_but_capcoeff : 1;
    /* byp_adaptsm_but_capcoeff - Bits[22:22], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_23 : 7;
    /* rsvd_23 - Bits[29:23], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 en_g3skpos2osblkstart : 1;
    /* en_g3skpos2osblkstart - Bits[30:30], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 disable_fe9_fe5_framingerrs : 1;
    /* disable_fe9_fe5_framingerrs - Bits[31:31], RWS_L, default = 1'b0 
       1
     */
  } Bits;
  UINT32 Data;
} PXPPRTGEN3EQPRIV_IIO_DFX_STRUCT;


/* GEN1TXEQ_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x401383A0)                                                  */
/*       SKX (0x401383A0)                                                     */
/* Register default value:              0x0014AD34                            */
#define GEN1TXEQ_IIO_DFX_REG 0x120043A0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3a0
 */
typedef union {
  struct {
    UINT32 bndl0_g1txeq_cursor : 6;
    /* bndl0_g1txeq_cursor - Bits[5:0], RW_L, default = 6'b110100 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g1txeq_cursor : 6;
    /* bndl1_g1txeq_cursor - Bits[11:6], RW_L, default = 6'b110100 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl0_g1txeq_postcursor : 5;
    /* bndl0_g1txeq_postcursor - Bits[16:12], RW_L, default = 5'b01010 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g1txeq_postcursor : 5;
    /* bndl1_g1txeq_postcursor - Bits[21:17], RW_L, default = 5'b01010 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl0_g1txeq_precursor : 5;
    /* bndl0_g1txeq_precursor - Bits[26:22], RW_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g1txeq_precursor : 5;
    /* bndl1_g1txeq_precursor - Bits[31:27], RW_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} GEN1TXEQ_IIO_DFX_STRUCT;


/* GEN2STXEQ_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401383A4)                                                  */
/*       SKX (0x401383A4)                                                     */
/* Register default value:              0x0014AD34                            */
#define GEN2STXEQ_IIO_DFX_REG 0x120043A4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3a4
 */
typedef union {
  struct {
    UINT32 bndl0_g2stxeq_cursor : 6;
    /* bndl0_g2stxeq_cursor - Bits[5:0], RW_L, default = 6'b110100 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g2stxeq_cursor : 6;
    /* bndl1_g2stxeq_cursor - Bits[11:6], RW_L, default = 6'b110100 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl0_g2stxeq_postcursor : 5;
    /* bndl0_g2stxeq_postcursor - Bits[16:12], RW_L, default = 5'b01010 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g2stxeq_postcursor : 5;
    /* bndl1_g2stxeq_postcursor - Bits[21:17], RW_L, default = 5'b01010 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl0_g2stxeq_precursor : 5;
    /* bndl0_g2stxeq_precursor - Bits[26:22], RW_L, default = 5'b00000 
       1
     */
    UINT32 bndl1_g2stxeq_precursor : 5;
    /* bndl1_g2stxeq_precursor - Bits[31:27], RW_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} GEN2STXEQ_IIO_DFX_STRUCT;


/* GEN2LTXEQ_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x401383A8)                                                  */
/*       SKX (0x401383A8)                                                     */
/* Register default value:              0x001EFBEF                            */
#define GEN2LTXEQ_IIO_DFX_REG 0x120043A8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3a8
 */
typedef union {
  struct {
    UINT32 bndl0_g2ltxeq_cursor : 6;
    /* bndl0_g2ltxeq_cursor - Bits[5:0], RW_L, default = 6'b101111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g2ltxeq_cursor : 6;
    /* bndl1_g2ltxeq_cursor - Bits[11:6], RW_L, default = 6'b101111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl0_g2ltxeq_postcursor : 5;
    /* bndl0_g2ltxeq_postcursor - Bits[16:12], RW_L, default = 5'b01111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g2ltxeq_postcursor : 5;
    /* bndl1_g2ltxeq_postcursor - Bits[21:17], RW_L, default = 5'b01111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl0_g2ltxeq_precursor : 5;
    /* bndl0_g2ltxeq_precursor - Bits[26:22], RW_L, default = 5'b00000 
       1
     */
    UINT32 bndl1_g2ltxeq_precursor : 5;
    /* bndl1_g2ltxeq_precursor - Bits[31:27], RW_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} GEN2LTXEQ_IIO_DFX_STRUCT;


/* GEN3PRIVTXEQ_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x401383AC)                                                  */
/*       SKX (0x401383AC)                                                     */
/* Register default value:              0x001EFBEF                            */
#define GEN3PRIVTXEQ_IIO_DFX_REG 0x120043AC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3ac
 */
typedef union {
  struct {
    UINT32 bndl0_g3ptxeq_cursor : 6;
    /* bndl0_g3ptxeq_cursor - Bits[5:0], RW_L, default = 6'b101111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g3ptxeq_cursor : 6;
    /* bndl1_g3ptxeq_cursor - Bits[11:6], RW_L, default = 6'b101111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl0_g3ptxeq_postcursor : 5;
    /* bndl0_g3ptxeq_postcursor - Bits[16:12], RW_L, default = 5'b01111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g3ptxeq_postcursor : 5;
    /* bndl1_g3ptxeq_postcursor - Bits[21:17], RW_L, default = 5'b01111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl0_g3ptxeq_precursor : 5;
    /* bndl0_g3ptxeq_precursor - Bits[26:22], RW_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g3ptxeq_precursor : 5;
    /* bndl1_g3ptxeq_precursor - Bits[31:27], RW_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} GEN3PRIVTXEQ_IIO_DFX_STRUCT;


/* GEN3PRIVRMTTXEQ_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x401383B0)                                                  */
/*       SKX (0x401383B0)                                                     */
/* Register default value:              0x001EFBEF                            */
#define GEN3PRIVRMTTXEQ_IIO_DFX_REG 0x120043B0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3b0
 */
typedef union {
  struct {
    UINT32 bndl0_g3prmttxeq_cursor : 6;
    /* bndl0_g3prmttxeq_cursor - Bits[5:0], RW_L, default = 6'b101111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g3prmttxeq_cursor : 6;
    /* bndl1_g3prmttxeq_cursor - Bits[11:6], RW_L, default = 6'b101111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl0_g3prmttxeq_postcursor : 5;
    /* bndl0_g3prmttxeq_postcursor - Bits[16:12], RW_L, default = 5'b01111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g3prmttxeq_postcursor : 5;
    /* bndl1_g3prmttxeq_postcursor - Bits[21:17], RW_L, default = 5'b01111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl0_g3prmttxeq_precursor : 5;
    /* bndl0_g3prmttxeq_precursor - Bits[26:22], RW_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bndl1_g3prmttxeq_precursor : 5;
    /* bndl1_g3prmttxeq_precursor - Bits[31:27], RW_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} GEN3PRIVRMTTXEQ_IIO_DFX_STRUCT;


/* PARTNER_TXEQ_CURSOR_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x401383B4)                                                  */
/*       SKX (0x401383B4)                                                     */
/* Register default value:              0x00000000                            */
#define PARTNER_TXEQ_CURSOR_IIO_DFX_REG 0x120043B4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3b4
 */
typedef union {
  struct {
    UINT32 patnerx4_txeq_cursor : 24;
    /* patnerx4_txeq_cursor - Bits[23:0], RO_V, default = 24'b000000000000000000000000 
       1
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PARTNER_TXEQ_CURSOR_IIO_DFX_STRUCT;


/* PARTNER_TXEQ_POSTCURSOR_IIO_DFX_REG supported on:                          */
/*       SKX_A0 (0x401383B8)                                                  */
/*       SKX (0x401383B8)                                                     */
/* Register default value:              0x00000000                            */
#define PARTNER_TXEQ_POSTCURSOR_IIO_DFX_REG 0x120043B8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3b8
 */
typedef union {
  struct {
    UINT32 patnerx4_txeq_postcursor : 24;
    /* patnerx4_txeq_postcursor - Bits[23:0], RO_V, default = 24'b000000000000000000000000 
       1
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PARTNER_TXEQ_POSTCURSOR_IIO_DFX_STRUCT;


/* PARTNER_TXEQ_PRECURSOR_IIO_DFX_REG supported on:                           */
/*       SKX_A0 (0x401383BC)                                                  */
/*       SKX (0x401383BC)                                                     */
/* Register default value:              0x00000000                            */
#define PARTNER_TXEQ_PRECURSOR_IIO_DFX_REG 0x120043BC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3bc
 */
typedef union {
  struct {
    UINT32 patnerx4_txeq_precursor : 24;
    /* patnerx4_txeq_precursor - Bits[23:0], RO_V, default = 24'b000000000000000000000000 
       1
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PARTNER_TXEQ_PRECURSOR_IIO_DFX_STRUCT;


/* PARTNER_TXEQ_FSSTAR_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x401383C0)                                                  */
/*       SKX (0x401383C0)                                                     */
/* Register default value:              0x00000000                            */
#define PARTNER_TXEQ_FSSTAR_IIO_DFX_REG 0x120043C0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3c0
 */
typedef union {
  struct {
    UINT32 patnerx4_txeq_fsstart : 24;
    /* patnerx4_txeq_fsstart - Bits[23:0], RO_V, default = 24'b000000000000000000000000 
       1
     */
    UINT32 adaptsmx4_reject_cntr : 8;
    /* adaptsmx4_reject_cntr - Bits[31:24], RO_V, default = 8'b00000000  */
  } Bits;
  UINT32 Data;
} PARTNER_TXEQ_FSSTAR_IIO_DFX_STRUCT;


/* TXEQMISCSTATUS_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401383C4)                                                  */
/*       SKX (0x401383C4)                                                     */
/* Register default value:              0x00000000                            */
#define TXEQMISCSTATUS_IIO_DFX_REG 0x120043C4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3c4
 */
typedef union {
  struct {
    UINT32 patnerx4_txeq_lfstart : 24;
    /* patnerx4_txeq_lfstart - Bits[23:0], RO_V, default = 24'b000000000000000000000000 
       1
     */
    UINT32 g3eq_ph0_success : 1;
    /* g3eq_ph0_success - Bits[24:24], RW_V, default = 1'b0  */
    UINT32 rsvd : 7;
    /* rsvd - Bits[31:25], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TXEQMISCSTATUS_IIO_DFX_STRUCT;


/* G3DFRMERRSTATUS_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x401383C8)                                                  */
/*       SKX (0x401383C8)                                                     */
/* Register default value:              0x00000000                            */
#define G3DFRMERRSTATUS_IIO_DFX_REG 0x120043C8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3c8
 */
typedef union {
  struct {
    UINT32 dfrmerr_vectorval : 32;
    /* dfrmerr_vectorval - Bits[31:0], RW1CS, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} G3DFRMERRSTATUS_IIO_DFX_STRUCT;


/* TX_PH3_CURSOR_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401383CC)                                                  */
/*       SKX (0x401383CC)                                                     */
/* Register default value:              0x00000000                            */
#define TX_PH3_CURSOR_IIO_DFX_REG 0x120043CC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3cc
 */
typedef union {
  struct {
    UINT32 b0add_pre_cursor : 3;
    /* b0add_pre_cursor - Bits[2:0], RW_L, default = 3'b000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 b1add_pre_cursor : 3;
    /* b1add_pre_cursor - Bits[5:3], RW_L, default = 3'b000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 b0sub_pre_cursor : 3;
    /* b0sub_pre_cursor - Bits[8:6], RW_L, default = 3'b000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 b1sub_pre_cursor : 3;
    /* b1sub_pre_cursor - Bits[11:9], RW_L, default = 3'b000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 b0add_post_cursor : 3;
    /* b0add_post_cursor - Bits[14:12], RW_L, default = 3'b000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 b1add_post_cursor : 3;
    /* b1add_post_cursor - Bits[17:15], RW_L, default = 3'b000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 b0sub_post_cursor : 3;
    /* b0sub_post_cursor - Bits[20:18], RW_L, default = 3'b000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 b1sub_post_cursor : 3;
    /* b1sub_post_cursor - Bits[23:21], RW_L, default = 3'b000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 bypass_endcard_coeff : 1;
    /* bypass_endcard_coeff - Bits[24:24], RW_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 7;
    /* rsvd - Bits[31:25], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_PH3_CURSOR_IIO_DFX_STRUCT;


/* GEN3TXEQPRESETTABLE_12_IIO_DFX_REG supported on:                           */
/*       SKX_A0 (0x401383D0)                                                  */
/*       SKX (0x401383D0)                                                     */
/* Register default value:              0xD40AC00F                            */
#define GEN3TXEQPRESETTABLE_12_IIO_DFX_REG 0x120043D0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3d0
 */
typedef union {
  struct {
    UINT32 presettable_postcursor1 : 5;
    /* presettable_postcursor1 - Bits[4:0], RWS_L, default = 5'b01111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_precursor1 : 5;
    /* presettable_precursor1 - Bits[9:5], RWS_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_cursor1 : 6;
    /* presettable_cursor1 - Bits[15:10], RWS_L, default = 6'b110000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_postcursor2 : 5;
    /* presettable_postcursor2 - Bits[20:16], RWS_L, default = 5'b01010 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_precursor2 : 5;
    /* presettable_precursor2 - Bits[25:21], RWS_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_cursor2 : 6;
    /* presettable_cursor2 - Bits[31:26], RWS_L, default = 6'b110101 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} GEN3TXEQPRESETTABLE_12_IIO_DFX_STRUCT;


/* GEN3TXEQPRESETTABLE_34_IIO_DFX_REG supported on:                           */
/*       SKX_A0 (0x401383D4)                                                  */
/*       SKX (0x401383D4)                                                     */
/* Register default value:              0xDC08C80D                            */
#define GEN3TXEQPRESETTABLE_34_IIO_DFX_REG 0x120043D4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3d4
 */
typedef union {
  struct {
    UINT32 presettable_postcursor3 : 5;
    /* presettable_postcursor3 - Bits[4:0], RWS_L, default = 5'b01101 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_precursor3 : 5;
    /* presettable_precursor3 - Bits[9:5], RWS_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_cursor3 : 6;
    /* presettable_cursor3 - Bits[15:10], RWS_L, default = 6'b110010 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_postcursor4 : 5;
    /* presettable_postcursor4 - Bits[20:16], RWS_L, default = 5'b01000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_precursor4 : 5;
    /* presettable_precursor4 - Bits[25:21], RWS_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_cursor4 : 6;
    /* presettable_cursor4 - Bits[31:26], RWS_L, default = 6'b110111 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} GEN3TXEQPRESETTABLE_34_IIO_DFX_STRUCT;


/* GEN3TXEQPRESETTABLE_56_IIO_DFX_REG supported on:                           */
/*       SKX_A0 (0x401383D8)                                                  */
/*       SKX (0x401383D8)                                                     */
/* Register default value:              0xE4C0FC00                            */
#define GEN3TXEQPRESETTABLE_56_IIO_DFX_REG 0x120043D8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3d8
 */
typedef union {
  struct {
    UINT32 presettable_postcursor5 : 5;
    /* presettable_postcursor5 - Bits[4:0], RWS_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_precursor5 : 5;
    /* presettable_precursor5 - Bits[9:5], RWS_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_cursor5 : 6;
    /* presettable_cursor5 - Bits[15:10], RWS_L, default = 6'b111111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_postcursor6 : 5;
    /* presettable_postcursor6 - Bits[20:16], RWS_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_precursor6 : 5;
    /* presettable_precursor6 - Bits[25:21], RWS_L, default = 5'b00110 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_cursor6 : 6;
    /* presettable_cursor6 - Bits[31:26], RWS_L, default = 6'b111001 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} GEN3TXEQPRESETTABLE_56_IIO_DFX_STRUCT;


/* GEN3TXEQPRESETTABLE_78_IIO_DFX_REG supported on:                           */
/*       SKX_A0 (0x401383DC)                                                  */
/*       SKX (0x401383DC)                                                     */
/* Register default value:              0xB0CDDD00                            */
#define GEN3TXEQPRESETTABLE_78_IIO_DFX_REG 0x120043DC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3dc
 */
typedef union {
  struct {
    UINT32 presettable_postcursor7 : 5;
    /* presettable_postcursor7 - Bits[4:0], RWS_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_precursor7 : 5;
    /* presettable_precursor7 - Bits[9:5], RWS_L, default = 5'b01000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_cursor7 : 6;
    /* presettable_cursor7 - Bits[15:10], RWS_L, default = 6'b110111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_postcursor8 : 5;
    /* presettable_postcursor8 - Bits[20:16], RWS_L, default = 5'b01101 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_precursor8 : 5;
    /* presettable_precursor8 - Bits[25:21], RWS_L, default = 5'b00110 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_cursor8 : 6;
    /* presettable_cursor8 - Bits[31:26], RWS_L, default = 6'b101100 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} GEN3TXEQPRESETTABLE_78_IIO_DFX_STRUCT;


/* GEN3TXEQPRESETTABLE_910_IIO_DFX_REG supported on:                          */
/*       SKX_A0 (0x401383E0)                                                  */
/*       SKX (0x401383E0)                                                     */
/* Register default value:              0xD540BD08                            */
#define GEN3TXEQPRESETTABLE_910_IIO_DFX_REG 0x120043E0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3e0
 */
typedef union {
  struct {
    UINT32 presettable_postcursor9 : 5;
    /* presettable_postcursor9 - Bits[4:0], RWS_L, default = 5'b01000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_precursor9 : 5;
    /* presettable_precursor9 - Bits[9:5], RWS_L, default = 5'b01000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_cursor9 : 6;
    /* presettable_cursor9 - Bits[15:10], RWS_L, default = 6'b101111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_postcursor10 : 5;
    /* presettable_postcursor10 - Bits[20:16], RWS_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_precursor10 : 5;
    /* presettable_precursor10 - Bits[25:21], RWS_L, default = 5'b01010 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_cursor10 : 6;
    /* presettable_cursor10 - Bits[31:26], RWS_L, default = 6'b110101 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} GEN3TXEQPRESETTABLE_910_IIO_DFX_STRUCT;


/* GEN3TXEQPRESETTABLE_11_IIO_DFX_REG supported on:                           */
/*       SKX_A0 (0x401383E4)                                                  */
/*       SKX (0x401383E4)                                                     */
/* Register default value:              0x0000A814                            */
#define GEN3TXEQPRESETTABLE_11_IIO_DFX_REG 0x120043E4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3e4
 */
typedef union {
  struct {
    UINT32 presettable_postcursor11 : 5;
    /* presettable_postcursor11 - Bits[4:0], RWS_L, default = 5'b10100 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_precursor11 : 5;
    /* presettable_precursor11 - Bits[9:5], RWS_L, default = 5'b00000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 presettable_cursor11 : 6;
    /* presettable_cursor11 - Bits[15:10], RWS_L, default = 6'b101010 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} GEN3TXEQPRESETTABLE_11_IIO_DFX_STRUCT;


/* MYEQSTATUS_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x201383EC)                                                  */
/*       SKX (0x201383EC)                                                     */
/* Register default value:              0x0000                                */
#define MYEQSTATUS_IIO_DFX_REG 0x120023EC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3ec
 */
typedef union {
  struct {
    UINT16 my_adapt_not_honored : 16;
    /* my_adapt_not_honored - Bits[15:0], RW1CS, default = 16'b0000000000000000 
       The number of valid bits depends on the number of lanes, up to 16 lanes.
       For Port 0, there are 4 lanes, so only bits 3:0 are valid. Bits 15:4 are RO.
       For Port 1, there are 8 lanes, so only bits 7:0 are valid. Bits 15:8 are RO.
       For Port 2, there are 16 lanes, so all bits are valid.
       For Port 3, there are 16 lanes, so all bits are valid.
     */
  } Bits;
  UINT16 Data;
} MYEQSTATUS_IIO_DFX_STRUCT;


/* RMTEQSTATUS_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x201383EE)                                                  */
/*       SKX (0x201383EE)                                                     */
/* Register default value:              0x0000                                */
#define RMTEQSTATUS_IIO_DFX_REG 0x120023EE
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3ee
 */
typedef union {
  struct {
    UINT16 rmtagent_eqfail : 16;
    /* rmtagent_eqfail - Bits[15:0], RW1CS, default = 16'b0000000000000000 
       The number of valid bits depends on the number of lanes, up to 16 lanes.
       For Port 0, there are 4 lanes, so only bits 3:0 are valid. Bits 15:4 are RO.
       For Port 1, there are 8 lanes, so only bits 7:0 are valid. Bits 15:8 are RO.
       For Port 2, there are 16 lanes, so all bits are valid.
       For Port 3, there are 16 lanes, so all bits are valid.
     */
  } Bits;
  UINT16 Data;
} RMTEQSTATUS_IIO_DFX_STRUCT;


/* TXEQREUTPRIV_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x401383F0)                                                  */
/*       SKX (0x401383F0)                                                     */
/* Register default value:              0x3C002000                            */
#define TXEQREUTPRIV_IIO_DFX_REG 0x120043F0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3f0
 */
typedef union {
  struct {
    UINT32 rsvd : 1;
    /* rsvd - Bits[0:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 use_oddlane_polcmpl_captxpreset : 1;
    /* use_oddlane_polcmpl_captxpreset - Bits[1:1], RWS_L, default = 1'b0 
       1
     */
    UINT32 dis_txeqmargin : 1;
    /* dis_txeqmargin - Bits[2:2], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_sym89_comp : 1;
    /* dis_sym89_comp - Bits[3:3], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_sym67_comp : 1;
    /* dis_sym67_comp - Bits[4:4], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_g3eqts1gen : 1;
    /* dis_g3eqts1gen - Bits[5:5], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_g12eqts2gen : 1;
    /* dis_g12eqts2gen - Bits[6:6], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_g12eqts1gen : 1;
    /* dis_g12eqts1gen - Bits[7:7], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_cmp_nzecinrcvrlck : 1;
    /* dis_cmp_nzecinrcvrlck - Bits[8:8], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_cmp_00ecinrcvrlck : 1;
    /* dis_cmp_00ecinrcvrlck - Bits[9:9], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_cappreset4uc_ineqts2 : 1;
    /* en_cappreset4uc_ineqts2 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 bypass_adaptmytx4selfloopback : 1;
    /* bypass_adaptmytx4selfloopback - Bits[11:11], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 wait4_2tsinlpbkentryslave : 1;
    /* wait4_2tsinlpbkentryslave - Bits[12:12], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_eqts1_in_polactive : 1;
    /* dis_eqts1_in_polactive - Bits[13:13], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_eqts1_in_lbm : 1;
    /* dis_eqts1_in_lbm - Bits[14:14], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_check_ts1_req_coeff : 1;
    /* dis_check_ts1_req_coeff - Bits[15:15], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_check_eqts14lb : 1;
    /* dis_check_eqts14lb - Bits[16:16], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_check_eqts14cmpl : 1;
    /* dis_check_eqts14cmpl - Bits[17:17], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_eqts1cap_inpolactcfglnkws_g12 : 1;
    /* en_eqts1cap_inpolactcfglnkws_g12 - Bits[18:18], RWS_L, default = 1'b0  */
    UINT32 use_highesteverspeed4eqts2 : 1;
    /* use_highesteverspeed4eqts2 - Bits[19:19], RWS_L, default = 1'b0  */
    UINT32 dis_skpparityerr_log : 1;
    /* dis_skpparityerr_log - Bits[20:20], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_synchbitserr_log : 1;
    /* dis_synchbitserr_log - Bits[21:21], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 inph3eval_request2rsteiescntr : 1;
    /* inph3eval_request2rsteiescntr - Bits[22:22], RWS_L, default = 1'b0  */
    UINT32 en_ph3_tiemout2nongen3 : 1;
    /* en_ph3_tiemout2nongen3 - Bits[23:23], RWS_L, default = 1'b0  */
    UINT32 en_clear_g3spdfail_on200mstimer : 1;
    /* en_clear_g3spdfail_on200mstimer - Bits[24:24], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 use_reutep_txeqlvls : 1;
    /* use_reutep_txeqlvls - Bits[25:25], RWS_L, default = 1'b0  */
    UINT32 dis_sos_ing3lpbkpattern : 1;
    /* dis_sos_ing3lpbkpattern - Bits[26:26], RWS_L, default = 1'b1  */
    UINT32 dis_sos_ing3lpbkmarker : 1;
    /* dis_sos_ing3lpbkmarker - Bits[27:27], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_sos_ing12lpbkactive : 1;
    /* dis_sos_ing12lpbkactive - Bits[28:28], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 reutsel_onelaneperx4inslaveloopback : 1;
    /* reutsel_onelaneperx4inslaveloopback - Bits[29:29], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_g3osvalid_rstscramsignals : 1;
    /* dis_g3osvalid_rstscramsignals - Bits[30:30], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_throtreut4g3skpinsert : 1;
    /* dis_throtreut4g3skpinsert - Bits[31:31], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} TXEQREUTPRIV_IIO_DFX_STRUCT;


/* UNIPHYPMCTL_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x401383F4)                                                  */
/*       SKX (0x401383F4)                                                     */
/* Register default value:              0x8A450990                            */
#define UNIPHYPMCTL_IIO_DFX_REG 0x120043F4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3f4
 */
typedef union {
  struct {
    UINT32 stagmode : 2;
    /* stagmode - Bits[1:0], RWS_L, default = 2'b00 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 lanestagint : 4;
    /* lanestagint - Bits[5:2], RWS_L, default = 4'b0100 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_txsqfsm_l1idletime : 1;
    /* dis_txsqfsm_l1idletime - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 afe_req_rxrst_recovery_en : 1;
    /* afe_req_rxrst_recovery_en - Bits[7:7], RWS_L, default = 1'b1  */
    UINT32 rxsqex_cntrval : 4;
    /* rxsqex_cntrval - Bits[11:8], RWS_L, default = 4'b1001 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rxl1mskbits : 2;
    /* rxl1mskbits - Bits[13:12], RWS_L, default = 2'b00 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 force_rxsqexit : 1;
    /* force_rxsqexit - Bits[14:14], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 force_rxdetected : 1;
    /* force_rxdetected - Bits[15:15], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_rxrst4inferredei : 1;
    /* dis_rxrst4inferredei - Bits[16:16], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rst_sqexitflop : 1;
    /* rst_sqexitflop - Bits[17:17], RWS_L, default = 1'b0  */
    UINT32 en_uniphyl1_forfusedoffports : 1;
    /* en_uniphyl1_forfusedoffports - Bits[18:18], RWS_L, default = 1'b1  */
    UINT32 rsvd : 1;
    /* rsvd - Bits[19:19], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 txlanestagint : 4;
    /* txlanestagint - Bits[23:20], RWS_L, default = 4'b0100 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_txl0sentrystagger : 1;
    /* dis_txl0sentrystagger - Bits[24:24], RWS_L, default = 1'b0 
       1
     */
    UINT32 csr_rxsqfsm_l1exitwaittime_in32ns : 2;
    /* csr_rxsqfsm_l1exitwaittime_in32ns - Bits[26:25], RWS_L, default = 2'b01 
       Wait time before determining an exit from L1 really is happening.
       00: 32nS
       01: 64nS
       10: 96nS
       11: 128nS
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rxsqfsm_generic_waittime_in16ns : 3;
    /* rxsqfsm_generic_waittime_in16ns - Bits[29:27], RWS_L, default = 3'b001 
       Minimum time between L1 and L0s to uniphy.
       000: 16nS
       001: 32nS
       010: 48nS
       011: 64nS
       100: 80nS
       101: 96nS
       110: 112nS
       111: 128nS
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_extend_rxclkoff4bitlocktime : 1;
    /* en_extend_rxclkoff4bitlocktime - Bits[30:30], RWS_L, default = 1'b0 
       1
     */
    UINT32 en_txsqfsm_rst_on_ltdetect : 1;
    /* en_txsqfsm_rst_on_ltdetect - Bits[31:31], RWS_L, default = 1'b1 
       1
     */
  } Bits;
  UINT32 Data;
} UNIPHYPMCTL_IIO_DFX_STRUCT;


/* SQUELCHSTATUS_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401383F8)                                                  */
/*       SKX (0x401383F8)                                                     */
/* Register default value:              0x00000000                            */
#define SQUELCHSTATUS_IIO_DFX_REG 0x120043F8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3f8
 */
typedef union {
  struct {
    UINT32 lnsqexitstatus : 16;
    /* lnsqexitstatus - Bits[15:0], RO_V, default = 16'b0000000000000000  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} SQUELCHSTATUS_IIO_DFX_STRUCT;


/* TXEQREUTPRIV1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401383FC)                                                  */
/*       SKX (0x401383FC)                                                     */
/* Register default value:              0x00000000                            */
#define TXEQREUTPRIV1_IIO_DFX_REG 0x120043FC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x3fc
 */
typedef union {
  struct {
    UINT32 ph3_500nstimerincreasein_1us : 10;
    /* ph3_500nstimerincreasein_1us - Bits[9:0], RWS_L, default = 10'b0000000000 
       The Phase 3 timer for 500nS can be programmed up to 1mS in increments of 1uS. 
       The value in this field specifies how many 1uS intervals to add to the 500nS 
       timer. 
       0: 500nS
       1: 1.5uS
       2: 2.5uS
       :
       :
       1023: 1.0235mS
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TXEQREUTPRIV1_IIO_DFX_STRUCT;


/* TXEQREUTPRIV2_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138400)                                                  */
/*       SKX (0x40138400)                                                     */
/* Register default value:              0x00000000                            */
#define TXEQREUTPRIV2_IIO_DFX_REG 0x12004400
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x400
 */
typedef union {
  struct {
    UINT32 ph3_500nstimerincreasein_1us_19 : 19;
    /* ph3_500nstimerincreasein_1us_19 - Bits[18:0], RWS_L, default = 10'b0000000000 
       The value in this field specifies the Ph3 bitwaitlock time.
       h1000: 64KUI
       h1800: 96KUI
       h2000: 128KUI
       h2800: 160KUI
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 13;
    /* rsvd - Bits[31:19], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TXEQREUTPRIV2_IIO_DFX_STRUCT;


/* MYTX_TXEQ_CURSOR_IIO_DFX_REG supported on:                                 */
/*       SKX_A0 (0x40138404)                                                  */
/*       SKX (0x40138404)                                                     */
/* Register default value:              0x00000000                            */
#define MYTX_TXEQ_CURSOR_IIO_DFX_REG 0x12004404
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x404
 */
typedef union {
  struct {
    UINT32 mytxx4_txeq_cursor : 24;
    /* mytxx4_txeq_cursor - Bits[23:0], RO_V, default = 24'b000000000000000000000000  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} MYTX_TXEQ_CURSOR_IIO_DFX_STRUCT;


/* MYTX_TXEQ_POSTCURSOR_IIO_DFX_REG supported on:                             */
/*       SKX_A0 (0x40138408)                                                  */
/*       SKX (0x40138408)                                                     */
/* Register default value:              0x00000000                            */
#define MYTX_TXEQ_POSTCURSOR_IIO_DFX_REG 0x12004408
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x408
 */
typedef union {
  struct {
    UINT32 mytxx4_txeq_postcursor : 24;
    /* mytxx4_txeq_postcursor - Bits[23:0], RO_V, default = 24'b000000000000000000000000  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} MYTX_TXEQ_POSTCURSOR_IIO_DFX_STRUCT;


/* MYTX_TXEQ_PRECURSOR_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x4013840C)                                                  */
/*       SKX (0x4013840C)                                                     */
/* Register default value:              0x00000000                            */
#define MYTX_TXEQ_PRECURSOR_IIO_DFX_REG 0x1200440C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x40c
 */
typedef union {
  struct {
    UINT32 mytxx4_txeq_precursor : 24;
    /* mytxx4_txeq_precursor - Bits[23:0], RO_V, default = 24'b000000000000000000000000  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} MYTX_TXEQ_PRECURSOR_IIO_DFX_STRUCT;


/* PHYLTSSMDBG0_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138420)                                                  */
/*       SKX (0x40138420)                                                     */
/* Register default value:              0x00000003                            */
#define PHYLTSSMDBG0_IIO_DFX_REG 0x12004420
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x420
 */
typedef union {
  struct {
    UINT32 detquiettoen : 1;
    /* detquiettoen - Bits[0:0], RWS_L, default = 1'b1 
       0: Don't enable LTSSM_X4_DET_QUIET exit on Timeout
       1: Enable LTSSM_X4_DET_QUIET exit on Timeout
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 squelchbexitdet : 1;
    /* squelchbexitdet - Bits[1:1], RWS_L, default = 1'b1 
       0: Don\qt enable LTSSM_X4_DET_QUIET exit on squelch exit
       1: Enable LTSSM_X4_DET_QUIET exit on squelch exit
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 prvntinitspdch : 1;
    /* prvntinitspdch - Bits[2:2], RWS_L, default = 1'b0 
       0: Initiate recovery and speed change if both sides support gen2 after linkup
       1: Don't initiate recovery, but execute the speed change if the other device 
       initiates recovery 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_3 : 1;
    /* rsvd_3 - Bits[3:3], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 reverseset : 1;
    /* reverseset - Bits[4:4], RWS_L, default = 1'b0 
       0: Use non reversed mode when force_reverse is clear
       1: Use reversed mode when force_reverse is set
       Notes:
       Locked by DBGBUSLCK
       IVT 4948791 - This bit controls four lanes, so for port a x16 this bit needs to 
       be set in four different registers. 
     */
    UINT32 forcercvdet : 4;
    /* forcercvdet - Bits[8:5], RWS_L, default = 4'b0000 
       When a bit is set to 1, it forces receive detect to 1 on that corresponding 
       lane. 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 spdchngfaild : 1;
    /* spdchngfaild - Bits[9:9], RW_LV, default = 1'b0 
       0: No speed change failures occurred
       1: Recovery.speed does a transition to gen1 because of timeouts
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 reversalmode : 1;
    /* reversalmode - Bits[10:10], RO_V, default = 1'b0  */
    UINT32 currskew : 12;
    /* currskew - Bits[22:11], RO, default = 12'b000000000000  */
    UINT32 exitslavelb : 1;
    /* exitslavelb - Bits[23:23], RWS_L, default = 1'b0 
       When set to 1 forces link to transition form slave.loopback to detect
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 ebdatatodbgrng : 1;
    /* ebdatatodbgrng - Bits[24:24], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 gen3spdchngfaild : 1;
    /* gen3spdchngfaild - Bits[25:25], RW_LV, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 check_for_1idle_in_gen1mode : 1;
    /* check_for_1idle_in_gen1mode - Bits[26:26], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_27 : 5;
    /* rsvd_27 - Bits[31:27], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PHYLTSSMDBG0_IIO_DFX_STRUCT;


/* LTSSMDBG1_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138424)                                                  */
/*       SKX (0x40138424)                                                     */
/* Register default value:              0x0000003C                            */
#define LTSSMDBG1_IIO_DFX_REG 0x12004424
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x424
 */
typedef union {
  struct {
    UINT32 disablex4 : 1;
    /* disablex4 - Bits[0:0], RWS_L, default = 1'b0 
       0: Enable x4 mode
       1: x4 mode is disabled, degrade straight to x2
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 disablex8 : 1;
    /* disablex8 - Bits[1:1], RWS_L, default = 1'b0 
       0: Enable x4 mode
       1: x4 mode is disabled, degrade straight to x2
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 disablesqinl1 : 3;
    /* disablesqinl1 - Bits[4:2], RWS_L, default = 3'b111 
       Notes:
          Squelch circuitry is switched off for inner lanes during L1. This feature can 
       be enabled by setting one of the bits in this field.  
       	  Bit0: Gen1
       	  Bit1: Gen2
       	  Bit2: Gen3
       Locked by DBGBUSLCK
     */
    UINT32 disablesqinpkgc6 : 1;
    /* disablesqinpkgc6 - Bits[5:5], RWS_L, default = 1'b1 
       Notes:
          Squelch circuitry is switched off for inner lanes during PKGC6. This feature 
       can be enabled by setting this bit. 
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 26;
    /* rsvd - Bits[31:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMDBG1_IIO_DFX_STRUCT;


/* LTSSMDBG0_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138428)                                                  */
/*       SKX (0x40138428)                                                     */
/* Register default value:              0x20003821                            */
#define LTSSMDBG0_IIO_DFX_REG 0x12004428
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x428
 */
typedef union {
  struct {
    UINT32 disablenonedge0 : 1;
    /* disablenonedge0 - Bits[0:0], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 senddblidles : 1;
    /* senddblidles - Bits[1:1], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 checkhalftsrcvd : 1;
    /* checkhalftsrcvd - Bits[2:2], RWS_L, default = 1'b0 
       0: Make forward progress through the LTSSM as stated by PCIE cspec.
       1: Make forward progress if we receive half the # of TS sequences required by 
       the PCIE spec. 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 skpforsos : 1;
    /* skpforsos - Bits[3:3], RWS_L, default = 1'b0 
       0: Only discard SKP in EB if it is preceded by COM or SKP.
       1: Discard all SKPs from EB.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 recrcvlockrecidleto : 1;
    /* recrcvlockrecidleto - Bits[4:4], RWS_L, default = 1'b0 
       0: Enter detect when timeout in REC IDLE happens.
       1: Enter rec.lock when timeout in rec.idle happens.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 tssosforinferei : 1;
    /* tssosforinferei - Bits[5:5], RWS_L, default = 1'b1 
       When 1, use absence of TS/SOS to infer EI in L0.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 sqexitforinferei : 1;
    /* sqexitforinferei - Bits[6:6], RWS_L, default = 1'b0 
       0: Use absence of TS/SOS to infer EI in L0.
       1: Use absence of sq exit in L0 to infer EI.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 send256idles : 1;
    /* send256idles - Bits[7:7], RWS_L, default = 1'b0 
       0: Send min 16 idles, as specified in the PCIE cspec
       1: Send min 256 cycles of idle in REC.idle and CFG.idle before proceeding
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 forcereverse : 1;
    /* forcereverse - Bits[8:8], RWS_L, default = 1'b0 
       When set to 1 lane reversal is disabled and we use the value used in reverse_set 
       to select the reversal mode 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 disablex2 : 1;
    /* disablex2 - Bits[9:9], RWS_L, default = 1'b0 
       0: Enable x2 mode
       1: x2 mode is disabled, degrade straight to x1
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsmstateonts : 1;
    /* rsmstateonts - Bits[10:10], RWS_L, default = 1'b0 
       0: No debug info in TS sequences
       1: The rcv sm state is advertised in the upper 4 control bits of the TS 
       sequences 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 ebfullthold : 4;
    /* ebfullthold - Bits[14:11], RWS_L, default = 4'b0111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 clrbitslip : 1;
    /* clrbitslip - Bits[15:15], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbgselltctl : 1;
    /* dbgselltctl - Bits[16:16], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 disgen3cfg : 1;
    /* disgen3cfg - Bits[17:17], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 disablesqinl0 : 3;
    /* disablesqinl0 - Bits[20:18], RWS_L, default = 3'b000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_rxclkoff2ebkl : 1;
    /* dis_rxclkoff2ebkl - Bits[21:21], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_cmp_tsparity : 1;
    /* dis_cmp_tsparity - Bits[22:22], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_g3recidle2reclck_wo2msto : 1;
    /* en_g3recidle2reclck_wo2msto - Bits[23:23], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 set_idle2rlck_max : 1;
    /* set_idle2rlck_max - Bits[24:24], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_gen3_seedovrd4x4_0 : 1;
    /* dis_gen3_seedovrd4x4_0 - Bits[25:25], RWS_L, default = 1'b0  */
    UINT32 dis_gen3_seedovrd4x4_1 : 1;
    /* dis_gen3_seedovrd4x4_1 - Bits[26:26], RWS_L, default = 1'b0  */
    UINT32 dis_gen3_seedovrd4x4_2 : 1;
    /* dis_gen3_seedovrd4x4_2 - Bits[27:27], RWS_L, default = 1'b0  */
    UINT32 dis_gen3_seedovrd4x4_3 : 1;
    /* dis_gen3_seedovrd4x4_3 - Bits[28:28], RWS_L, default = 1'b0  */
    UINT32 dis_nonedgeln0_reverse_combs : 1;
    /* dis_nonedgeln0_reverse_combs - Bits[29:29], RWS_L, default = 1'b1  */
    UINT32 dis_restart_shorttimer4w4rx2complete : 1;
    /* dis_restart_shorttimer4w4rx2complete - Bits[30:30], RWS_L, default = 1'b0  */
    UINT32 rsvd : 1;
    /* rsvd - Bits[31:31], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMDBG0_IIO_DFX_STRUCT;


/* RASCAPREG_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x4013842C)                                                  */
/*       SKX (0x4013842C)                                                     */
/* Register default value:              0x3FFFFFFF                            */
#define RASCAPREG_IIO_DFX_REG 0x1200442C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x42c
 */
typedef union {
  struct {
    UINT32 rascapability : 30;
    /* rascapability - Bits[29:0], ROS_V, default = 30'b111111111111111111111111111111 
       1
     */
    UINT32 enpmtimeout : 1;
    /* enpmtimeout - Bits[30:30], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbg_mux_en : 1;
    /* dbg_mux_en - Bits[31:31], RWS_L, default = 1'b0 
       Turns on the debug muxes (clocks, etc).
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} RASCAPREG_IIO_DFX_STRUCT;


/* XPPGESTAT_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138430)                                                  */
/*       SKX (0x40138430)                                                     */
/* Register default value:              0x00000000                            */
#define XPPGESTAT_IIO_DFX_REG 0x12004430
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x430
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 20;
    /* rsvd_0 - Bits[19:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 clrcmperr : 1;
    /* clrcmperr - Bits[20:20], RWS_L, default = 1'b0 
       Clears compliance mode error counter.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_21 : 11;
    /* rsvd_21 - Bits[31:21], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPPGESTAT_IIO_DFX_STRUCT;


/* COMERRCNT_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138434)                                                  */
/*       SKX (0x40138434)                                                     */
/* Register default value:              0x00000000                            */
#define COMERRCNT_IIO_DFX_REG 0x12004434
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x434
 */
typedef union {
  struct {
    UINT32 errcnt : 32;
    /* errcnt - Bits[31:0], RWS_LV, default = 32'b00000000000000000000000000000000 
       Compliance mode error counter.
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} COMERRCNT_IIO_DFX_STRUCT;


/* FSLFVAL_REG_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138438)                                                  */
/*       SKX (0x40138438)                                                     */
/* Register default value:              0x0002057F                            */
#define FSLFVAL_REG_IIO_DFX_REG 0x12004438
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x438
 */
typedef union {
  struct {
    UINT32 fseqvalreg : 6;
    /* fseqvalreg - Bits[5:0], RWS_L, default = 6'b111111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 lfeqvalreg : 6;
    /* lfeqvalreg - Bits[11:6], RWS_L, default = 6'b010101 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 fsthreshold : 6;
    /* fsthreshold - Bits[17:12], RWS_L, default = 6'b100000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 14;
    /* rsvd - Bits[31:18], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} FSLFVAL_REG_IIO_DFX_STRUCT;


/* XPRBDBG00_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138448)                                                  */
/*       SKX (0x40138448)                                                     */
/* Register default value:              0x00000000                            */
#define XPRBDBG00_IIO_DFX_REG 0x12004448
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x448
 */
typedef union {
  struct {
    UINT32 l2cc_dbg_rbuf : 32;
    /* l2cc_dbg_rbuf - Bits[31:0], RO_V, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} XPRBDBG00_IIO_DFX_STRUCT;


/* XPRBDBG10_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x4013844C)                                                  */
/*       SKX (0x4013844C)                                                     */
/* Register default value:              0x00000000                            */
#define XPRBDBG10_IIO_DFX_REG 0x1200444C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x44c
 */
typedef union {
  struct {
    UINT32 l2cc_dbg_rbuf : 32;
    /* l2cc_dbg_rbuf - Bits[31:0], RO_V, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} XPRBDBG10_IIO_DFX_STRUCT;


/* XPRBDBG20_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138450)                                                  */
/*       SKX (0x40138450)                                                     */
/* Register default value:              0x00000000                            */
#define XPRBDBG20_IIO_DFX_REG 0x12004450
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x450
 */
typedef union {
  struct {
    UINT32 l2cc_dbg_rbuf : 8;
    /* l2cc_dbg_rbuf - Bits[7:0], RO_V, default = 8'b00000000  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPRBDBG20_IIO_DFX_STRUCT;


/* XPCBPHDELS0_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138454)                                                  */
/*       SKX (0x40138454)                                                     */
/* Register default value:              0x00000000                            */
#define XPCBPHDELS0_IIO_DFX_REG 0x12004454
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register selects which set of debug event are available from this cluster 
 * for both display on the debug ring and for use in performance monitoring. Which 
 * set of debug events is selected is controllable on a lane-by-lane basis, meaning 
 * that each 8-bit lane can have a different set of debug events selected from any 
 * other lane. 
 */
typedef union {
  struct {
    UINT32 dbglnsel0 : 6;
    /* dbglnsel0 - Bits[5:0], RWS_L, default = 6'b000000 
       Selects the source for byte lane 8 of the Cluster Debug Bus from each 
       DebugEv_set. 
       000000: Byte lane 0 of Debug signal set 0
       000001: Byte lane 0 of Debug signal set 1
       ---
       111111: Byte lane 0 of Debug signal set 63
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbglnsel1 : 6;
    /* dbglnsel1 - Bits[11:6], RWS_L, default = 6'b000000 
       Selects the source for byte lane 8 of the Cluster Debug Bus from each 
       DebugEv_set. 
       000000: Byte lane 1 of Debug signal set 0
       000001: Byte lane 1 of Debug signal set 1
       ---
       111111: Byte lane 1 of Debug signal set 63
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbglnsel2 : 6;
    /* dbglnsel2 - Bits[17:12], RWS_L, default = 6'b000000 
       Selects the source for byte lane 8 of the Cluster Debug Bus from each 
       DebugEv_set. 
       000000: Byte lane 2 of Debug signal set 0
       000001: Byte lane 2 of Debug signal set 1
       ---
       111111: Byte lane 2 of Debug signal set 63
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbglnsel3 : 6;
    /* dbglnsel3 - Bits[23:18], RWS_L, default = 6'b000000 
       Selects the source for byte lane 8 of the Cluster Debug Bus from each 
       DebugEv_set. 
       000000: Byte lane 3 of Debug signal set 0
       000001: Byte lane 3 of Debug signal set 1
       ---
       111111: Byte lane 3 of Debug signal set 63
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbglnsel4 : 6;
    /* dbglnsel4 - Bits[29:24], RWS_L, default = 6'b000000 
       Selects the source for byte lane 8 of the Cluster Debug Bus from each 
       DebugEv_set. 
       000000: Byte lane 4 of Debug signal set 0
       000001: Byte lane 4 of Debug signal set 1
       ---
       111111: Byte lane 4 of Debug signal set 63
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPCBPHDELS0_IIO_DFX_STRUCT;


/* XPCBPHDELS1_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138458)                                                  */
/*       SKX (0x40138458)                                                     */
/* Register default value:              0x00000000                            */
#define XPCBPHDELS1_IIO_DFX_REG 0x12004458
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register selects which set of debug event are available from this cluster 
 * for both display on the debug ring and for use in performance monitoring. Which 
 * set of debug events is selected is controllable on a lane-by-lane basis, meaning 
 * that each 8-bit lane can have a different set of debug events selected from any 
 * other lane. 
 */
typedef union {
  struct {
    UINT32 dbglnsel5 : 6;
    /* dbglnsel5 - Bits[5:0], RWS_L, default = 6'b000000 
       Selects the source for byte lane 5 of the Cluster Debug Bus from each 
       DebugEv_set. 
       000000: Byte lane 5 of Debug signal set 0
       000001: Byte lane 5 of Debug signal set 1
       ---
       111111: Byte lane 5 of Debug signal set 63
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbglnsel6 : 6;
    /* dbglnsel6 - Bits[11:6], RWS_L, default = 6'b000000 
       Selects the source for byte lane 6 of the Cluster Debug Bus from each 
       DebugEv_set. 
       000000: Byte lane 6 of Debug signal set 0
       000001: Byte lane 6 of Debug signal set 1
       ---
       111111: Byte lane 6 of Debug signal set 63
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbglnsel7 : 6;
    /* dbglnsel7 - Bits[17:12], RWS_L, default = 6'b000000 
       Selects the source for byte lane 7 of the Cluster Debug Bus from each 
       DebugEv_set. 
       000000: Byte lane 7 of Debug signal set 0
       000001: Byte lane 7 of Debug signal set 1
       ---
       111111: Byte lane 7 of Debug signal set 63
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbglnsel8 : 6;
    /* dbglnsel8 - Bits[23:18], RWS_L, default = 6'b000000 
       Selects the source for byte lane 8 of the Cluster Debug Bus from each 
       DebugEv_set. 
       000000: Byte lane 8 of Debug signal set 0
       000001: Byte lane 8 of Debug signal set 1
       ---
       111111: Byte lane 8 of Debug signal set 63
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 7;
    /* rsvd - Bits[30:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 afe_tracebus_en : 1;
    /* afe_tracebus_en - Bits[31:31], RWS_L, default = 1'b0 
       If 0, masks out the afe_tracebus_data input to the debug muxes (concerns over 
       determinism). 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} XPCBPHDELS1_IIO_DFX_STRUCT;


/* PCIE_LANE_MASK_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x2013845C)                                                  */
/*       SKX (0x2013845C)                                                     */
/* Register default value:              0x0000                                */
#define PCIE_LANE_MASK_IIO_DFX_REG 0x1200245C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x45c
 */
typedef union {
  struct {
    UINT16 lane_mask : 16;
    /* lane_mask - Bits[15:0], RWS_L, default = 16'b0000000000000000 
       This register is used by bios to mask individual lanes within the port 0, during 
       link training. A 1 in a bit indicates the corresponding lane is masked during 
       link training i.e. the lane will not be included in the link width negotiation 
       process. Software flow is that software will set the appropriate bits in this 
       register and then set the link retrain bit in the DEVCTRL register, of the 
       appropriate root port. 
       Note that this register does not control port bifurcation but rather controls 
       which lanes are included in link retraining within a bifurcated port. For 
       example, if Port 2 is already bifurcated to be two x8, and software wants to run 
       the upper x8 port in x2 width, then it would set, say, bits 15:10 in this 
       register and then set the link retrain bit in Device#2 root port. The upper x8 
       port would then train to a x2 on the lower two lanes of the x8 i.e. lanes 9:8. 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT16 Data;
} PCIE_LANE_MASK_IIO_DFX_STRUCT;


/* CLSPHYCTL0_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138460)                                                  */
/*       SKX (0x40138460)                                                     */
/* Register default value:              0x00000000                            */
#define CLSPHYCTL0_IIO_DFX_REG 0x12004460
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x460
 */
typedef union {
  struct {
    UINT32 ovrdlfsrseedg3 : 32;
    /* ovrdlfsrseedg3 - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} CLSPHYCTL0_IIO_DFX_STRUCT;


/* CLSPHYCTL1_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138464)                                                  */
/*       SKX (0x40138464)                                                     */
/* Register default value:              0x0070B463                            */
#define CLSPHYCTL1_IIO_DFX_REG 0x12004464
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x464
 */
typedef union {
  struct {
    UINT32 force_2time_calibration : 1;
    /* force_2time_calibration - Bits[0:0], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 force_3time_calibration : 1;
    /* force_3time_calibration - Bits[1:1], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 force_bypass_calibration : 1;
    /* force_bypass_calibration - Bits[2:2], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 calibration_time_in64us : 4;
    /* calibration_time_in64us - Bits[6:3], RWS_L, default = 4'b1100 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 speedchangetime_constin4us : 6;
    /* speedchangetime_constin4us - Bits[12:7], RWS_L, default = 6'b101000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 speedchangetime_gen3in1us : 6;
    /* speedchangetime_gen3in1us - Bits[18:13], RWS_L, default = 6'b000101 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 icompcalib_time_in64us : 4;
    /* icompcalib_time_in64us - Bits[22:19], RWS_L, default = 4'b1110 
       1
     */
    UINT32 oneus_timer_value : 9;
    /* oneus_timer_value - Bits[31:23], RWS_L, default = 9'b000000000 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} CLSPHYCTL1_IIO_DFX_STRUCT;


/* CLSPHYCTL2_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138468)                                                  */
/*       SKX (0x40138468)                                                     */
/* Register default value:              0x000007D0                            */
#define CLSPHYCTL2_IIO_DFX_REG 0x12004468
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x468
 */
typedef union {
  struct {
    UINT32 receiverdetecttime : 16;
    /* receiverdetecttime - Bits[15:0], RWS_L, default = 16'b0000011111010000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 ocdonestatus : 16;
    /* ocdonestatus - Bits[31:16], RW1CS, default = 16'b0000000000000000 
       This field is used only by Port 0 (DMI Device 6 Function 0). It is RO for other 
       ports (Device 6 Function 1-6 and Device 7 Function 0-3). 
     */
  } Bits;
  UINT32 Data;
} CLSPHYCTL2_IIO_DFX_STRUCT;


/* CLSPHYCTL3_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x4013846C)                                                  */
/*       SKX (0x4013846C)                                                     */
/* Register default value:              0x005E5E5E                            */
#define CLSPHYCTL3_IIO_DFX_REG 0x1200446C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x46c
 */
typedef union {
  struct {
    UINT32 gen1dc_nfts : 8;
    /* gen1dc_nfts - Bits[7:0], RWS_L, default = 8'b01011110 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 gen2dc_nfts : 8;
    /* gen2dc_nfts - Bits[15:8], RWS_L, default = 8'b01011110 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 gen3dc_nfts : 8;
    /* gen3dc_nfts - Bits[23:16], RWS_L, default = 8'b01011110 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 reinitiate_calibration : 1;
    /* reinitiate_calibration - Bits[24:24], RW_LV, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 7;
    /* rsvd - Bits[31:25], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CLSPHYCTL3_IIO_DFX_STRUCT;


/* CLSPHYCTL4_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138470)                                                  */
/*       SKX (0x40138470)                                                     */
/* Register default value:              0x000F2F1E                            */
#define CLSPHYCTL4_IIO_DFX_REG 0x12004470
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x470
 */
typedef union {
  struct {
    UINT32 gen1_nfts : 8;
    /* gen1_nfts - Bits[7:0], RWS_L, default = 8'b00011110 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 gen2_nfts : 8;
    /* gen2_nfts - Bits[15:8], RWS_L, default = 8'b00101111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 gen3_nfts : 8;
    /* gen3_nfts - Bits[23:16], RWS_L, default = 8'b00001111 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CLSPHYCTL4_IIO_DFX_STRUCT;


/* CLSPHYCTL5_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138474)                                                  */
/*       SKX (0x40138474)                                                     */
/* Register default value:              0x01700251                            */
#define CLSPHYCTL5_IIO_DFX_REG 0x12004474
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x474
 */
typedef union {
  struct {
    UINT32 gen1sos_inter_val : 11;
    /* gen1sos_inter_val - Bits[10:0], RWS_L, default = 11'b01001010001 
       In Functional mode: used only for Gen1/2 and it's always 2 symbols time per 
       count. 
       For GDXC: used for GDXC training mode irrespective of Gen speed, which is 2 
       symbols time per count 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 5;
    /* rsvd - Bits[15:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 gen3sos_inter_val : 16;
    /* gen3sos_inter_val - Bits[31:16], RWS_L, default = 16'b0000000101110000 
       In Functional mode: used only for Gen3 and it's always 16 symbols time per count
       For GDXC: used for GDXC data mode irrespective of Gen speed, which is 16 symbols 
       time per count. 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} CLSPHYCTL5_IIO_DFX_STRUCT;


/* CLSPHYCTL6_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138478)                                                  */
/*       SKX (0x40138478)                                                     */
/* Register default value:              0x42F1FE00                            */
#define CLSPHYCTL6_IIO_DFX_REG 0x12004478
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x478
 */
typedef union {
  struct {
    UINT32 dskindexmsk : 18;
    /* dskindexmsk - Bits[17:0], RWS_L, default = 18'b011111111000000000  */
    UINT32 dis_reccfg2recidle_ontoing3 : 1;
    /* dis_reccfg2recidle_ontoing3 - Bits[18:18], RWS_L, default = 1'b0  */
    UINT32 dis_uniphyrxrst4l0inferei : 1;
    /* dis_uniphyrxrst4l0inferei - Bits[19:19], RWS_L, default = 1'b0  */
    UINT32 dis_uniphyrxrst4recspdinferei : 1;
    /* dis_uniphyrxrst4recspdinferei - Bits[20:20], RWS_L, default = 1'b1  */
    UINT32 dis_uniphyrxrst4detectrecombine : 1;
    /* dis_uniphyrxrst4detectrecombine - Bits[21:21], RWS_L, default = 1'b1  */
    UINT32 dis_recspeedexit2w4bitlock1state : 1;
    /* dis_recspeedexit2w4bitlock1state - Bits[22:22], RWS_L, default = 1'b1  */
    UINT32 dis_check4sqexit : 1;
    /* dis_check4sqexit - Bits[23:23], RWS_L, default = 1'b1  */
    UINT32 recspdbitlock1toms : 4;
    /* recspdbitlock1toms - Bits[27:24], RWS_L, default = 4'b0010  */
    UINT32 en_ph3eval_256loopsonly : 1;
    /* en_ph3eval_256loopsonly - Bits[28:28], RWS_L, default = 1'b0  */
    UINT32 ph3eval_256loopcount : 2;
    /* ph3eval_256loopcount - Bits[30:29], RWS_L, default = 2'b10  */
    UINT32 en_indeppull4reccomplete : 1;
    /* en_indeppull4reccomplete - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} CLSPHYCTL6_IIO_DFX_STRUCT;


/* CLSPHYCTL7_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x4013847C)                                                  */
/*       SKX (0x4013847C)                                                     */
/* Register default value:              0x244DFE00                            */
#define CLSPHYCTL7_IIO_DFX_REG 0x1200447C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x47c
 */
typedef union {
  struct {
    UINT32 dskindexmsk : 18;
    /* dskindexmsk - Bits[17:0], RWS_L, default = 18'b011111111000000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dskwfulloverride : 1;
    /* dskwfulloverride - Bits[18:18], RWS_L, default = 1'b1  */
    UINT32 disuplpbk : 1;
    /* disuplpbk - Bits[19:19], RWS_L, default = 1'b1  */
    UINT32 enskpeil0 : 1;
    /* enskpeil0 - Bits[20:20], RWS_L, default = 1'b0  */
    UINT32 send_gt32ts2 : 1;
    /* send_gt32ts2 - Bits[21:21], RWS_L, default = 1'b0  */
    UINT32 en_rec_speed_anylane_eios : 1;
    /* en_rec_speed_anylane_eios - Bits[22:22], RWS_L, default = 1'b1  */
    UINT32 en_rec_cfg_sym4_change : 1;
    /* en_rec_cfg_sym4_change - Bits[23:23], RWS_L, default = 1'b0  */
    UINT32 lb_ebdiscardskp_threshold : 4;
    /* lb_ebdiscardskp_threshold - Bits[27:24], RW_L, default = 4'b0100 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 lb_ebinit_seperation : 4;
    /* lb_ebinit_seperation - Bits[31:28], RW_L, default = 4'b0010 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} CLSPHYCTL7_IIO_DFX_STRUCT;


/* CLSPHYCTL8_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138480)                                                  */
/*       SKX (0x40138480)                                                     */
/* Register default value:              0xA6000FE2                            */
#define CLSPHYCTL8_IIO_DFX_REG 0x12004480
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x480
 */
typedef union {
  struct {
    UINT32 disable_blkcheck_failed_once : 1;
    /* disable_blkcheck_failed_once - Bits[0:0], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 enable_eiestrackfsm : 1;
    /* enable_eiestrackfsm - Bits[1:1], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_g3dvalid_beforeblklck : 1;
    /* en_g3dvalid_beforeblklck - Bits[2:2], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_lbslave_w4kalignlck : 1;
    /* dis_lbslave_w4kalignlck - Bits[3:3], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dis_2skpsing3lpbk : 1;
    /* dis_2skpsing3lpbk - Bits[4:4], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 spare1 : 4;
    /* spare1 - Bits[8:5], RWS_L, default = 4'b1111  */
    UINT32 rxsqexitw4alllanes : 1;
    /* rxsqexitw4alllanes - Bits[9:9], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_ltidlestate2rxl0s : 1;
    /* en_ltidlestate2rxl0s - Bits[10:10], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 indep_pull_rec_l0s : 1;
    /* indep_pull_rec_l0s - Bits[11:11], RWS_L, default = 1'b1 
       0: Do not pull data from elastic buffers.
       1: Pull data from elastic buffers.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 disable_kalign : 1;
    /* disable_kalign - Bits[12:12], RWS_L, default = 1'b0 
       0: K-align enable
       1: K-align disable
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbl_ts_send : 1;
    /* dbl_ts_send - Bits[13:13], RWS_L, default = 1'b0 
       0: Send the standard quantity of TS sets.
       1: Send 2x the number of TS sets. Except for polling.active.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 spare0 : 5;
    /* spare0 - Bits[18:14], RWS_L, default = 5'b00000 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 split_in_polling : 1;
    /* split_in_polling - Bits[19:19], RWS_L, default = 1'b0 
       0: Split the LTSSM in detect, based on ports activating at a different times
       1: Split the LTSSM in polling based on when data is received on the different 
       lanes 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 idlefrxd : 1;
    /* idlefrxd - Bits[20:20], RWS_L, default = 1'b0 
       0: Do not use 'exitei'
       1: Use 'exitei' signal to override rcv_detect.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 endynlnk : 1;
    /* endynlnk - Bits[21:21], RWS_L, default = 1'b0 
       Enables the dynamic auto-negotiating with re-splitting or re-combining of the 
       LTSSM. 
       0: Disable dynamic auto-neg
       1: Enable dynamic auto-neg
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 spldet : 1;
    /* spldet - Bits[22:22], RWS_L, default = 1'b0 
       0: Enable LTSSM splitting
       1: Disable LTSSM splitting
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 discomp : 1;
    /* discomp - Bits[23:23], RWS_L, default = 1'b0 
       0: Enable loopback skip compensation
       1: Disable loopback skip compensation
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 disrec2cfgalgn : 1;
    /* disrec2cfgalgn - Bits[24:24], RWS_L, default = 1'b0 
       0: Reset kalign on recovery to cfg transition.
       1: Don't reset kalign on recovery to cfg transition.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 enrecalgn : 1;
    /* enrecalgn - Bits[25:25], RWS_L, default = 1'b1 
       0: Don't reset kalign in recovery.
       1: Reset kalign in recovery.
       Notes:
       Locked by DBGBUSLCK
       
     */
    UINT32 loadgensup : 1;
    /* loadgensup - Bits[26:26], RWS_L, default = 1'b1 
       TX Loadgen SuppressSetting this bit prevents the Tx of the lane that was already 
       up in an up-config situation from getting re-synced by suppressing the 
       opxploadgen signal, otherwise a re-sync will occur. 
       Notes:
       if this bit is set = 0, the re-sync of the Tx in the lane that was still up may 
       potentially cause a bit slip and loss of symbol lock in the far-end device for 
       that lane. 
       Affects AFE signal called: opxploadgenen
       Locked by DBGBUSLCK
     */
    UINT32 lnknumtightcheck : 1;
    /* lnknumtightcheck - Bits[27:27], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 delaybankchange : 1;
    /* delaybankchange - Bits[28:28], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 cldatainsq : 1;
    /* cldatainsq - Bits[29:29], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 drcchangel0s : 1;
    /* drcchangel0s - Bits[30:30], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 gate_on_all_queues : 1;
    /* gate_on_all_queues - Bits[31:31], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} CLSPHYCTL8_IIO_DFX_STRUCT;


/* CLSPHYCTL9_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138484)                                                  */
/*       SKX (0x40138484)                                                     */
/* Register default value:              0x0025004D                            */
#define CLSPHYCTL9_IIO_DFX_REG 0x12004484
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x484
 */
typedef union {
  struct {
    UINT32 gen1sos_sris_inter_val : 11;
    /* gen1sos_sris_inter_val - Bits[10:0], RWS_L, default = 11'b00001001101 
       Notes: SRIS interval timer for Gen1/2
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 5;
    /* rsvd - Bits[15:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 gen3sos_sris_inter_val : 16;
    /* gen3sos_sris_inter_val - Bits[31:16], RWS_L, default = 16'b0000000000100101 
       Notes: SRIS interval timer for Gen3
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} CLSPHYCTL9_IIO_DFX_STRUCT;


/* CLSPHYCTL10_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138488)                                                  */
/*       SKX (0x40138488)                                                     */
/* Register default value:              0x00000000                            */
#define CLSPHYCTL10_IIO_DFX_REG 0x12004488
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x488
 */
typedef union {
  struct {
    UINT32 l1exit_sris_eito : 8;
    /* l1exit_sris_eito - Bits[7:0], RWS_L, default = 8'b00000000 
       Notes: L1 exit time in SRIS mode
       Locked by DBGBUSLCK
     */
    UINT32 rec_exit_sris_eito : 8;
    /* rec_exit_sris_eito - Bits[15:8], RWS_L, default = 8'b00000000 
       Notes: Recovery exit time in SRIS mode
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CLSPHYCTL10_IIO_DFX_STRUCT;


/* PRTPHYCTL_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x4013848C)                                                  */
/*       SKX (0x4013848C)                                                     */
/* Register default value:              0x04020000                            */
#define PRTPHYCTL_IIO_DFX_REG 0x1200448C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x48c
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 16;
    /* rsvd_0 - Bits[15:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 forcelnkingen2 : 1;
    /* forcelnkingen2 - Bits[16:16], RWS_L, default = 1'b0 
       0: Do not force gen2
       1: Force gen2 mode
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 contdeskew : 1;
    /* contdeskew - Bits[17:17], RWS_L, default = 1'b1 
       0: Disable dynamic deskew
       1: Enable dynamic deskew
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 cfgdeskewskp_g1g2 : 1;
    /* cfgdeskewskp_g1g2 - Bits[18:18], RWS_L, default = 1'b0 
       0: Do not select deskew
       1: Select deskew on SOS or TS in cfg.idle
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rcvrydeskewskp_g1g2 : 1;
    /* rcvrydeskewskp_g1g2 - Bits[19:19], RWS_L, default = 1'b0 
       0: Do not select deskew
       1: Select deskew on SOS or TS in recovery
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 csr_dmi_port : 1;
    /* csr_dmi_port - Bits[20:20], RWS_L, default = 1'b0 
       0: Do not operate link in DMI mode (DEFAULT for non DMI)
       1: Link operates in DMI mode (this results in a shorter detect TO and no rcv 
       detect) 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 wait_rcvrcfg_till_skp_sent : 1;
    /* wait_rcvrcfg_till_skp_sent - Bits[21:21], RWS_L, default = 1'b0 
       0: Don't wait for SKP to be sent before sending Rcvr config
       1: Send Rcvr config after SKP is sent
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 directed_spd_chg : 1;
    /* directed_spd_chg - Bits[22:22], RWS_L, default = 1'b0 
       This bit is not used.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 csr_disable_linkdown : 1;
    /* csr_disable_linkdown - Bits[23:23], RWS_L, default = 1'b0 
       0: Enable linkdown
       1: Disable linkdown
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 kalign_mode : 2;
    /* kalign_mode - Bits[25:24], RWS_L, default = 2'b00 
       00: Dynamic all the time
       01: Static K-align
       10: Dynamic up to L0.
       11: Static K-align
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 enable_gen3scram_inreutlm : 1;
    /* enable_gen3scram_inreutlm - Bits[26:26], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 cfgdeskewskp_g3 : 1;
    /* cfgdeskewskp_g3 - Bits[27:27], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rcvrydeskewskp_g3 : 1;
    /* rcvrydeskewskp_g3 - Bits[28:28], RWS_L, default = 1'b0 
       
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_29 : 2;
    /* rsvd_29 - Bits[30:29], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 forcelnkingen3 : 1;
    /* forcelnkingen3 - Bits[31:31], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} PRTPHYCTL_IIO_DFX_STRUCT;


/* PXPSQCNT_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x20138490)                                                  */
/*       SKX (0x20138490)                                                     */
/* Register default value:              0x0001                                */
#define PXPSQCNT_IIO_DFX_REG 0x12002490
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x490
 */
typedef union {
  struct {
    UINT16 sqcnt : 13;
    /* sqcnt - Bits[12:0], RWS_L, default = 13'b0000000000001 
       The core logic splits this register into two effective fields:
       The lower 5 bits [4:0] is the delay in milliseconds after reset before DETECT 
       should start in normal operation. (Default: 1h -> 1 ms) 
       The upper 8 bits [12:5] is the number of 4ns-cycles after reset before DETECT 
       should start in HVM mode. (Default: 0h -> 0 cycles) 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT16 rsvd : 3;
    /* rsvd - Bits[15:13], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} PXPSQCNT_IIO_DFX_STRUCT;


/* PXPPHYCTL2_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138498)                                                  */
/*       SKX (0x40138498)                                                     */
/* Register default value:              0x0007A1B8                            */
#define PXPPHYCTL2_IIO_DFX_REG 0x12004498
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x498
 */
typedef union {
  struct {
    UINT32 onems_timer_value : 19;
    /* onems_timer_value - Bits[18:0], RWS_L, default = 19'b1111010000110111000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_19 : 5;
    /* rsvd_19 - Bits[23:19], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 timer128us_short_en : 1;
    /* timer128us_short_en - Bits[24:24], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 ts_1024to16_send : 1;
    /* ts_1024to16_send - Bits[25:25], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_26 : 6;
    /* rsvd_26 - Bits[31:26], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPPHYCTL2_IIO_DFX_STRUCT;


/* PXPPHYCTL3_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x4013849C)                                                  */
/*       SKX (0x4013849C)                                                     */
/* Register default value:              0x00000000                            */
#define PXPPHYCTL3_IIO_DFX_REG 0x1200449C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x49c
 */
typedef union {
  struct {
    UINT32 last10_main_sm : 32;
    /* last10_main_sm - Bits[31:0], ROS_V, default = 32'b00000000000000000000000000000000 
       [3:0] being the current LTSSM main state
     */
  } Bits;
  UINT32 Data;
} PXPPHYCTL3_IIO_DFX_STRUCT;


/* PXPPHYCTL4_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x401384A0)                                                  */
/*       SKX (0x401384A0)                                                     */
/* Register default value:              0x00000000                            */
#define PXPPHYCTL4_IIO_DFX_REG 0x120044A0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4a0
 */
typedef union {
  struct {
    UINT32 last10_sub_sm : 32;
    /* last10_sub_sm - Bits[31:0], ROS_V, default = 32'b00000000000000000000000000000000 
       [3:0] being the current LTSSM sub state
     */
  } Bits;
  UINT32 Data;
} PXPPHYCTL4_IIO_DFX_STRUCT;


/* PXPPHYCTL5_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x401384A4)                                                  */
/*       SKX (0x401384A4)                                                     */
/* Register default value:              0x00000000                            */
#define PXPPHYCTL5_IIO_DFX_REG 0x120044A4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4a4
 */
typedef union {
  struct {
    UINT32 err_count : 20;
    /* err_count - Bits[19:0], RO_V, default = 20'b00000000000000000000 
       Decrements progressively to 0 if no errors seen over a prolonged time period.
     */
    UINT32 prologned_err : 4;
    /* prologned_err - Bits[23:20], RO_V, default = 4'b0000 
       Bit is set when the current error rate exceeds the set error threshold.
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPPHYCTL5_IIO_DFX_STRUCT;


/* PXPPHYCTL6_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x401384A8)                                                  */
/*       SKX (0x401384A8)                                                     */
/* Register default value:              0x0F000001                            */
#define PXPPHYCTL6_IIO_DFX_REG 0x120044A8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4a8
 */
typedef union {
  struct {
    UINT32 start_log : 1;
    /* start_log - Bits[0:0], RWS_L, default = 1'b1 
       0: Don't log the current ltssm transitions
       1: Start logging the ltssm transitions.
       When set to 1, we start logging the ltssm transitions in last10_main_sm and 
       Last10_sub_sm. 
       Notes:
       The transition of this bit from 0 to 1 will clear both the last10_main_sm and 
       the Last10_sub_sm logs. 
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 23;
    /* rsvd - Bits[23:1], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 phy_port_spare1 : 4;
    /* phy_port_spare1 - Bits[27:24], RWS_L, default = 4'b1111  */
    UINT32 phy_port_spare0 : 4;
    /* phy_port_spare0 - Bits[31:28], RWS_L, default = 4'b0000  */
  } Bits;
  UINT32 Data;
} PXPPHYCTL6_IIO_DFX_STRUCT;


/* DBG0STAT_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x401384AC)                                                  */
/*       SKX (0x401384AC)                                                     */
/* Register default value:              0x00000000                            */
#define DBG0STAT_IIO_DFX_REG 0x120044AC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4ac
 */
typedef union {
  struct {
    UINT32 furtrcvst : 16;
    /* furtrcvst - Bits[15:0], RWS_LV, default = 16'b0000000000000000 
       Furthest the receiver LTSSM state reached
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 15;
    /* rsvd - Bits[30:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 pdpinactivestatus : 1;
    /* pdpinactivestatus - Bits[31:31], RO_V, default = 1'b0  */
  } Bits;
  UINT32 Data;
} DBG0STAT_IIO_DFX_STRUCT;


/* DBG1STAT_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x401384B0)                                                  */
/*       SKX (0x401384B0)                                                     */
/* Register default value:              0x00000000                            */
#define DBG1STAT_IIO_DFX_REG 0x120044B0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4b0
 */
typedef union {
  struct {
    UINT32 obsport : 24;
    /* obsport - Bits[23:0], RO_V, default = 24'b000000000000000000000000 
       Contains the following internal signals from csgprlt_controller:
       bits [23:22] 00
       bit [21] gprlt2gprlr_lane_rev[port],
       bit [20] gprlt2gptgb_gen1_mode[port],
       bit [19] 0,
       bit [18] scram_bypass_ltssm_ff[port],
       bit [17] ctrl2lx_tx_sqexit[port],
       bit [16] gpp2lt_ok2exittxsq_p[port],
       bit [15] disable_gen2_port[port],
       bit [14] negotiated_speed_gen1[port],
       bit [13] link_num_part_port_padded[port],
       bit [12] link_num_full_port_padded[port],
       bit [11] lnk_up_padded[port],
       bits [10:8] cfg[port*3+:3],
       bits [7:4] ltssm_sub_sm_ff[port*4+:4],
       bits [3:0] ltssm_main_sm_ff[port*4+:4].
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DBG1STAT_IIO_DFX_STRUCT;


/* DBG2STAT_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x401384B4)                                                  */
/*       SKX (0x401384B4)                                                     */
/* Register default value:              0x00F00000                            */
#define DBG2STAT_IIO_DFX_REG 0x120044B4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4b4
 */
typedef union {
  struct {
    UINT32 obslane : 20;
    /* obslane - Bits[19:0], RO_V, default = 20'b00000000000000000000 
       [19]: bitslip happened in l0, on lane 3 (kalign2lt_bitslip)
       [18]: lconfigured lane 3 (gprlt2gprdb_configured_lanes)
       [17:15]: LSB 3 bits of rsm state machine for lane 3 (rcv_sm_ff[11:9])
       [14]: bitslip happened in l0, on lane 2 (kalign2lt_bitslip)
       [13]: lconfigured lane 2 (gprlt2gprdb_configured_lanes)
       [12:10]: LSB 3 bits of rsm state machine for lane2 (rcv_sm_ff[8:6])
       [9]: bitslip happened in l0, on lane 1 (kalign2lt_bitslip)
       [8]: lconfigured lane 1 (gprlt2gprdb_configured_lanes)
       [7:5]: LSB 3 bits of rsm state machine for lane 1 (rcv_sm_ff[5:3])
       [4]: bitslip happened in l0, on lane 0 (kalign2lt_bitslip)
       [3]: lconfigured lane 0 (gprlt2gprdb_configured_lanes)
       [2:0]: LSB 3 bits of rsm state machine for lane 0 (rcv_sm_ff[2:0])
     */
    UINT32 repcfgchange : 1;
    /* repcfgchange - Bits[20:20], RWS_L, default = 1'b1 
       0: Don't report width changes in link_status_register: Link Bandwidth Management 
       Status and in Link Autonomous Bandwidth Status 
       1: Report width changes in link_status_register: Link Bandwidth Management 
       Status and in Link Autonomous Bandwidth Status 
       Notes:
       Enabled at default
       Locked by DBGBUSLCK
     */
    UINT32 surlnkdownen : 1;
    /* surlnkdownen - Bits[21:21], RWS_L, default = 1'b1 
       0: Don't report surprise linkdown errors
       1: Report surprise linkdown errors
       Notes:
       Enabled at default
       Locked by DBGBUSLCK
     */
    UINT32 repspchange : 1;
    /* repspchange - Bits[22:22], RWS_L, default = 1'b1 
       0: Don't report speed changes in link_status_register: Link Bandwidth Management 
       Status and in Link Autonomous Bandwidth Status 
       1: Report speed changes in link_status_register: Link Bandwidth Management 
       Status and in Link Autonomous Bandwidth Status 
       Notes:
       Enabled at default
       Locked by DBGBUSLCK
     */
    UINT32 upcfgcapable : 1;
    /* upcfgcapable - Bits[23:23], RWS_L, default = 1'b1 
       0: Don't advertise upcfg capability
       1: Advertise upcfg capability
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 upconfiglane : 4;
    /* upconfiglane - Bits[27:24], RWS_L, default = 4'b0000 
       Selects lanes to be 'up' configured.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 disablegen2over : 1;
    /* disablegen2over - Bits[28:28], RWS_L, default = 1'b0 
       Disables gen2 even if target link speed state gen2
       0: Do not disable
       1: Disable Gen2.
     */
    UINT32 enterloop : 1;
    /* enterloop - Bits[29:29], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 disablegen3over : 1;
    /* disablegen3over - Bits[30:30], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
       For Port 0 (DMI Device 6 Function 0), this is RO and default is 1b
     */
    UINT32 rsvd : 1;
    /* rsvd - Bits[31:31], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DBG2STAT_IIO_DFX_STRUCT;


/* DBGCLST0_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x401384B8)                                                  */
/*       SKX (0x401384B8)                                                     */
/* Register default value:              0x8A410000                            */
#define DBGCLST0_IIO_DFX_REG 0x120044B8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4b8
 */
typedef union {
  struct {
    UINT32 obsltssm : 16;
    /* obsltssm - Bits[15:0], RO_V, default = 16'b0000000000000000 
       contains the following internal signals from csgprlt_controller:
       [15:8] 00h
       [7:5] gio_port_mode_eff_ff[2:0]
       [4:3] uncfg_x8_ff[1:0]
       [2:0] port_affinity_part[2:0]
     */
    UINT32 defrxtermdis : 1;
    /* defrxtermdis - Bits[16:16], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 xtalkchk : 1;
    /* xtalkchk - Bits[17:17], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 modifpollb : 1;
    /* modifpollb - Bits[18:18], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 extend_eiosseen_cnt_ing12 : 2;
    /* extend_eiosseen_cnt_ing12 - Bits[20:19], RWS_L, default = 2'b00 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 extend_eiosseen_cnt_ing3 : 2;
    /* extend_eiosseen_cnt_ing3 - Bits[22:21], RWS_L, default = 2'b10 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 txl0s_min_idle : 6;
    /* txl0s_min_idle - Bits[28:23], RWS_L, default = 6'b010100  */
    UINT32 dis_rstlnnumberondetectfix : 1;
    /* dis_rstlnnumberondetectfix - Bits[29:29], RWS_L, default = 1'b0  */
    UINT32 dis_infereifix4reccfgstate : 1;
    /* dis_infereifix4reccfgstate - Bits[30:30], RWS_L, default = 1'b0  */
    UINT32 dis_higher_time_inreccfginferei : 1;
    /* dis_higher_time_inreccfginferei - Bits[31:31], RWS_L, default = 1'b1  */
  } Bits;
  UINT32 Data;
} DBGCLST0_IIO_DFX_STRUCT;


/* DEBUGCLUSTER1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401384BC)                                                  */
/*       SKX (0x401384BC)                                                     */
/* Register default value:              0x08039075                            */
#define DEBUGCLUSTER1_IIO_DFX_REG 0x120044BC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4bc
 */
typedef union {
  struct {
    UINT32 leakagewa : 1;
    /* leakagewa - Bits[0:0], RWS_L, default = 1'b1  */
    UINT32 always2rcvdet : 1;
    /* always2rcvdet - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 eninfei : 1;
    /* eninfei - Bits[2:2], RWS_L, default = 1'b1  */
    UINT32 enperiodicexitei : 1;
    /* enperiodicexitei - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 recexiteito : 8;
    /* recexiteito - Bits[11:4], RWS_L, default = 8'b00000111  */
    UINT32 enforcedrec : 1;
    /* enforcedrec - Bits[12:12], RWS_L, default = 1'b1  */
    UINT32 send10bdataonerr : 1;
    /* send10bdataonerr - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 dbleiescount : 1;
    /* dbleiescount - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 enableeies : 1;
    /* enableeies - Bits[15:15], RWS_L, default = 1'b1  */
    UINT32 disgen2nogen2ts : 1;
    /* disgen2nogen2ts - Bits[16:16], RWS_L, default = 1'b1  */
    UINT32 flushebonrxclkoff : 1;
    /* flushebonrxclkoff - Bits[17:17], RWS_L, default = 1'b1  */
    UINT32 forcereconmissedsos : 1;
    /* forcereconmissedsos - Bits[18:18], RWS_L, default = 1'b0  */
    UINT32 l1exiteito : 8;
    /* l1exiteito - Bits[26:19], RWS_L, default = 8'b00000000  */
    UINT32 spare_signals : 5;
    /* spare_signals - Bits[31:27], RWS_L, default = 5'b00001  */
  } Bits;
  UINT32 Data;
} DEBUGCLUSTER1_IIO_DFX_STRUCT;


/* PXPDLLPCTRL0_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x401384C0)                                                  */
/*       SKX (0x401384C0)                                                     */
/* Register default value:              0x00318C7C                            */
#define PXPDLLPCTRL0_IIO_DFX_REG 0x120044C0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4c0
 */
typedef union {
  struct {
    UINT32 idle_fc_period : 5;
    /* idle_fc_period - Bits[4:0], RWS_L, default = 5'b11100 
       This is the time in which flow control updates are scheduled, if there are no 
       new credits to be received. If L0s is not disabled, this specifies the number of 
       us after which the flow control packet will be sent. For ports where L0s is 
       disabled, the timer value is calculated by multiplying this number by 256ns. The 
       timer has an accuracy of +-16 cycles. 
       Notes:
       A value of 0 is illegal.
       Locked by DBGBUSLCK
     */
    UINT32 fc_c_period : 5;
    /* fc_c_period - Bits[9:5], RWS_L, default = 5'b00011 
       This specifies the latency after which the flow control packet will be 
       scheduled. The latency starts from the time at which the credit release is 
       received by the link layer. For X16, the number of cycles is csr_period * 8 * 
       (gen1 ? 2 : 1). For X8 or X4, the number is scaled by 2; for X2, the number is 
       scaled by 4; and for x1, the number is scaled by 8 from the X16 number. The 
       timer has an accuracy for +- 8 cycles. 
       Notes:
       A value of 0 is illegal.
       Locked by DBGBUSLCK
     */
    UINT32 fc_np_period : 5;
    /* fc_np_period - Bits[14:10], RWS_L, default = 5'b00011 
       This specifies the latency after which the flow control packet will be 
       scheduled. The latency starts from the time at which the credit release is 
       received by the link layer. For X16, the number of cycles is csr_period * 8 * 
       (gen1 ? 2 : 1). For X8 or X4, the number is scaled by 2; for X2, the number is 
       scaled by 4; and for x1, the number is scaled by 8 from the X16 number. The 
       timer has an accuracy for +- 8 cycles. 
       Notes:
       A value of 0 is illegal.
       Locked by DBGBUSLCK
     */
    UINT32 fc_p_period : 5;
    /* fc_p_period - Bits[19:15], RWS_L, default = 5'b00011 
       This specifies the latency after which the flow control packet will be 
       scheduled. The latency starts from the time at which the credit release is 
       received by the link layer. For X16, the number of cycles is csr_period * 8 * 
       (gen1 ? 2 : 1). For X8 or X4, the number is scaled by 2; for X2, the number is 
       scaled by 4; and for x1, the number is scaled by 8 from the X16 number. The 
       timer has an accuracy for +- 8 cycles. 
       Notes:
       A value of 0 is illegal.
       Locked by DBGBUSLCK
     */
    UINT32 ack_period : 4;
    /* ack_period - Bits[23:20], RWS_L, default = 4'b0011 
       This specifies the latency after which a packet will be acked. The timer starts 
       running once it is internally received. For X16, the number of cycles is 
       csr_period * 8 * (gen1 ? 2 : 1). For X8 or X4, the number is scaled by 2; for 
       X2, the number is scaled by 4; and for x1, the number is scaled by 8 from the 
       X16 number. The timer has an accuracy for +- 8 cycles. 
       Notes:
       A value of 0 is illegal.
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPDLLPCTRL0_IIO_DFX_STRUCT;


/* PXPRETRYCTRL0_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401384C4)                                                  */
/*       SKX (0x401384C4)                                                     */
/* Register default value:              0x00020003                            */
#define PXPRETRYCTRL0_IIO_DFX_REG 0x120044C4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4c4
 */
typedef union {
  struct {
    UINT32 replay_timer : 6;
    /* replay_timer - Bits[5:0], RWS_L, default = 6'b000011 
       Specifies in us the time after which a replay will be initiated. Setting it to 0 
       will disable the timer. The timer has an accuracy of +-1us 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 unuseentrinrtrybuf : 9;
    /* unuseentrinrtrybuf - Bits[14:6], RWS_L, default = 9'b000000000 
       1
     */
    UINT32 reinit_threshold : 3;
    /* reinit_threshold - Bits[17:15], RWS_L, default = 3'b100 
       Specifies the number of retry attempts after which a recovery will be initiated.
       Notes:
       Locked by DBGBUSLCK
       Logic 0 is an illegal setting.
     */
    UINT32 rsvd : 14;
    /* rsvd - Bits[31:18], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPRETRYCTRL0_IIO_DFX_STRUCT;


/* PXPDBGBITSEL00_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401384C8)                                                  */
/*       SKX (0x401384C8)                                                     */
/* Register default value:              0x00000000                            */
#define PXPDBGBITSEL00_IIO_DFX_REG 0x120044C8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4c8
 */
typedef union {
  struct {
    UINT32 dbg_sig_bit_sel : 32;
    /* dbg_sig_bit_sel - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000 
       When a bit is set to 1, any changes in that bit will cause the debug signal to 
       be logged to the retry but if this functionality is enabled by setting the 
       dbg_sig_logging_en or if the link is down. Default values of these bits are 
       subject to change based on an analysis of what bits are the most relevant. 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} PXPDBGBITSEL00_IIO_DFX_STRUCT;


/* PXPDBGBITSEL10_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401384CC)                                                  */
/*       SKX (0x401384CC)                                                     */
/* Register default value:              0x00000000                            */
#define PXPDBGBITSEL10_IIO_DFX_REG 0x120044CC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4cc
 */
typedef union {
  struct {
    UINT32 dbg_sig_bit_sel : 32;
    /* dbg_sig_bit_sel - Bits[31:0], RWS_L, default = 32'b00000000000000000000000000000000 
       When a bit is set to 1, any changes in that bit will cause the debug signal to 
       be logged to the retry but if this functionality is enabled by setting the 
       dbg_sig_logging_en or if the link is down. Default values of these bits are 
       subject to change based on an analysis of what bits are the most relevant. 
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} PXPDBGBITSEL10_IIO_DFX_STRUCT;


/* PXPDBGBITSEL20_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401384D0)                                                  */
/*       SKX (0x401384D0)                                                     */
/* Register default value:              0x00000000                            */
#define PXPDBGBITSEL20_IIO_DFX_REG 0x120044D0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4d0
 */
typedef union {
  struct {
    UINT32 dbg_sig_bit_sel : 8;
    /* dbg_sig_bit_sel - Bits[7:0], RWS_L, default = 8'b00000000 
       When a bit is set to 1, any changes in that bit will cause the debug signal to 
       be logged to the retry buf if this functionality is enabled by setting the 
       dbg_sig_logging_en or if the link is down. Default values of these bits are 
       subject to change based on an analysis of what bits are the most relevant. 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 pdp_preserve : 1;
    /* pdp_preserve - Bits[8:8], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 pdp_mode : 2;
    /* pdp_mode - Bits[10:9], RWS_L, default = 2'b00 
       Places the link and physical layer in pass thru debug port mode. It just drives 
       the raw data coming from the transaction layer through the link. 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 21;
    /* rsvd - Bits[31:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPDBGBITSEL20_IIO_DFX_STRUCT;


/* PXPLNKMISC_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x401384DC)                                                  */
/*       SKX (0x401384DC)                                                     */
/* Register default value:              0x00FF0002                            */
#define PXPLNKMISC_IIO_DFX_REG 0x120044DC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4dc
 */
typedef union {
  struct {
    UINT32 dllpmlane : 1;
    /* dllpmlane - Bits[0:0], RWS_L, default = 1'b0 
       When set to 1, dllp's will start on lane 0 only. It will not be sent in a cycle 
       where the tlp is ending 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 edb_mode_en : 1;
    /* edb_mode_en - Bits[1:1], RWS_L, default = 1'b1 
       When set to 1, all packets which the transaction layer indicates are to be 
       dumped will have an EDB with them and the packets will be resent with the ep bit 
       set right after the EDB packet. when set to 0, the packet will be sent without 
       EP 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbg_sig_logging_en : 1;
    /* dbg_sig_logging_en - Bits[2:2], RWS_L, default = 1'b0 
       When enabled, the common block debug signals chosen based on the mux select 
       settings will be logged to the retry buffer. During this period the retry buffer 
       will be unusable and any retries that are initiated will result in unpredictable 
       results 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rd_retry_buf : 1;
    /* rd_retry_buf - Bits[3:3], RWS_L, default = 1'b0 
       1
     */
    UINT32 rd_nxt_dbg_entry : 1;
    /* rd_nxt_dbg_entry - Bits[4:4], RO, default = 1'b0 
       This bit will always return a 0 when read.
     */
    UINT32 dis_lmq_clock_gating : 1;
    /* dis_lmq_clock_gating - Bits[5:5], RWS, default = 1'b0 
       1
     */
    UINT32 rsvd : 10;
    /* rsvd - Bits[15:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 lnk_port_spare1 : 8;
    /* lnk_port_spare1 - Bits[23:16], RWS_L, default = 8'b11111111  */
    UINT32 lnk_port_spare0 : 8;
    /* lnk_port_spare0 - Bits[31:24], RWS_L, default = 8'b00000000  */
  } Bits;
  UINT32 Data;
} PXPLNKMISC_IIO_DFX_STRUCT;


/* PXPPMCTRL_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x201384E0)                                                  */
/*       SKX (0x201384E0)                                                     */
/* Register default value:              0x2006                                */
#define PXPPMCTRL_IIO_DFX_REG 0x120024E0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4e0
 */
typedef union {
  struct {
    UINT16 l1_idle_timer : 5;
    /* l1_idle_timer - Bits[4:0], RWS_L, default = 5'b00110 
       1
     */
    UINT16 rsvd_5 : 3;
    /* rsvd_5 - Bits[7:5], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 l0s_idle_timer : 4;
    /* l0s_idle_timer - Bits[11:8], RWS_L, default = 4'b0000 
       Indicates the amount of idle time in us after which an L0s transition will be 
       initiated. The timers have an accuracy of +-1us. A setting of 0 will disable L0s 
       transitions. This setting will increase the frequency at which the DLLP's are 
       issued to keep it under the spec limit of 7us of idle time. 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT16 use_cr_l0s_idle_timer : 1;
    /* use_cr_l0s_idle_timer - Bits[12:12], RWS_O, default = 1'b0  */
    UINT16 en_gen3_high_bw : 1;
    /* en_gen3_high_bw - Bits[13:13], RWS_L, default = 1'b1 
       ivt specific bit enables the higher b.w. while in gen3
     */
    UINT16 rsvd_14 : 2;
    /* rsvd_14 - Bits[15:14], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} PXPPMCTRL_IIO_DFX_STRUCT;


/* PXPCDTAVAIL0_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x401384E4)                                                  */
/*       SKX (0x401384E4)                                                     */
/* Register default value:              0x00000000                            */
#define PXPCDTAVAIL0_IIO_DFX_REG 0x120044E4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4e4
 */
typedef union {
  struct {
    UINT32 cdt_avail : 32;
    /* cdt_avail - Bits[31:0], RO_V, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} PXPCDTAVAIL0_IIO_DFX_STRUCT;


/* PXPCDTAVAIL1_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x401384E8)                                                  */
/*       SKX (0x401384E8)                                                     */
/* Register default value:              0x00000000                            */
#define PXPCDTAVAIL1_IIO_DFX_REG 0x120044E8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x4e8
 */
typedef union {
  struct {
    UINT32 cdt_avail : 28;
    /* cdt_avail - Bits[27:0], RO_V, default = 28'b0000000000000000000000000000  */
    UINT32 rsvd : 4;
    /* rsvd - Bits[31:28], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPCDTAVAIL1_IIO_DFX_STRUCT;


/* PSMICREDITREG0_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138500)                                                  */
/*       SKX (0x40138500)                                                     */
/* Register default value:              0x00000000                            */
#define PSMICREDITREG0_IIO_DFX_REG 0x12004500
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x500
 */
typedef union {
  struct {
    UINT32 prh_credit_used : 8;
    /* prh_credit_used - Bits[7:0], RW_LV, default = 8'b00000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 nprh_credit_used : 8;
    /* nprh_credit_used - Bits[15:8], RW_LV, default = 8'b00000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 nprh_credit_allocd : 8;
    /* nprh_credit_allocd - Bits[23:16], RW_LV, default = 8'b00000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 prh_credit_allocd : 8;
    /* prh_credit_allocd - Bits[31:24], RW_LV, default = 8'b00000000 
       
       Notes:
       Locked by SPARELCK
     */
  } Bits;
  UINT32 Data;
} PSMICREDITREG0_IIO_DFX_STRUCT;


/* PSMICREDITREG1_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138504)                                                  */
/*       SKX (0x40138504)                                                     */
/* Register default value:              0x00000000                            */
#define PSMICREDITREG1_IIO_DFX_REG 0x12004504
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x504
 */
typedef union {
  struct {
    UINT32 cplh_credit_used : 8;
    /* cplh_credit_used - Bits[7:0], RW_LV, default = 8'b00000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 cplh_credit_allocd : 8;
    /* cplh_credit_allocd - Bits[15:8], RW_LV, default = 8'b00000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PSMICREDITREG1_IIO_DFX_STRUCT;


/* PSMICREDITREG2_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138508)                                                  */
/*       SKX (0x40138508)                                                     */
/* Register default value:              0x00000000                            */
#define PSMICREDITREG2_IIO_DFX_REG 0x12004508
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x508
 */
typedef union {
  struct {
    UINT32 prd_credit_used : 12;
    /* prd_credit_used - Bits[11:0], RW_LV, default = 12'b000000000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 prd_credit_allocd : 12;
    /* prd_credit_allocd - Bits[23:12], RW_LV, default = 12'b000000000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PSMICREDITREG2_IIO_DFX_STRUCT;


/* PSMICREDITREG3_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x4013850C)                                                  */
/*       SKX (0x4013850C)                                                     */
/* Register default value:              0x00000000                            */
#define PSMICREDITREG3_IIO_DFX_REG 0x1200450C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x50c
 */
typedef union {
  struct {
    UINT32 nprd_credit_used : 12;
    /* nprd_credit_used - Bits[11:0], RW_LV, default = 12'b000000000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 nprd_credit_allocd : 12;
    /* nprd_credit_allocd - Bits[23:12], RW_LV, default = 12'b000000000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PSMICREDITREG3_IIO_DFX_STRUCT;


/* PSMICREDITREG4_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138510)                                                  */
/*       SKX (0x40138510)                                                     */
/* Register default value:              0x00000000                            */
#define PSMICREDITREG4_IIO_DFX_REG 0x12004510
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x510
 */
typedef union {
  struct {
    UINT32 cpld_credit_used : 12;
    /* cpld_credit_used - Bits[11:0], RW_LV, default = 12'b000000000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 cpld_credit_allocd : 12;
    /* cpld_credit_allocd - Bits[23:12], RW_LV, default = 12'b000000000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PSMICREDITREG4_IIO_DFX_STRUCT;


/* PSMISPAREREG1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138528)                                                  */
/*       SKX (0x40138528)                                                     */
/* Register default value:              0x00000000                            */
#define PSMISPAREREG1_IIO_DFX_REG 0x12004528
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x528
 */
typedef union {
  struct {
    UINT32 spare_reg_field : 16;
    /* spare_reg_field - Bits[15:0], RW_LV, default = 16'b0000000000000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PSMISPAREREG1_IIO_DFX_STRUCT;


/* DIOTAGAVAILPSMI1_IIO_DFX_REG supported on:                                 */
/*       SKX_A0 (0x4013853C)                                                  */
/*       SKX (0x4013853C)                                                     */
/* Register default value:              0x00000000                            */
#define DIOTAGAVAILPSMI1_IIO_DFX_REG 0x1200453C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x53c
 */
typedef union {
  struct {
    UINT32 tag_avail_arb42 : 16;
    /* tag_avail_arb42 - Bits[15:0], RW_LV, default = 16'b0000000000000000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 tag_avail_arb43 : 16;
    /* tag_avail_arb43 - Bits[31:16], RW_LV, default = 16'b0000000000000000 
       Notes:
       Locked by SPARELCK
     */
  } Bits;
  UINT32 Data;
} DIOTAGAVAILPSMI1_IIO_DFX_STRUCT;


/* DIOTAGAVAILPSMI_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x40138540)                                                  */
/*       SKX (0x40138540)                                                     */
/* Register default value:              0x00000000                            */
#define DIOTAGAVAILPSMI_IIO_DFX_REG 0x12004540
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x540
 */
typedef union {
  struct {
    UINT32 tag_avail_arb40 : 16;
    /* tag_avail_arb40 - Bits[15:0], RW_LV, default = 16'b0000000000000000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 tag_avail_arb41 : 16;
    /* tag_avail_arb41 - Bits[31:16], RW_LV, default = 16'b0000000000000000 
       Notes:
       Locked by SPARELCK
     */
  } Bits;
  UINT32 Data;
} DIOTAGAVAILPSMI_IIO_DFX_STRUCT;


/* PXPDLLCREDITREG10_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138544)                                                  */
/*       SKX (0x40138544)                                                     */
/* Register default value:              0x2FF0783C                            */
#define PXPDLLCREDITREG10_IIO_DFX_REG 0x12004544
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x544
 */
typedef union {
  struct {
    UINT32 swrf_num_prh_x4 : 8;
    /* swrf_num_prh_x4 - Bits[7:0], RWS_L, default = 8'b00111100  */
    UINT32 swrf_num_prh_x8 : 8;
    /* swrf_num_prh_x8 - Bits[15:8], RWS_L, default = 8'b01111000  */
    UINT32 swrf_num_prh_x16 : 8;
    /* swrf_num_prh_x16 - Bits[23:16], RWS_L, default = 8'b11110000  */
    UINT32 swrf_num_nprh_x4 : 8;
    /* swrf_num_nprh_x4 - Bits[31:24], RWS_L, default = 8'b00101111  */
  } Bits;
  UINT32 Data;
} PXPDLLCREDITREG10_IIO_DFX_STRUCT;


/* PXPDLLCREDITREG20_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138548)                                                  */
/*       SKX (0x40138548)                                                     */
/* Register default value:              0x00B0BC5E                            */
#define PXPDLLCREDITREG20_IIO_DFX_REG 0x12004548
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x548
 */
typedef union {
  struct {
    UINT32 swrf_num_nprh_x8 : 8;
    /* swrf_num_nprh_x8 - Bits[7:0], RWS_L, default = 8'b01011110  */
    UINT32 swrf_num_nprh_x16 : 8;
    /* swrf_num_nprh_x16 - Bits[15:8], RWS_L, default = 8'b10111100  */
    UINT32 swrf_num_prd_x4 : 12;
    /* swrf_num_prd_x4 - Bits[27:16], RWS_L, default = 12'b000010110000  */
    UINT32 rsvd : 4;
    /* rsvd - Bits[31:28], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPDLLCREDITREG20_IIO_DFX_STRUCT;


/* PXPDLLCREDITREG30_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x4013854C)                                                  */
/*       SKX (0x4013854C)                                                     */
/* Register default value:              0x002C0160                            */
#define PXPDLLCREDITREG30_IIO_DFX_REG 0x1200454C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x54c
 */
typedef union {
  struct {
    UINT32 swrf_num_prd_x8 : 12;
    /* swrf_num_prd_x8 - Bits[11:0], RWS_L, default = 12'b000101100000  */
    UINT32 swrf_num_prd_x16 : 12;
    /* swrf_num_prd_x16 - Bits[23:12], RWS_L, default = 12'b001011000000  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPDLLCREDITREG30_IIO_DFX_STRUCT;


/* PXPDLLCREDITREG40_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138550)                                                  */
/*       SKX (0x40138550)                                                     */
/* Register default value:              0x0000C006                            */
#define PXPDLLCREDITREG40_IIO_DFX_REG 0x12004550
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x550
 */
typedef union {
  struct {
    UINT32 swrf_num_nprd_x4 : 12;
    /* swrf_num_nprd_x4 - Bits[11:0], RWS_L, default = 12'b000000000110  */
    UINT32 swrf_num_nprd_x8 : 12;
    /* swrf_num_nprd_x8 - Bits[23:12], RWS_L, default = 12'b000000001100  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPDLLCREDITREG40_IIO_DFX_STRUCT;


/* PXPDLLCREDITREG50_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138554)                                                  */
/*       SKX (0x40138554)                                                     */
/* Register default value:              0x00000018                            */
#define PXPDLLCREDITREG50_IIO_DFX_REG 0x12004554
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x554
 */
typedef union {
  struct {
    UINT32 swrf_num_nprd_x16 : 12;
    /* swrf_num_nprd_x16 - Bits[11:0], RWS_L, default = 12'b000000011000  */
    UINT32 rsvd : 20;
    /* rsvd - Bits[31:12], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PXPDLLCREDITREG50_IIO_DFX_STRUCT;


/* LNKPSMICDTREG0_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138560)                                                  */
/*       SKX (0x40138560)                                                     */
/* Register default value:              0x00000000                            */
#define LNKPSMICDTREG0_IIO_DFX_REG 0x12004560
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x560
 */
typedef union {
  struct {
    UINT32 lnkp_hdr_cr_psmi : 8;
    /* lnkp_hdr_cr_psmi - Bits[7:0], RW_LV, default = 8'b00000000 
       Notes:
       Loaded on PSMI Capture event
       Locked by SPARELCK
     */
    UINT32 lnkp_data_cr_psmi : 12;
    /* lnkp_data_cr_psmi - Bits[19:8], RW_LV, default = 12'b000000000000 
       Notes:
       Loaded on PSMI Capture event
       Locked by SPARELCK
     */
    UINT32 lnk_nak_dllp_pending : 1;
    /* lnk_nak_dllp_pending - Bits[20:20], RW_LV, default = 1'b0  */
    UINT32 lnk_nak_mode : 1;
    /* lnk_nak_mode - Bits[21:21], RW_LV, default = 1'b0  */
    UINT32 lnk_all_pkts_ackd : 1;
    /* lnk_all_pkts_ackd - Bits[22:22], RW_LV, default = 1'b0  */
    UINT32 rsvd : 9;
    /* rsvd - Bits[31:23], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LNKPSMICDTREG0_IIO_DFX_STRUCT;


/* LNKPSMICDTREG1_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138564)                                                  */
/*       SKX (0x40138564)                                                     */
/* Register default value:              0x00000000                            */
#define LNKPSMICDTREG1_IIO_DFX_REG 0x12004564
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x564
 */
typedef union {
  struct {
    UINT32 lnknp_hdr_cr_psmi : 8;
    /* lnknp_hdr_cr_psmi - Bits[7:0], RW_LV, default = 8'b00000000 
       Notes:
       Loaded on PSMI Capture event
       Locked by SPARELCK
     */
    UINT32 lnknp_data_cr_psmi : 12;
    /* lnknp_data_cr_psmi - Bits[19:8], RW_LV, default = 12'b000000000000 
       Notes:
       Loaded on PSMI Capture event
       Locked by SPARELCK
     */
    UINT32 rsvd : 12;
    /* rsvd - Bits[31:20], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LNKPSMICDTREG1_IIO_DFX_STRUCT;


/* LNKPSMICDTREG2_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138568)                                                  */
/*       SKX (0x40138568)                                                     */
/* Register default value:              0x00000000                            */
#define LNKPSMICDTREG2_IIO_DFX_REG 0x12004568
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x568
 */
typedef union {
  struct {
    UINT32 lnkcpl_hdr_cr_psmi : 8;
    /* lnkcpl_hdr_cr_psmi - Bits[7:0], RW_LV, default = 8'b00000000 
       Notes:
       Loaded on PSMI Capture event
       Locked by SPARELCK
     */
    UINT32 lnkcpl_data_cr_psmi : 12;
    /* lnkcpl_data_cr_psmi - Bits[19:8], RW_LV, default = 12'b000000000000 
       Notes:
       Loaded on PSMI Capture event
       Locked by SPARELCK
     */
    UINT32 rsvd : 12;
    /* rsvd - Bits[31:20], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LNKPSMICDTREG2_IIO_DFX_STRUCT;


/* LNKPSMICDTREG12_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x40138590)                                                  */
/*       SKX (0x40138590)                                                     */
/* Register default value:              0x00000000                            */
#define LNKPSMICDTREG12_IIO_DFX_REG 0x12004590
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x590
 */
typedef union {
  struct {
    UINT32 lnk_exp_snum : 12;
    /* lnk_exp_snum - Bits[11:0], RW_LV, default = 12'b000000000000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 lnk_cur_snum : 12;
    /* lnk_cur_snum - Bits[23:12], RW_LV, default = 12'b000000000000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LNKPSMICDTREG12_IIO_DFX_STRUCT;


/* LNKPSMICDTREG13_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x40138594)                                                  */
/*       SKX (0x40138594)                                                     */
/* Register default value:              0x00000000                            */
#define LNKPSMICDTREG13_IIO_DFX_REG 0x12004594
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x594
 */
typedef union {
  struct {
    UINT32 lnk_snum_in_dllp : 12;
    /* lnk_snum_in_dllp - Bits[11:0], RW_LV, default = 12'b000000000000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 lnk_snum_arbfrm8 : 12;
    /* lnk_snum_arbfrm8 - Bits[23:12], RW_LV, default = 12'b000000000000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LNKPSMICDTREG13_IIO_DFX_STRUCT;


/* LNKPSMICDTREG14_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x40138598)                                                  */
/*       SKX (0x40138598)                                                     */
/* Register default value:              0x00000000                            */
#define LNKPSMICDTREG14_IIO_DFX_REG 0x12004598
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x598
 */
typedef union {
  struct {
    UINT32 lnk_rtry_ackd_seq : 12;
    /* lnk_rtry_ackd_seq - Bits[11:0], RW_LV, default = 12'b000000000000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 lnk_rtry_nxtsq : 12;
    /* lnk_rtry_nxtsq - Bits[23:12], RW_LV, default = 12'b000000000000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LNKPSMICDTREG14_IIO_DFX_STRUCT;


/* LNKPSMICDTREG15_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x4013859C)                                                  */
/*       SKX (0x4013859C)                                                     */
/* Register default value:              0x00000000                            */
#define LNKPSMICDTREG15_IIO_DFX_REG 0x1200459C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x59c
 */
typedef union {
  struct {
    UINT32 lnk_rtry_snum : 12;
    /* lnk_rtry_snum - Bits[11:0], RW_LV, default = 12'b000000000000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 20;
    /* rsvd - Bits[31:12], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LNKPSMICDTREG15_IIO_DFX_STRUCT;


/* LNKPSMINXTSEQ_NUM_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x401385A0)                                                  */
/*       SKX (0x401385A0)                                                     */
/* Register default value:              0x00000000                            */
#define LNKPSMINXTSEQ_NUM_IIO_DFX_REG 0x120045A0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5a0
 */
typedef union {
  struct {
    UINT32 lnkpsminxtseq_num : 12;
    /* lnkpsminxtseq_num - Bits[11:0], RW_LV, default = 12'b000000000000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 lnk_snum_in_tlp : 12;
    /* lnk_snum_in_tlp - Bits[23:12], RW_LV, default = 12'b000000000000 
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LNKPSMINXTSEQ_NUM_IIO_DFX_STRUCT;


/* LNKPSMISPAREREG1_IIO_DFX_REG supported on:                                 */
/*       SKX_A0 (0x401385A4)                                                  */
/*       SKX (0x401385A4)                                                     */
/* Register default value:              0x00000000                            */
#define LNKPSMISPAREREG1_IIO_DFX_REG 0x120045A4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5a4
 */
typedef union {
  struct {
    UINT32 spare_reg_field : 16;
    /* spare_reg_field - Bits[15:0], RW_LV, default = 16'b0000000000000000 
       
       Notes:
       Locked by SPARELCK
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LNKPSMISPAREREG1_IIO_DFX_STRUCT;


/* LTSSMFPLAOUT1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401385AC)                                                  */
/*       SKX (0x401385AC)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAOUT1_IIO_DFX_REG 0x120045AC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5ac
 */
typedef union {
  struct {
    UINT32 ltssm8_outp1_val : 18;
    /* ltssm8_outp1_val - Bits[17:0], RWS_L, default = 18'b000000000000000000  */
    UINT32 ltssm8_outp1_en : 9;
    /* ltssm8_outp1_en - Bits[26:18], RWS_L, default = 9'b000000000  */
    UINT32 rsvd : 5;
    /* rsvd - Bits[31:27], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAOUT1_IIO_DFX_STRUCT;


/* LTSSMFPLAMATCH1_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x401385B0)                                                  */
/*       SKX (0x401385B0)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMATCH1_IIO_DFX_REG 0x120045B0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5b0
 */
typedef union {
  struct {
    UINT32 ltssm8_match1_val : 24;
    /* ltssm8_match1_val - Bits[23:0], RWS_L, default = 24'b000000000000000000000000  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMATCH1_IIO_DFX_STRUCT;


/* LTSSMFPLAMASK1_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401385B4)                                                  */
/*       SKX (0x401385B4)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMASK1_IIO_DFX_REG 0x120045B4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5b4
 */
typedef union {
  struct {
    UINT32 ltssm8_mask1_val : 10;
    /* ltssm8_mask1_val - Bits[9:0], RWS_L, default = 10'b0000000000  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMASK1_IIO_DFX_STRUCT;


/* LTSSMFPLAOUT2_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401385B8)                                                  */
/*       SKX (0x401385B8)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAOUT2_IIO_DFX_REG 0x120045B8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5b8
 */
typedef union {
  struct {
    UINT32 ltssm8_outp2_val : 18;
    /* ltssm8_outp2_val - Bits[17:0], RWS_L, default = 18'b000000000000000000  */
    UINT32 ltssm8_outp2_en : 9;
    /* ltssm8_outp2_en - Bits[26:18], RWS_L, default = 9'b000000000  */
    UINT32 rsvd : 5;
    /* rsvd - Bits[31:27], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAOUT2_IIO_DFX_STRUCT;


/* LTSSMFPLAMATCH2_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x401385BC)                                                  */
/*       SKX (0x401385BC)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMATCH2_IIO_DFX_REG 0x120045BC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5bc
 */
typedef union {
  struct {
    UINT32 ltssm8_match2_val : 24;
    /* ltssm8_match2_val - Bits[23:0], RWS_L, default = 24'b000000000000000000000000  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMATCH2_IIO_DFX_STRUCT;


/* LTSSMFPLAMASK2_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401385C0)                                                  */
/*       SKX (0x401385C0)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMASK2_IIO_DFX_REG 0x120045C0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5c0
 */
typedef union {
  struct {
    UINT32 ltssm8_mask2_val : 10;
    /* ltssm8_mask2_val - Bits[9:0], RWS_L, default = 10'b0000000000  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMASK2_IIO_DFX_STRUCT;


/* LTSSMFPLAOUT3_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401385C4)                                                  */
/*       SKX (0x401385C4)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAOUT3_IIO_DFX_REG 0x120045C4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5c4
 */
typedef union {
  struct {
    UINT32 ltssm8_outp3_val : 18;
    /* ltssm8_outp3_val - Bits[17:0], RWS_L, default = 18'b000000000000000000  */
    UINT32 ltssm8_outp3_en : 9;
    /* ltssm8_outp3_en - Bits[26:18], RWS_L, default = 9'b000000000  */
    UINT32 rsvd : 5;
    /* rsvd - Bits[31:27], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAOUT3_IIO_DFX_STRUCT;


/* LTSSMFPLAMATCH3_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x401385C8)                                                  */
/*       SKX (0x401385C8)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMATCH3_IIO_DFX_REG 0x120045C8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5c8
 */
typedef union {
  struct {
    UINT32 ltssm8_match3_val : 24;
    /* ltssm8_match3_val - Bits[23:0], RWS_L, default = 24'b000000000000000000000000  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMATCH3_IIO_DFX_STRUCT;


/* LTSSMFPLAMASK3_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401385CC)                                                  */
/*       SKX (0x401385CC)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMASK3_IIO_DFX_REG 0x120045CC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5cc
 */
typedef union {
  struct {
    UINT32 ltssm8_mask3_val : 10;
    /* ltssm8_mask3_val - Bits[9:0], RWS_L, default = 10'b0000000000  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMASK3_IIO_DFX_STRUCT;


/* LTSSMCTLFREERUNCNT_IIO_DFX_REG supported on:                               */
/*       SKX_A0 (0x401385D0)                                                  */
/*       SKX (0x401385D0)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMCTLFREERUNCNT_IIO_DFX_REG 0x120045D0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5d0
 */
typedef union {
  struct {
    UINT32 spdfail_32ms_freeruncnt : 24;
    /* spdfail_32ms_freeruncnt - Bits[23:0], RO_V, default = 24'b000000000000000000000000  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMCTLFREERUNCNT_IIO_DFX_STRUCT;


/* LTSSMFPLAOUT4_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401385D4)                                                  */
/*       SKX (0x401385D4)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAOUT4_IIO_DFX_REG 0x120045D4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5d4
 */
typedef union {
  struct {
    UINT32 ltssm8_outp4_val : 18;
    /* ltssm8_outp4_val - Bits[17:0], RWS_L, default = 18'b000000000000000000  */
    UINT32 ltssm8_outp4_en : 9;
    /* ltssm8_outp4_en - Bits[26:18], RWS_L, default = 9'b000000000  */
    UINT32 rsvd : 5;
    /* rsvd - Bits[31:27], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAOUT4_IIO_DFX_STRUCT;


/* LTSSMFPLAMATCH4_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x401385D8)                                                  */
/*       SKX (0x401385D8)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMATCH4_IIO_DFX_REG 0x120045D8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5d8
 */
typedef union {
  struct {
    UINT32 ltssm8_match4_val : 24;
    /* ltssm8_match4_val - Bits[23:0], RWS_L, default = 24'b000000000000000000000000  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMATCH4_IIO_DFX_STRUCT;


/* LTSSMFPLAMASK4_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401385DC)                                                  */
/*       SKX (0x401385DC)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMASK4_IIO_DFX_REG 0x120045DC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5dc
 */
typedef union {
  struct {
    UINT32 ltssm8_mask4_val : 10;
    /* ltssm8_mask4_val - Bits[9:0], RWS_L, default = 10'b0000000000  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMASK4_IIO_DFX_STRUCT;


/* LTSSMFPLAOUT5_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401385E0)                                                  */
/*       SKX (0x401385E0)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAOUT5_IIO_DFX_REG 0x120045E0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5e0
 */
typedef union {
  struct {
    UINT32 ltssm8_outp5_val : 18;
    /* ltssm8_outp5_val - Bits[17:0], RWS_L, default = 18'b000000000000000000  */
    UINT32 ltssm8_outp5_en : 9;
    /* ltssm8_outp5_en - Bits[26:18], RWS_L, default = 9'b000000000  */
    UINT32 rsvd : 5;
    /* rsvd - Bits[31:27], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAOUT5_IIO_DFX_STRUCT;


/* LTSSMFPLAMASK5_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401385E8)                                                  */
/*       SKX (0x401385E8)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMASK5_IIO_DFX_REG 0x120045E8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5e8
 */
typedef union {
  struct {
    UINT32 ltssm8_mask5_val : 10;
    /* ltssm8_mask5_val - Bits[9:0], RWS_L, default = 10'b0000000000  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMASK5_IIO_DFX_STRUCT;


/* LTSSMFPLAOUT6_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401385EC)                                                  */
/*       SKX (0x401385EC)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAOUT6_IIO_DFX_REG 0x120045EC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5ec
 */
typedef union {
  struct {
    UINT32 ltssm8_outp6_val : 18;
    /* ltssm8_outp6_val - Bits[17:0], RWS_L, default = 18'b000000000000000000  */
    UINT32 ltssm8_outp6_en : 9;
    /* ltssm8_outp6_en - Bits[26:18], RWS_L, default = 9'b000000000  */
    UINT32 rsvd : 5;
    /* rsvd - Bits[31:27], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAOUT6_IIO_DFX_STRUCT;


/* LTSSMFPLAMATCH6_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x401385F0)                                                  */
/*       SKX (0x401385F0)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMATCH6_IIO_DFX_REG 0x120045F0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5f0
 */
typedef union {
  struct {
    UINT32 ltssm8_match6_val : 24;
    /* ltssm8_match6_val - Bits[23:0], RWS_L, default = 24'b000000000000000000000000  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMATCH6_IIO_DFX_STRUCT;


/* LTSSMFPLAMASK6_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401385F4)                                                  */
/*       SKX (0x401385F4)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMASK6_IIO_DFX_REG 0x120045F4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5f4
 */
typedef union {
  struct {
    UINT32 ltssm8_mask6_val : 10;
    /* ltssm8_mask6_val - Bits[9:0], RWS_L, default = 10'b0000000000  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMASK6_IIO_DFX_STRUCT;


/* LTSSMFPLAMATCH5_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x401385F8)                                                  */
/*       SKX (0x401385F8)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMFPLAMATCH5_IIO_DFX_REG 0x120045F8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x5f8
 */
typedef union {
  struct {
    UINT32 ltssm8_match5_val : 24;
    /* ltssm8_match5_val - Bits[23:0], RWS_L, default = 24'b000000000000000000000000  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMFPLAMATCH5_IIO_DFX_STRUCT;


/* LBC_PER_IOU_CONTROL_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x40138600)                                                  */
/*       SKX (0x40138600)                                                     */
/* Register default value:              0x00000000                            */
#define LBC_PER_IOU_CONTROL_IIO_DFX_REG 0x12004600
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x600
 */
typedef union {
  struct {
    UINT32 lbc_start : 1;
    /* lbc_start - Bits[0:0], RW_LV, default = 1'b0  */
    UINT32 lbc_req : 2;
    /* lbc_req - Bits[2:1], RW_L, default = 2'b00  */
    UINT32 lbc_ld_sel : 7;
    /* lbc_ld_sel - Bits[9:3], RW_L, default = 7'b0000000  */
    UINT32 rsvd_10 : 1;
    /* rsvd_10 - Bits[10:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 lbc_ln_sel0 : 2;
    /* lbc_ln_sel0 - Bits[12:11], RW_L, default = 2'b00  */
    UINT32 lbc_ln_sel1 : 2;
    /* lbc_ln_sel1 - Bits[14:13], RW_L, default = 2'b00  */
    UINT32 lbc_ln_sel2 : 2;
    /* lbc_ln_sel2 - Bits[16:15], RW_L, default = 2'b00  */
    UINT32 lbc_ln_sel3 : 2;
    /* lbc_ln_sel3 - Bits[18:17], RW_L, default = 2'b00  */
    UINT32 lbc_ln_sel4 : 2;
    /* lbc_ln_sel4 - Bits[20:19], RW_L, default = 2'b00  */
    UINT32 lbc_ln_sel5 : 2;
    /* lbc_ln_sel5 - Bits[22:21], RW_L, default = 2'b00  */
    UINT32 lbc_ln_sel6 : 2;
    /* lbc_ln_sel6 - Bits[24:23], RW_L, default = 2'b00  */
    UINT32 lbc_ln_sel7 : 2;
    /* lbc_ln_sel7 - Bits[26:25], RW_L, default = 2'b00  */
    UINT32 rsvd_27 : 3;
    /* rsvd_27 - Bits[29:27], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 cfg_cya_delay_rd_capture : 1;
    /* cfg_cya_delay_rd_capture - Bits[30:30], RW_L, default = 1'b0  */
    UINT32 rsvd_31 : 1;
    /* rsvd_31 - Bits[31:31], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LBC_PER_IOU_CONTROL_IIO_DFX_STRUCT;


/* LBC_PER_IOU_DATA_IIO_DFX_REG supported on:                                 */
/*       SKX_A0 (0x40138604)                                                  */
/*       SKX (0x40138604)                                                     */
/* Register default value:              0x00000000                            */
#define LBC_PER_IOU_DATA_IIO_DFX_REG 0x12004604
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x604
 */
typedef union {
  struct {
    UINT32 lbc_data_valid : 1;
    /* lbc_data_valid - Bits[0:0], RW_LV, default = 1'b0  */
    UINT32 lbc_data : 14;
    /* lbc_data - Bits[14:1], RW_LV, default = 14'b00000000000000  */
    UINT32 rsvd : 17;
    /* rsvd - Bits[31:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LBC_PER_IOU_DATA_IIO_DFX_STRUCT;


/* NTL_RX_INVERT_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138610)                                                  */
/*       SKX (0x40138610)                                                     */
/* Register default value:              0x00000000                            */
#define NTL_RX_INVERT_IIO_DFX_REG 0x12004610
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x610
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} NTL_RX_INVERT_IIO_DFX_STRUCT;


/* NTL_TX_INVERT_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138614)                                                  */
/*       SKX (0x40138614)                                                     */
/* Register default value:              0x00000000                            */
#define NTL_TX_INVERT_IIO_DFX_REG 0x12004614
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x614
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} NTL_TX_INVERT_IIO_DFX_STRUCT;


/* RX_PI_CONTROL0_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138620)                                                  */
/*       SKX (0x40138620)                                                     */
/* Register default value:              0x00FF0000                            */
#define RX_PI_CONTROL0_IIO_DFX_REG 0x12004620
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x620
 */
typedef union {
  struct {
    UINT32 rx_mixer_degen_dis_bndl0 : 1;
    /* rx_mixer_degen_dis_bndl0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 rx_mixer_degen_dis_bndl1 : 1;
    /* rx_mixer_degen_dis_bndl1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 rx_mixer_degen_dis_bndl2 : 1;
    /* rx_mixer_degen_dis_bndl2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 rx_mixer_degen_dis_bndl3 : 1;
    /* rx_mixer_degen_dis_bndl3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 rx_mixer_degen_dis_bndl4 : 1;
    /* rx_mixer_degen_dis_bndl4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 rx_mixer_degen_dis_bndl5 : 1;
    /* rx_mixer_degen_dis_bndl5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 rx_mixer_degen_dis_bndl6 : 1;
    /* rx_mixer_degen_dis_bndl6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 rx_mixer_degen_dis_bndl7 : 1;
    /* rx_mixer_degen_dis_bndl7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 rx_ratesel_disable_twg_bndl0 : 1;
    /* rx_ratesel_disable_twg_bndl0 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 rx_ratesel_disable_twg_bndl1 : 1;
    /* rx_ratesel_disable_twg_bndl1 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 rx_ratesel_disable_twg_bndl2 : 1;
    /* rx_ratesel_disable_twg_bndl2 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 rx_ratesel_disable_twg_bndl3 : 1;
    /* rx_ratesel_disable_twg_bndl3 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 rx_ratesel_disable_twg_bndl4 : 1;
    /* rx_ratesel_disable_twg_bndl4 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 rx_ratesel_disable_twg_bndl5 : 1;
    /* rx_ratesel_disable_twg_bndl5 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 rx_ratesel_disable_twg_bndl6 : 1;
    /* rx_ratesel_disable_twg_bndl6 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 rx_ratesel_disable_twg_bndl7 : 1;
    /* rx_ratesel_disable_twg_bndl7 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rx_ratesel_en_cap_div_bndl0 : 1;
    /* rx_ratesel_en_cap_div_bndl0 - Bits[16:16], RWS_L, default = 1'b1  */
    UINT32 rx_ratesel_en_cap_div_bndl1 : 1;
    /* rx_ratesel_en_cap_div_bndl1 - Bits[17:17], RWS_L, default = 1'b1  */
    UINT32 rx_ratesel_en_cap_div_bndl2 : 1;
    /* rx_ratesel_en_cap_div_bndl2 - Bits[18:18], RWS_L, default = 1'b1  */
    UINT32 rx_ratesel_en_cap_div_bndl3 : 1;
    /* rx_ratesel_en_cap_div_bndl3 - Bits[19:19], RWS_L, default = 1'b1  */
    UINT32 rx_ratesel_en_cap_div_bndl4 : 1;
    /* rx_ratesel_en_cap_div_bndl4 - Bits[20:20], RWS_L, default = 1'b1  */
    UINT32 rx_ratesel_en_cap_div_bndl5 : 1;
    /* rx_ratesel_en_cap_div_bndl5 - Bits[21:21], RWS_L, default = 1'b1  */
    UINT32 rx_ratesel_en_cap_div_bndl6 : 1;
    /* rx_ratesel_en_cap_div_bndl6 - Bits[22:22], RWS_L, default = 1'b1  */
    UINT32 rx_ratesel_en_cap_div_bndl7 : 1;
    /* rx_ratesel_en_cap_div_bndl7 - Bits[23:23], RWS_L, default = 1'b1  */
    UINT32 rx_rload_slowck_bndl0 : 1;
    /* rx_rload_slowck_bndl0 - Bits[24:24], RWS_L, default = 1'b0  */
    UINT32 rx_rload_slowck_bndl1 : 1;
    /* rx_rload_slowck_bndl1 - Bits[25:25], RWS_L, default = 1'b0  */
    UINT32 rx_rload_slowck_bndl2 : 1;
    /* rx_rload_slowck_bndl2 - Bits[26:26], RWS_L, default = 1'b0  */
    UINT32 rx_rload_slowck_bndl3 : 1;
    /* rx_rload_slowck_bndl3 - Bits[27:27], RWS_L, default = 1'b0  */
    UINT32 rx_rload_slowck_bndl4 : 1;
    /* rx_rload_slowck_bndl4 - Bits[28:28], RWS_L, default = 1'b0  */
    UINT32 rx_rload_slowck_bndl5 : 1;
    /* rx_rload_slowck_bndl5 - Bits[29:29], RWS_L, default = 1'b0  */
    UINT32 rx_rload_slowck_bndl6 : 1;
    /* rx_rload_slowck_bndl6 - Bits[30:30], RWS_L, default = 1'b0  */
    UINT32 rx_rload_slowck_bndl7 : 1;
    /* rx_rload_slowck_bndl7 - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} RX_PI_CONTROL0_IIO_DFX_STRUCT;


/* SQL_COMPLIANCE_EN_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138624)                                                  */
/*       SKX (0x40138624)                                                     */
/* Register default value:              0x00000000                            */
#define SQL_COMPLIANCE_EN_IIO_DFX_REG 0x12004624
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x624
 */
typedef union {
  struct {
    UINT32 ovren_lane0 : 1;
    /* ovren_lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 ovren_lane1 : 1;
    /* ovren_lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 ovren_lane2 : 1;
    /* ovren_lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 ovren_lane3 : 1;
    /* ovren_lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 ovren_lane4 : 1;
    /* ovren_lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 ovren_lane5 : 1;
    /* ovren_lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 ovren_lane6 : 1;
    /* ovren_lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 ovren_lane7 : 1;
    /* ovren_lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 ovren_lane8 : 1;
    /* ovren_lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 ovren_lane9 : 1;
    /* ovren_lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 ovren_lane10 : 1;
    /* ovren_lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 ovren_lane11 : 1;
    /* ovren_lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 ovren_lane12 : 1;
    /* ovren_lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 ovren_lane13 : 1;
    /* ovren_lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 ovren_lane14 : 1;
    /* ovren_lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 ovren_lane15 : 1;
    /* ovren_lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane0 : 1;
    /* ovrval_lane0 - Bits[16:16], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane1 : 1;
    /* ovrval_lane1 - Bits[17:17], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane2 : 1;
    /* ovrval_lane2 - Bits[18:18], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane3 : 1;
    /* ovrval_lane3 - Bits[19:19], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane4 : 1;
    /* ovrval_lane4 - Bits[20:20], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane5 : 1;
    /* ovrval_lane5 - Bits[21:21], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane6 : 1;
    /* ovrval_lane6 - Bits[22:22], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane7 : 1;
    /* ovrval_lane7 - Bits[23:23], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane8 : 1;
    /* ovrval_lane8 - Bits[24:24], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane9 : 1;
    /* ovrval_lane9 - Bits[25:25], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane10 : 1;
    /* ovrval_lane10 - Bits[26:26], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane11 : 1;
    /* ovrval_lane11 - Bits[27:27], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane12 : 1;
    /* ovrval_lane12 - Bits[28:28], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane13 : 1;
    /* ovrval_lane13 - Bits[29:29], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane14 : 1;
    /* ovrval_lane14 - Bits[30:30], RWS_L, default = 1'b0  */
    UINT32 ovrval_lane15 : 1;
    /* ovrval_lane15 - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} SQL_COMPLIANCE_EN_IIO_DFX_STRUCT;


/* RX_PI_CONTROL1_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138628)                                                  */
/*       SKX (0x40138628)                                                     */
/* Register default value:              0x00000000                            */
#define RX_PI_CONTROL1_IIO_DFX_REG 0x12004628
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x628
 */
typedef union {
  struct {
    UINT32 rx_gain_boost_bndl0 : 2;
    /* rx_gain_boost_bndl0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 rx_gain_boost_bndl1 : 2;
    /* rx_gain_boost_bndl1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 rx_gain_boost_bndl2 : 2;
    /* rx_gain_boost_bndl2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 rx_gain_boost_bndl3 : 2;
    /* rx_gain_boost_bndl3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 rx_gain_boost_bndl4 : 2;
    /* rx_gain_boost_bndl4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 rx_gain_boost_bndl5 : 2;
    /* rx_gain_boost_bndl5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 rx_gain_boost_bndl6 : 2;
    /* rx_gain_boost_bndl6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 rx_gain_boost_bndl7 : 2;
    /* rx_gain_boost_bndl7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 rx_ratesel_bias_tune_bndl0 : 2;
    /* rx_ratesel_bias_tune_bndl0 - Bits[17:16], RWS_L, default = 2'b00  */
    UINT32 rx_ratesel_bias_tune_bndl1 : 2;
    /* rx_ratesel_bias_tune_bndl1 - Bits[19:18], RWS_L, default = 2'b00  */
    UINT32 rx_ratesel_bias_tune_bndl2 : 2;
    /* rx_ratesel_bias_tune_bndl2 - Bits[21:20], RWS_L, default = 2'b00  */
    UINT32 rx_ratesel_bias_tune_bndl3 : 2;
    /* rx_ratesel_bias_tune_bndl3 - Bits[23:22], RWS_L, default = 2'b00  */
    UINT32 rx_ratesel_bias_tune_bndl4 : 2;
    /* rx_ratesel_bias_tune_bndl4 - Bits[25:24], RWS_L, default = 2'b00  */
    UINT32 rx_ratesel_bias_tune_bndl5 : 2;
    /* rx_ratesel_bias_tune_bndl5 - Bits[27:26], RWS_L, default = 2'b00  */
    UINT32 rx_ratesel_bias_tune_bndl6 : 2;
    /* rx_ratesel_bias_tune_bndl6 - Bits[29:28], RWS_L, default = 2'b00  */
    UINT32 rx_ratesel_bias_tune_bndl7 : 2;
    /* rx_ratesel_bias_tune_bndl7 - Bits[31:30], RWS_L, default = 2'b00  */
  } Bits;
  UINT32 Data;
} RX_PI_CONTROL1_IIO_DFX_STRUCT;


/* TXDCC_CONTROL0_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x4013862C)                                                  */
/*       SKX (0x4013862C)                                                     */
/* Register default value:              0x00000000                            */
#define TXDCC_CONTROL0_IIO_DFX_REG 0x1200462C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x62C
 */
typedef union {
  struct {
    UINT32 txdcc_extloadval_bin_bndl0 : 5;
    /* txdcc_extloadval_bin_bndl0 - Bits[4:0], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_bin_bndl1 : 5;
    /* txdcc_extloadval_bin_bndl1 - Bits[9:5], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_bin_bndl2 : 5;
    /* txdcc_extloadval_bin_bndl2 - Bits[14:10], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_bin_bndl3 : 5;
    /* txdcc_extloadval_bin_bndl3 - Bits[19:15], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_bin_bndl4 : 5;
    /* txdcc_extloadval_bin_bndl4 - Bits[24:20], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_bin_bndl5 : 5;
    /* txdcc_extloadval_bin_bndl5 - Bits[29:25], RWS_L, default = 5'b00000  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TXDCC_CONTROL0_IIO_DFX_STRUCT;


/* TXDCC_CONTROL1_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138630)                                                  */
/*       SKX (0x40138630)                                                     */
/* Register default value:              0x00000000                            */
#define TXDCC_CONTROL1_IIO_DFX_REG 0x12004630
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x630
 */
typedef union {
  struct {
    UINT32 txdcc_extloadval_bin_bndl6 : 5;
    /* txdcc_extloadval_bin_bndl6 - Bits[4:0], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_bin_bndl7 : 5;
    /* txdcc_extloadval_bin_bndl7 - Bits[9:5], RWS_L, default = 5'b00000  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TXDCC_CONTROL1_IIO_DFX_STRUCT;


/* TXDCC_CONTROL2_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138634)                                                  */
/*       SKX (0x40138634)                                                     */
/* Register default value:              0x00000000                            */
#define TXDCC_CONTROL2_IIO_DFX_REG 0x12004634
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x634
 */
typedef union {
  struct {
    UINT32 txdcc_extloadval_therm_bndl0 : 5;
    /* txdcc_extloadval_therm_bndl0 - Bits[4:0], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_therm_bndl1 : 5;
    /* txdcc_extloadval_therm_bndl1 - Bits[9:5], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_therm_bndl2 : 5;
    /* txdcc_extloadval_therm_bndl2 - Bits[14:10], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_therm_bndl3 : 5;
    /* txdcc_extloadval_therm_bndl3 - Bits[19:15], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_therm_bndl4 : 5;
    /* txdcc_extloadval_therm_bndl4 - Bits[24:20], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_therm_bndl5 : 5;
    /* txdcc_extloadval_therm_bndl5 - Bits[29:25], RWS_L, default = 5'b00000  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TXDCC_CONTROL2_IIO_DFX_STRUCT;


/* TXDCC_CONTROL3_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138638)                                                  */
/*       SKX (0x40138638)                                                     */
/* Register default value:              0x00000000                            */
#define TXDCC_CONTROL3_IIO_DFX_REG 0x12004638
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x638
 */
typedef union {
  struct {
    UINT32 txdcc_extloadval_therm_bndl6 : 5;
    /* txdcc_extloadval_therm_bndl6 - Bits[4:0], RWS_L, default = 5'b00000  */
    UINT32 txdcc_extloadval_therm_bndl7 : 5;
    /* txdcc_extloadval_therm_bndl7 - Bits[9:5], RWS_L, default = 5'b00000  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TXDCC_CONTROL3_IIO_DFX_STRUCT;


/* TXALIGN_EN_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138648)                                                  */
/*       SKX (0x40138648)                                                     */
/* Register default value:              0x0000FFFF                            */
#define TXALIGN_EN_IIO_DFX_REG 0x12004648
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x648
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b1  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b1  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b1  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b1  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b1  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b1  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b1  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b1  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b1  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b1  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b1  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b1  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b1  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b1  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b1  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b1  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TXALIGN_EN_IIO_DFX_STRUCT;


/* RX_RTERMDIS_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138660)                                                  */
/*       SKX (0x40138660)                                                     */
/* Register default value:              0x00000000                            */
#define RX_RTERMDIS_IIO_DFX_REG 0x12004660
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x660
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 15;
    /* rsvd - Bits[30:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 override_enable : 1;
    /* override_enable - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} RX_RTERMDIS_IIO_DFX_STRUCT;


/* RX_RTERMPULLHIGHN_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138664)                                                  */
/*       SKX (0x40138664)                                                     */
/* Register default value:              0x00000000                            */
#define RX_RTERMPULLHIGHN_IIO_DFX_REG 0x12004664
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x664
 */
typedef union {
  struct {
    UINT32 lane0 : 2;
    /* lane0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 lane1 : 2;
    /* lane1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 lane2 : 2;
    /* lane2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 lane3 : 2;
    /* lane3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 lane4 : 2;
    /* lane4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 lane5 : 2;
    /* lane5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 lane6 : 2;
    /* lane6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 lane7 : 2;
    /* lane7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 lane8 : 2;
    /* lane8 - Bits[17:16], RWS_L, default = 2'b00  */
    UINT32 lane9 : 2;
    /* lane9 - Bits[19:18], RWS_L, default = 2'b00  */
    UINT32 lane10 : 2;
    /* lane10 - Bits[21:20], RWS_L, default = 2'b00  */
    UINT32 lane11 : 2;
    /* lane11 - Bits[23:22], RWS_L, default = 2'b00  */
    UINT32 lane12 : 2;
    /* lane12 - Bits[25:24], RWS_L, default = 2'b00  */
    UINT32 lane13 : 2;
    /* lane13 - Bits[27:26], RWS_L, default = 2'b00  */
    UINT32 lane14 : 2;
    /* lane14 - Bits[29:28], RWS_L, default = 2'b00  */
    UINT32 lane15 : 2;
    /* lane15 - Bits[31:30], RWS_L, default = 2'b00  */
  } Bits;
  UINT32 Data;
} RX_RTERMPULLHIGHN_IIO_DFX_STRUCT;


/* RX_RTERMPULLHIGHP_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x4013866C)                                                  */
/*       SKX (0x4013866C)                                                     */
/* Register default value:              0x00000000                            */
#define RX_RTERMPULLHIGHP_IIO_DFX_REG 0x1200466C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x66c
 */
typedef union {
  struct {
    UINT32 lane0 : 2;
    /* lane0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 lane1 : 2;
    /* lane1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 lane2 : 2;
    /* lane2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 lane3 : 2;
    /* lane3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 lane4 : 2;
    /* lane4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 lane5 : 2;
    /* lane5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 lane6 : 2;
    /* lane6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 lane7 : 2;
    /* lane7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 lane8 : 2;
    /* lane8 - Bits[17:16], RWS_L, default = 2'b00  */
    UINT32 lane9 : 2;
    /* lane9 - Bits[19:18], RWS_L, default = 2'b00  */
    UINT32 lane10 : 2;
    /* lane10 - Bits[21:20], RWS_L, default = 2'b00  */
    UINT32 lane11 : 2;
    /* lane11 - Bits[23:22], RWS_L, default = 2'b00  */
    UINT32 lane12 : 2;
    /* lane12 - Bits[25:24], RWS_L, default = 2'b00  */
    UINT32 lane13 : 2;
    /* lane13 - Bits[27:26], RWS_L, default = 2'b00  */
    UINT32 lane14 : 2;
    /* lane14 - Bits[29:28], RWS_L, default = 2'b00  */
    UINT32 lane15 : 2;
    /* lane15 - Bits[31:30], RWS_L, default = 2'b00  */
  } Bits;
  UINT32 Data;
} RX_RTERMPULLHIGHP_IIO_DFX_STRUCT;


/* RXSQ_EN_IIO_DFX_REG supported on:                                          */
/*       SKX_A0 (0x40138674)                                                  */
/*       SKX (0x40138674)                                                     */
/* Register default value:              0x0000FFFF                            */
#define RXSQ_EN_IIO_DFX_REG 0x12004674
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x674
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b1  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b1  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b1  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b1  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b1  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b1  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b1  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b1  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b1  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b1  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b1  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b1  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b1  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b1  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b1  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b1  */
    UINT32 rsvd : 15;
    /* rsvd - Bits[30:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 override_enable : 1;
    /* override_enable - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} RXSQ_EN_IIO_DFX_STRUCT;


/* RXSQ_CTRL_0_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138678)                                                  */
/*       SKX (0x40138678)                                                     */
/* Register default value:              0x24924924                            */
#define RXSQ_CTRL_0_IIO_DFX_REG 0x12004678
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x678
 */
typedef union {
  struct {
    UINT32 lane0 : 3;
    /* lane0 - Bits[2:0], RWS_L, default = 3'b100  */
    UINT32 lane1 : 3;
    /* lane1 - Bits[5:3], RWS_L, default = 3'b100  */
    UINT32 lane2 : 3;
    /* lane2 - Bits[8:6], RWS_L, default = 3'b100  */
    UINT32 lane3 : 3;
    /* lane3 - Bits[11:9], RWS_L, default = 3'b100  */
    UINT32 lane4 : 3;
    /* lane4 - Bits[14:12], RWS_L, default = 3'b100  */
    UINT32 lane5 : 3;
    /* lane5 - Bits[17:15], RWS_L, default = 3'b100  */
    UINT32 lane6 : 3;
    /* lane6 - Bits[20:18], RWS_L, default = 3'b100  */
    UINT32 lane7 : 3;
    /* lane7 - Bits[23:21], RWS_L, default = 3'b100  */
    UINT32 lane8 : 3;
    /* lane8 - Bits[26:24], RWS_L, default = 3'b100  */
    UINT32 lane9 : 3;
    /* lane9 - Bits[29:27], RWS_L, default = 3'b100  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RXSQ_CTRL_0_IIO_DFX_STRUCT;


/* RXSQ_CTRL_1_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x4013867C)                                                  */
/*       SKX (0x4013867C)                                                     */
/* Register default value:              0x00024924                            */
#define RXSQ_CTRL_1_IIO_DFX_REG 0x1200467C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x67c
 */
typedef union {
  struct {
    UINT32 lane10 : 3;
    /* lane10 - Bits[2:0], RWS_L, default = 3'b100  */
    UINT32 lane11 : 3;
    /* lane11 - Bits[5:3], RWS_L, default = 3'b100  */
    UINT32 lane12 : 3;
    /* lane12 - Bits[8:6], RWS_L, default = 3'b100  */
    UINT32 lane13 : 3;
    /* lane13 - Bits[11:9], RWS_L, default = 3'b100  */
    UINT32 lane14 : 3;
    /* lane14 - Bits[14:12], RWS_L, default = 3'b100  */
    UINT32 lane15 : 3;
    /* lane15 - Bits[17:15], RWS_L, default = 3'b100  */
    UINT32 rsvd : 14;
    /* rsvd - Bits[31:18], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RXSQ_CTRL_1_IIO_DFX_STRUCT;


/* RXSQ_DET_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138680)                                                  */
/*       SKX (0x40138680)                                                     */
/* Register default value:              0x00000000                            */
#define RXSQ_DET_IIO_DFX_REG 0x12004680
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x680
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RO_V, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RO_V, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RO_V, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RO_V, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RO_V, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RO_V, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RO_V, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RO_V, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RO_V, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RO_V, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RO_V, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RO_V, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RO_V, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RO_V, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RO_V, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RO_V, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RXSQ_DET_IIO_DFX_STRUCT;


/* RX_CTLE_OFFSET_EN_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138684)                                                  */
/*       SKX (0x40138684)                                                     */
/* Register default value:              0x0000FFFF                            */
#define RX_CTLE_OFFSET_EN_IIO_DFX_REG 0x12004684
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x684
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b1  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b1  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b1  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b1  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b1  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b1  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b1  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b1  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b1  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b1  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b1  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b1  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b1  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b1  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b1  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b1  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_CTLE_OFFSET_EN_IIO_DFX_STRUCT;


/* OVRD_PD_CK_4UI_2AGENT_IIO_DFX_REG supported on:                            */
/*       SKX_A0 (0x40138698)                                                  */
/*       SKX (0x40138698)                                                     */
/* Register default value:              0x00000000                            */
#define OVRD_PD_CK_4UI_2AGENT_IIO_DFX_REG 0x12004698
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x698
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} OVRD_PD_CK_4UI_2AGENT_IIO_DFX_STRUCT;


/* RX_CTLE_VCM_OVRD_DIS_IIO_DFX_REG supported on:                             */
/*       SKX_A0 (0x4013869C)                                                  */
/*       SKX (0x4013869C)                                                     */
/* Register default value:              0x00000000                            */
#define RX_CTLE_VCM_OVRD_DIS_IIO_DFX_REG 0x1200469C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x69c
 */
typedef union {
  struct {
    UINT32 bndl0 : 1;
    /* bndl0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 bndl1 : 1;
    /* bndl1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 bndl2 : 1;
    /* bndl2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 bndl3 : 1;
    /* bndl3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 bndl4 : 1;
    /* bndl4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 bndl5 : 1;
    /* bndl5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 bndl6 : 1;
    /* bndl6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 bndl7 : 1;
    /* bndl7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_CTLE_VCM_OVRD_DIS_IIO_DFX_STRUCT;


/* RX_DFE_SUMMER_CTL_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x401386A0)                                                  */
/*       SKX (0x401386A0)                                                     */
/* Register default value:              0xFFFFFFFF                            */
#define RX_DFE_SUMMER_CTL_IIO_DFX_REG 0x120046A0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6a0
 */
typedef union {
  struct {
    UINT32 lane0 : 2;
    /* lane0 - Bits[1:0], RWS_L, default = 2'b11  */
    UINT32 lane1 : 2;
    /* lane1 - Bits[3:2], RWS_L, default = 2'b11  */
    UINT32 lane2 : 2;
    /* lane2 - Bits[5:4], RWS_L, default = 2'b11  */
    UINT32 lane3 : 2;
    /* lane3 - Bits[7:6], RWS_L, default = 2'b11  */
    UINT32 lane4 : 2;
    /* lane4 - Bits[9:8], RWS_L, default = 2'b11  */
    UINT32 lane5 : 2;
    /* lane5 - Bits[11:10], RWS_L, default = 2'b11  */
    UINT32 lane6 : 2;
    /* lane6 - Bits[13:12], RWS_L, default = 2'b11  */
    UINT32 lane7 : 2;
    /* lane7 - Bits[15:14], RWS_L, default = 2'b11  */
    UINT32 lane8 : 2;
    /* lane8 - Bits[17:16], RWS_L, default = 2'b11  */
    UINT32 lane9 : 2;
    /* lane9 - Bits[19:18], RWS_L, default = 2'b11  */
    UINT32 lane10 : 2;
    /* lane10 - Bits[21:20], RWS_L, default = 2'b11  */
    UINT32 lane11 : 2;
    /* lane11 - Bits[23:22], RWS_L, default = 2'b11  */
    UINT32 lane12 : 2;
    /* lane12 - Bits[25:24], RWS_L, default = 2'b11  */
    UINT32 lane13 : 2;
    /* lane13 - Bits[27:26], RWS_L, default = 2'b11  */
    UINT32 lane14 : 2;
    /* lane14 - Bits[29:28], RWS_L, default = 2'b11  */
    UINT32 lane15 : 2;
    /* lane15 - Bits[31:30], RWS_L, default = 2'b11  */
  } Bits;
  UINT32 Data;
} RX_DFE_SUMMER_CTL_IIO_DFX_STRUCT;


/* RX_AFE_OFFSETCOR_OPENLOOP_IIO_DFX_REG supported on:                        */
/*       SKX_A0 (0x401386A8)                                                  */
/*       SKX (0x401386A8)                                                     */
/* Register default value:              0x00000000                            */
#define RX_AFE_OFFSETCOR_OPENLOOP_IIO_DFX_REG 0x120046A8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6a8
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_AFE_OFFSETCOR_OPENLOOP_IIO_DFX_STRUCT;


/* RX_AFE_OFFSETCOR_GAIN_IIO_DFX_REG supported on:                            */
/*       SKX_A0 (0x401386AC)                                                  */
/*       SKX (0x401386AC)                                                     */
/* Register default value:              0x00005555                            */
#define RX_AFE_OFFSETCOR_GAIN_IIO_DFX_REG 0x120046AC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6ac
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b01  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b01  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b01  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b01  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b01  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b01  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b01  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b01  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_AFE_OFFSETCOR_GAIN_IIO_DFX_STRUCT;


/* RX_SPARE_0_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x401386B0)                                                  */
/*       SKX (0x401386B0)                                                     */
/* Register default value:              0x00000000                            */
#define RX_SPARE_0_IIO_DFX_REG 0x120046B0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6b0
 *       [3]: unused
 *       [2]: unused in rxtx2x
 *       [1]: use hard-code value for summer CM calibration. 0 = use FSM calibrated 
 * code. 
 *       [0]: mask off lqc_done_ddd in rxtxdig_offscal. Should not use. 
 *       
 */
typedef union {
  struct {
    UINT32 lane0 : 4;
    /* lane0 - Bits[3:0], RWS_L, default = 4'b0000  */
    UINT32 lane1 : 4;
    /* lane1 - Bits[7:4], RWS_L, default = 4'b0000  */
    UINT32 lane2 : 4;
    /* lane2 - Bits[11:8], RWS_L, default = 4'b0000  */
    UINT32 lane3 : 4;
    /* lane3 - Bits[15:12], RWS_L, default = 4'b0000  */
    UINT32 lane4 : 4;
    /* lane4 - Bits[19:16], RWS_L, default = 4'b0000  */
    UINT32 lane5 : 4;
    /* lane5 - Bits[23:20], RWS_L, default = 4'b0000  */
    UINT32 lane6 : 4;
    /* lane6 - Bits[27:24], RWS_L, default = 4'b0000  */
    UINT32 lane7 : 4;
    /* lane7 - Bits[31:28], RWS_L, default = 4'b0000  */
  } Bits;
  UINT32 Data;
} RX_SPARE_0_IIO_DFX_STRUCT;


/* RX_SPARE_1_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x401386B4)                                                  */
/*       SKX (0x401386B4)                                                     */
/* Register default value:              0x00000000                            */
#define RX_SPARE_1_IIO_DFX_REG 0x120046B4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6b4
 */
typedef union {
  struct {
    UINT32 lane8 : 4;
    /* lane8 - Bits[3:0], RWS_L, default = 4'b0000  */
    UINT32 lane9 : 4;
    /* lane9 - Bits[7:4], RWS_L, default = 4'b0000  */
    UINT32 lane10 : 4;
    /* lane10 - Bits[11:8], RWS_L, default = 4'b0000  */
    UINT32 lane11 : 4;
    /* lane11 - Bits[15:12], RWS_L, default = 4'b0000  */
    UINT32 lane12 : 4;
    /* lane12 - Bits[19:16], RWS_L, default = 4'b0000  */
    UINT32 lane13 : 4;
    /* lane13 - Bits[23:20], RWS_L, default = 4'b0000  */
    UINT32 lane14 : 4;
    /* lane14 - Bits[27:24], RWS_L, default = 4'b0000  */
    UINT32 lane15 : 4;
    /* lane15 - Bits[31:28], RWS_L, default = 4'b0000  */
  } Bits;
  UINT32 Data;
} RX_SPARE_1_IIO_DFX_STRUCT;


/* RX_LPCLK_SEL_CK0_IIO_DFX_REG supported on:                                 */
/*       SKX_A0 (0x401386C0)                                                  */
/*       SKX (0x401386C0)                                                     */
/* Register default value:              0x00000000                            */
#define RX_LPCLK_SEL_CK0_IIO_DFX_REG 0x120046C0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6c0
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_LPCLK_SEL_CK0_IIO_DFX_STRUCT;


/* FAREND_LPBK_EN_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401386C4)                                                  */
/*       SKX (0x401386C4)                                                     */
/* Register default value:              0x00000000                            */
#define FAREND_LPBK_EN_IIO_DFX_REG 0x120046C4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6c4
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} FAREND_LPBK_EN_IIO_DFX_STRUCT;


/* RX_VCM_DS_SEL_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x401386C8)                                                  */
/*       SKX (0x401386C8)                                                     */
/* Register default value:              0x00005555                            */
#define RX_VCM_DS_SEL_IIO_DFX_REG 0x120046C8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6c8
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b01  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b01  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b01  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b01  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b01  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b01  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b01  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b01  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_VCM_DS_SEL_IIO_DFX_STRUCT;


/* RX_VCM_SUM_SEL_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401386CC)                                                  */
/*       SKX (0x401386CC)                                                     */
/* Register default value:              0x000000FF                            */
#define RX_VCM_SUM_SEL_IIO_DFX_REG 0x120046CC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6cc
 */
typedef union {
  struct {
    UINT32 bndl0 : 1;
    /* bndl0 - Bits[0:0], RWS_L, default = 1'b1  */
    UINT32 bndl1 : 1;
    /* bndl1 - Bits[1:1], RWS_L, default = 1'b1  */
    UINT32 bndl2 : 1;
    /* bndl2 - Bits[2:2], RWS_L, default = 1'b1  */
    UINT32 bndl3 : 1;
    /* bndl3 - Bits[3:3], RWS_L, default = 1'b1  */
    UINT32 bndl4 : 1;
    /* bndl4 - Bits[4:4], RWS_L, default = 1'b1  */
    UINT32 bndl5 : 1;
    /* bndl5 - Bits[5:5], RWS_L, default = 1'b1  */
    UINT32 bndl6 : 1;
    /* bndl6 - Bits[6:6], RWS_L, default = 1'b1  */
    UINT32 bndl7 : 1;
    /* bndl7 - Bits[7:7], RWS_L, default = 1'b1  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_VCM_SUM_SEL_IIO_DFX_STRUCT;


/* RX_VREF_SEL_GEN1_0_IIO_DFX_REG supported on:                               */
/*       SKX_A0 (0x401386E0)                                                  */
/*       SKX (0x401386E0)                                                     */
/* Register default value:              0x2318C631                            */
#define RX_VREF_SEL_GEN1_0_IIO_DFX_REG 0x120046E0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6e0
 */
typedef union {
  struct {
    UINT32 lane0 : 5;
    /* lane0 - Bits[4:0], RWS_L, default = 5'b10001  */
    UINT32 lane1 : 5;
    /* lane1 - Bits[9:5], RWS_L, default = 5'b10001  */
    UINT32 lane2 : 5;
    /* lane2 - Bits[14:10], RWS_L, default = 5'b10001  */
    UINT32 lane3 : 5;
    /* lane3 - Bits[19:15], RWS_L, default = 5'b10001  */
    UINT32 lane4 : 5;
    /* lane4 - Bits[24:20], RWS_L, default = 5'b10001  */
    UINT32 lane5 : 5;
    /* lane5 - Bits[29:25], RWS_L, default = 5'b10001  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_VREF_SEL_GEN1_0_IIO_DFX_STRUCT;


/* RX_VREF_SEL_GEN1_1_IIO_DFX_REG supported on:                               */
/*       SKX_A0 (0x401386E4)                                                  */
/*       SKX (0x401386E4)                                                     */
/* Register default value:              0x2318C631                            */
#define RX_VREF_SEL_GEN1_1_IIO_DFX_REG 0x120046E4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6e4
 */
typedef union {
  struct {
    UINT32 lane6 : 5;
    /* lane6 - Bits[4:0], RWS_L, default = 5'b10001  */
    UINT32 lane7 : 5;
    /* lane7 - Bits[9:5], RWS_L, default = 5'b10001  */
    UINT32 lane8 : 5;
    /* lane8 - Bits[14:10], RWS_L, default = 5'b10001  */
    UINT32 lane9 : 5;
    /* lane9 - Bits[19:15], RWS_L, default = 5'b10001  */
    UINT32 lane10 : 5;
    /* lane10 - Bits[24:20], RWS_L, default = 5'b10001  */
    UINT32 lane11 : 5;
    /* lane11 - Bits[29:25], RWS_L, default = 5'b10001  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_VREF_SEL_GEN1_1_IIO_DFX_STRUCT;


/* RX_VREF_SEL_GEN1_2_IIO_DFX_REG supported on:                               */
/*       SKX_A0 (0x401386E8)                                                  */
/*       SKX (0x401386E8)                                                     */
/* Register default value:              0x0008C631                            */
#define RX_VREF_SEL_GEN1_2_IIO_DFX_REG 0x120046E8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6e8
 */
typedef union {
  struct {
    UINT32 lane12 : 5;
    /* lane12 - Bits[4:0], RWS_L, default = 5'b10001  */
    UINT32 lane13 : 5;
    /* lane13 - Bits[9:5], RWS_L, default = 5'b10001  */
    UINT32 lane14 : 5;
    /* lane14 - Bits[14:10], RWS_L, default = 5'b10001  */
    UINT32 lane15 : 5;
    /* lane15 - Bits[19:15], RWS_L, default = 5'b10001  */
    UINT32 rsvd : 12;
    /* rsvd - Bits[31:20], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_VREF_SEL_GEN1_2_IIO_DFX_STRUCT;


/* RX_VREF_SEL_NOTGEN1_0_IIO_DFX_REG supported on:                            */
/*       SKX_A0 (0x401386EC)                                                  */
/*       SKX (0x401386EC)                                                     */
/* Register default value:              0x1AD6B5AD                            */
#define RX_VREF_SEL_NOTGEN1_0_IIO_DFX_REG 0x120046EC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6ec
 */
typedef union {
  struct {
    UINT32 lane0 : 5;
    /* lane0 - Bits[4:0], RWS_L, default = 5'b01101  */
    UINT32 lane1 : 5;
    /* lane1 - Bits[9:5], RWS_L, default = 5'b01101  */
    UINT32 lane2 : 5;
    /* lane2 - Bits[14:10], RWS_L, default = 5'b01101  */
    UINT32 lane3 : 5;
    /* lane3 - Bits[19:15], RWS_L, default = 5'b01101  */
    UINT32 lane4 : 5;
    /* lane4 - Bits[24:20], RWS_L, default = 5'b01101  */
    UINT32 lane5 : 5;
    /* lane5 - Bits[29:25], RWS_L, default = 5'b01101  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_VREF_SEL_NOTGEN1_0_IIO_DFX_STRUCT;


/* RX_VREF_SEL_NOTGEN1_1_IIO_DFX_REG supported on:                            */
/*       SKX_A0 (0x401386F0)                                                  */
/*       SKX (0x401386F0)                                                     */
/* Register default value:              0x1AD6B5AD                            */
#define RX_VREF_SEL_NOTGEN1_1_IIO_DFX_REG 0x120046F0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6f0
 */
typedef union {
  struct {
    UINT32 lane6 : 5;
    /* lane6 - Bits[4:0], RWS_L, default = 5'b01101  */
    UINT32 lane7 : 5;
    /* lane7 - Bits[9:5], RWS_L, default = 5'b01101  */
    UINT32 lane8 : 5;
    /* lane8 - Bits[14:10], RWS_L, default = 5'b01101  */
    UINT32 lane9 : 5;
    /* lane9 - Bits[19:15], RWS_L, default = 5'b01101  */
    UINT32 lane10 : 5;
    /* lane10 - Bits[24:20], RWS_L, default = 5'b01101  */
    UINT32 lane11 : 5;
    /* lane11 - Bits[29:25], RWS_L, default = 5'b01101  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_VREF_SEL_NOTGEN1_1_IIO_DFX_STRUCT;


/* RX_VREF_SEL_NOTGEN1_2_IIO_DFX_REG supported on:                            */
/*       SKX_A0 (0x401386F4)                                                  */
/*       SKX (0x401386F4)                                                     */
/* Register default value:              0x0006B5AD                            */
#define RX_VREF_SEL_NOTGEN1_2_IIO_DFX_REG 0x120046F4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x6f4
 */
typedef union {
  struct {
    UINT32 lane12 : 5;
    /* lane12 - Bits[4:0], RWS_L, default = 5'b01101  */
    UINT32 lane13 : 5;
    /* lane13 - Bits[9:5], RWS_L, default = 5'b01101  */
    UINT32 lane14 : 5;
    /* lane14 - Bits[14:10], RWS_L, default = 5'b01101  */
    UINT32 lane15 : 5;
    /* lane15 - Bits[19:15], RWS_L, default = 5'b01101  */
    UINT32 rsvd : 12;
    /* rsvd - Bits[31:20], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_VREF_SEL_NOTGEN1_2_IIO_DFX_STRUCT;


/* IG_ACQ_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x40138700)                                                  */
/*       SKX (0x40138700)                                                     */
/* Register default value:              0x006DB6DB                            */
#define IG_ACQ_IIO_DFX_REG 0x12004700
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x700
 */
typedef union {
  struct {
    UINT32 bndl0 : 3;
    /* bndl0 - Bits[2:0], RWS_L, default = 3'd3  */
    UINT32 bndl1 : 3;
    /* bndl1 - Bits[5:3], RWS_L, default = 3'd3  */
    UINT32 bndl2 : 3;
    /* bndl2 - Bits[8:6], RWS_L, default = 3'd3  */
    UINT32 bndl3 : 3;
    /* bndl3 - Bits[11:9], RWS_L, default = 3'd3  */
    UINT32 bndl4 : 3;
    /* bndl4 - Bits[14:12], RWS_L, default = 3'd3  */
    UINT32 bndl5 : 3;
    /* bndl5 - Bits[17:15], RWS_L, default = 3'd3  */
    UINT32 bndl6 : 3;
    /* bndl6 - Bits[20:18], RWS_L, default = 3'd3  */
    UINT32 bndl7 : 3;
    /* bndl7 - Bits[23:21], RWS_L, default = 3'd3  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} IG_ACQ_IIO_DFX_STRUCT;


/* IG_TRACK_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138704)                                                  */
/*       SKX (0x40138704)                                                     */
/* Register default value:              0x00249249                            */
#define IG_TRACK_IIO_DFX_REG 0x12004704
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x704
 */
typedef union {
  struct {
    UINT32 bndl0 : 3;
    /* bndl0 - Bits[2:0], RWS_L, default = 3'd1  */
    UINT32 bndl1 : 3;
    /* bndl1 - Bits[5:3], RWS_L, default = 3'd1  */
    UINT32 bndl2 : 3;
    /* bndl2 - Bits[8:6], RWS_L, default = 3'd1  */
    UINT32 bndl3 : 3;
    /* bndl3 - Bits[11:9], RWS_L, default = 3'd1  */
    UINT32 bndl4 : 3;
    /* bndl4 - Bits[14:12], RWS_L, default = 3'd1  */
    UINT32 bndl5 : 3;
    /* bndl5 - Bits[17:15], RWS_L, default = 3'd1  */
    UINT32 bndl6 : 3;
    /* bndl6 - Bits[20:18], RWS_L, default = 3'd1  */
    UINT32 bndl7 : 3;
    /* bndl7 - Bits[23:21], RWS_L, default = 3'd1  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} IG_TRACK_IIO_DFX_STRUCT;


/* PG_ACQ_0_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138708)                                                  */
/*       SKX (0x40138708)                                                     */
/* Register default value:              0x10410410                            */
#define PG_ACQ_0_IIO_DFX_REG 0x12004708
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x708
 */
typedef union {
  struct {
    UINT32 bndl0 : 6;
    /* bndl0 - Bits[5:0], RWS_L, default = 6'd16  */
    UINT32 bndl1 : 6;
    /* bndl1 - Bits[11:6], RWS_L, default = 6'd16  */
    UINT32 bndl2 : 6;
    /* bndl2 - Bits[17:12], RWS_L, default = 6'd16  */
    UINT32 bndl3 : 6;
    /* bndl3 - Bits[23:18], RWS_L, default = 6'd16  */
    UINT32 bndl4 : 6;
    /* bndl4 - Bits[29:24], RWS_L, default = 6'd16  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PG_ACQ_0_IIO_DFX_STRUCT;


/* PG_ACQ_1_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x4013870C)                                                  */
/*       SKX (0x4013870C)                                                     */
/* Register default value:              0x00010410                            */
#define PG_ACQ_1_IIO_DFX_REG 0x1200470C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x70c
 */
typedef union {
  struct {
    UINT32 bndl5 : 6;
    /* bndl5 - Bits[5:0], RWS_L, default = 6'd16  */
    UINT32 bndl6 : 6;
    /* bndl6 - Bits[11:6], RWS_L, default = 6'd16  */
    UINT32 bndl7 : 6;
    /* bndl7 - Bits[17:12], RWS_L, default = 6'd16  */
    UINT32 rsvd : 14;
    /* rsvd - Bits[31:18], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PG_ACQ_1_IIO_DFX_STRUCT;


/* PG_TRACK_0_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138710)                                                  */
/*       SKX (0x40138710)                                                     */
/* Register default value:              0x0A28A28A                            */
#define PG_TRACK_0_IIO_DFX_REG 0x12004710
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x710
 */
typedef union {
  struct {
    UINT32 bndl0 : 6;
    /* bndl0 - Bits[5:0], RWS_L, default = 6'd10  */
    UINT32 bndl1 : 6;
    /* bndl1 - Bits[11:6], RWS_L, default = 6'd10  */
    UINT32 bndl2 : 6;
    /* bndl2 - Bits[17:12], RWS_L, default = 6'd10  */
    UINT32 bndl3 : 6;
    /* bndl3 - Bits[23:18], RWS_L, default = 6'd10  */
    UINT32 bndl4 : 6;
    /* bndl4 - Bits[29:24], RWS_L, default = 6'd10  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PG_TRACK_0_IIO_DFX_STRUCT;


/* PG_TRACK_1_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138714)                                                  */
/*       SKX (0x40138714)                                                     */
/* Register default value:              0x0000A28A                            */
#define PG_TRACK_1_IIO_DFX_REG 0x12004714
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x714
 */
typedef union {
  struct {
    UINT32 bndl5 : 6;
    /* bndl5 - Bits[5:0], RWS_L, default = 6'd10  */
    UINT32 bndl6 : 6;
    /* bndl6 - Bits[11:6], RWS_L, default = 6'd10  */
    UINT32 bndl7 : 6;
    /* bndl7 - Bits[17:12], RWS_L, default = 6'd10  */
    UINT32 rsvd : 14;
    /* rsvd - Bits[31:18], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PG_TRACK_1_IIO_DFX_STRUCT;


/* CDR_PDTC_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138718)                                                  */
/*       SKX (0x40138718)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_PDTC_IIO_DFX_REG 0x12004718
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x718
 *            SKX: repurpose as phase detector's algorithm selector
 *       01 = select Qureshi algorithm
 *       others = JKT/IVT algorithm
 * 	Note: This signal effects the cdr_pd_mode signal
 *       
 */
typedef union {
  struct {
    UINT32 lane0 : 2;
    /* lane0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 lane1 : 2;
    /* lane1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 lane2 : 2;
    /* lane2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 lane3 : 2;
    /* lane3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 lane4 : 2;
    /* lane4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 lane5 : 2;
    /* lane5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 lane6 : 2;
    /* lane6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 lane7 : 2;
    /* lane7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 lane8 : 2;
    /* lane8 - Bits[17:16], RWS_L, default = 2'b00  */
    UINT32 lane9 : 2;
    /* lane9 - Bits[19:18], RWS_L, default = 2'b00  */
    UINT32 lane10 : 2;
    /* lane10 - Bits[21:20], RWS_L, default = 2'b00  */
    UINT32 lane11 : 2;
    /* lane11 - Bits[23:22], RWS_L, default = 2'b00  */
    UINT32 lane12 : 2;
    /* lane12 - Bits[25:24], RWS_L, default = 2'b00  */
    UINT32 lane13 : 2;
    /* lane13 - Bits[27:26], RWS_L, default = 2'b00  */
    UINT32 lane14 : 2;
    /* lane14 - Bits[29:28], RWS_L, default = 2'b00  */
    UINT32 lane15 : 2;
    /* lane15 - Bits[31:30], RWS_L, default = 2'b00  */
  } Bits;
  UINT32 Data;
} CDR_PDTC_IIO_DFX_STRUCT;


/* CDR_FORCE_ACQ_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138720)                                                  */
/*       SKX (0x40138720)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_FORCE_ACQ_IIO_DFX_REG 0x12004720
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x720
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CDR_FORCE_ACQ_IIO_DFX_STRUCT;


/* CDR_PD_DATAMODE_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x40138724)                                                  */
/*       SKX (0x40138724)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_PD_DATAMODE_IIO_DFX_REG 0x12004724
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x724
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CDR_PD_DATAMODE_IIO_DFX_STRUCT;


/* CDR_PD_MODE_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138728)                                                  */
/*       SKX (0x40138728)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_PD_MODE_IIO_DFX_REG 0x12004728
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x728
 */
typedef union {
  struct {
    UINT32 lane0 : 2;
    /* lane0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 lane1 : 2;
    /* lane1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 lane2 : 2;
    /* lane2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 lane3 : 2;
    /* lane3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 lane4 : 2;
    /* lane4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 lane5 : 2;
    /* lane5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 lane6 : 2;
    /* lane6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 lane7 : 2;
    /* lane7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 lane8 : 2;
    /* lane8 - Bits[17:16], RWS_L, default = 2'b00  */
    UINT32 lane9 : 2;
    /* lane9 - Bits[19:18], RWS_L, default = 2'b00  */
    UINT32 lane10 : 2;
    /* lane10 - Bits[21:20], RWS_L, default = 2'b00  */
    UINT32 lane11 : 2;
    /* lane11 - Bits[23:22], RWS_L, default = 2'b00  */
    UINT32 lane12 : 2;
    /* lane12 - Bits[25:24], RWS_L, default = 2'b00  */
    UINT32 lane13 : 2;
    /* lane13 - Bits[27:26], RWS_L, default = 2'b00  */
    UINT32 lane14 : 2;
    /* lane14 - Bits[29:28], RWS_L, default = 2'b00  */
    UINT32 lane15 : 2;
    /* lane15 - Bits[31:30], RWS_L, default = 2'b00  */
  } Bits;
  UINT32 Data;
} CDR_PD_MODE_IIO_DFX_STRUCT;


/* CDR_PPM_OFFSET_EN_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138730)                                                  */
/*       SKX (0x40138730)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_PPM_OFFSET_EN_IIO_DFX_REG 0x12004730
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x730
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CDR_PPM_OFFSET_EN_IIO_DFX_STRUCT;


/* CDR_PPM_OFFSET_0_IIO_DFX_REG supported on:                                 */
/*       SKX_A0 (0x40138734)                                                  */
/*       SKX (0x40138734)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_PPM_OFFSET_0_IIO_DFX_REG 0x12004734
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x734
 */
typedef union {
  struct {
    UINT32 bndl0 : 7;
    /* bndl0 - Bits[6:0], RWS_L, default = 7'b0000000  */
    UINT32 bndl1 : 7;
    /* bndl1 - Bits[13:7], RWS_L, default = 7'b0000000  */
    UINT32 bndl2 : 7;
    /* bndl2 - Bits[20:14], RWS_L, default = 7'b0000000  */
    UINT32 bndl3 : 7;
    /* bndl3 - Bits[27:21], RWS_L, default = 7'b0000000  */
    UINT32 rsvd : 4;
    /* rsvd - Bits[31:28], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CDR_PPM_OFFSET_0_IIO_DFX_STRUCT;


/* CDR_PPM_OFFSET_1_IIO_DFX_REG supported on:                                 */
/*       SKX_A0 (0x40138738)                                                  */
/*       SKX (0x40138738)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_PPM_OFFSET_1_IIO_DFX_REG 0x12004738
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x738
 */
typedef union {
  struct {
    UINT32 bndl4 : 7;
    /* bndl4 - Bits[6:0], RWS_L, default = 7'b0000000  */
    UINT32 bndl5 : 7;
    /* bndl5 - Bits[13:7], RWS_L, default = 7'b0000000  */
    UINT32 bndl6 : 7;
    /* bndl6 - Bits[20:14], RWS_L, default = 7'b0000000  */
    UINT32 bndl7 : 7;
    /* bndl7 - Bits[27:21], RWS_L, default = 7'b0000000  */
    UINT32 rsvd : 4;
    /* rsvd - Bits[31:28], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CDR_PPM_OFFSET_1_IIO_DFX_STRUCT;


/* CDR_PMOD_EN_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138744)                                                  */
/*       SKX (0x40138744)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_PMOD_EN_IIO_DFX_REG 0x12004744
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x744
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CDR_PMOD_EN_IIO_DFX_STRUCT;


/* CDR_PMOD_STEP_0_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x40138748)                                                  */
/*       SKX (0x40138748)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_PMOD_STEP_0_IIO_DFX_REG 0x12004748
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x748
 */
typedef union {
  struct {
    UINT32 bndl0 : 8;
    /* bndl0 - Bits[7:0], RWS_L, default = 8'b00000000  */
    UINT32 bndl1 : 8;
    /* bndl1 - Bits[15:8], RWS_L, default = 8'b00000000  */
    UINT32 bndl2 : 8;
    /* bndl2 - Bits[23:16], RWS_L, default = 8'b00000000  */
    UINT32 bndl3 : 8;
    /* bndl3 - Bits[31:24], RWS_L, default = 8'b00000000  */
  } Bits;
  UINT32 Data;
} CDR_PMOD_STEP_0_IIO_DFX_STRUCT;


/* CDR_PMOD_STEP_1_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x4013874C)                                                  */
/*       SKX (0x4013874C)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_PMOD_STEP_1_IIO_DFX_REG 0x1200474C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x74c
 */
typedef union {
  struct {
    UINT32 bndl4 : 8;
    /* bndl4 - Bits[7:0], RWS_L, default = 8'b00000000  */
    UINT32 bndl5 : 8;
    /* bndl5 - Bits[15:8], RWS_L, default = 8'b00000000  */
    UINT32 bndl6 : 8;
    /* bndl6 - Bits[23:16], RWS_L, default = 8'b00000000  */
    UINT32 bndl7 : 8;
    /* bndl7 - Bits[31:24], RWS_L, default = 8'b00000000  */
  } Bits;
  UINT32 Data;
} CDR_PMOD_STEP_1_IIO_DFX_STRUCT;


/* CDR_PMOD_PEAK_0_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x40138758)                                                  */
/*       SKX (0x40138758)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_PMOD_PEAK_0_IIO_DFX_REG 0x12004758
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x758
 */
typedef union {
  struct {
    UINT32 bndl0 : 6;
    /* bndl0 - Bits[5:0], RWS_L, default = 6'b000000  */
    UINT32 bndl1 : 6;
    /* bndl1 - Bits[11:6], RWS_L, default = 6'b000000  */
    UINT32 bndl2 : 6;
    /* bndl2 - Bits[17:12], RWS_L, default = 6'b000000  */
    UINT32 bndl3 : 6;
    /* bndl3 - Bits[23:18], RWS_L, default = 6'b000000  */
    UINT32 bndl4 : 6;
    /* bndl4 - Bits[29:24], RWS_L, default = 6'b000000  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CDR_PMOD_PEAK_0_IIO_DFX_STRUCT;


/* CDR_PMOD_PEAK_1_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x4013875C)                                                  */
/*       SKX (0x4013875C)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_PMOD_PEAK_1_IIO_DFX_REG 0x1200475C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x75c
 */
typedef union {
  struct {
    UINT32 bndl5 : 6;
    /* bndl5 - Bits[5:0], RWS_L, default = 6'b000000  */
    UINT32 bndl6 : 6;
    /* bndl6 - Bits[11:6], RWS_L, default = 6'b000000  */
    UINT32 bndl7 : 6;
    /* bndl7 - Bits[17:12], RWS_L, default = 6'b000000  */
    UINT32 rsvd : 14;
    /* rsvd - Bits[31:18], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CDR_PMOD_PEAK_1_IIO_DFX_STRUCT;


/* CDR_ACQ_LENGTH_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138760)                                                  */
/*       SKX (0x40138760)                                                     */
/* Register default value:              0x55555555                            */
#define CDR_ACQ_LENGTH_IIO_DFX_REG 0x12004760
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x760
 */
typedef union {
  struct {
    UINT32 lane0 : 2;
    /* lane0 - Bits[1:0], RWS_L, default = 2'b01  */
    UINT32 lane1 : 2;
    /* lane1 - Bits[3:2], RWS_L, default = 2'b01  */
    UINT32 lane2 : 2;
    /* lane2 - Bits[5:4], RWS_L, default = 2'b01  */
    UINT32 lane3 : 2;
    /* lane3 - Bits[7:6], RWS_L, default = 2'b01  */
    UINT32 lane4 : 2;
    /* lane4 - Bits[9:8], RWS_L, default = 2'b01  */
    UINT32 lane5 : 2;
    /* lane5 - Bits[11:10], RWS_L, default = 2'b01  */
    UINT32 lane6 : 2;
    /* lane6 - Bits[13:12], RWS_L, default = 2'b01  */
    UINT32 lane7 : 2;
    /* lane7 - Bits[15:14], RWS_L, default = 2'b01  */
    UINT32 lane8 : 2;
    /* lane8 - Bits[17:16], RWS_L, default = 2'b01  */
    UINT32 lane9 : 2;
    /* lane9 - Bits[19:18], RWS_L, default = 2'b01  */
    UINT32 lane10 : 2;
    /* lane10 - Bits[21:20], RWS_L, default = 2'b01  */
    UINT32 lane11 : 2;
    /* lane11 - Bits[23:22], RWS_L, default = 2'b01  */
    UINT32 lane12 : 2;
    /* lane12 - Bits[25:24], RWS_L, default = 2'b01  */
    UINT32 lane13 : 2;
    /* lane13 - Bits[27:26], RWS_L, default = 2'b01  */
    UINT32 lane14 : 2;
    /* lane14 - Bits[29:28], RWS_L, default = 2'b01  */
    UINT32 lane15 : 2;
    /* lane15 - Bits[31:30], RWS_L, default = 2'b01  */
  } Bits;
  UINT32 Data;
} CDR_ACQ_LENGTH_IIO_DFX_STRUCT;


/* CDR_BNDL_MODE_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138768)                                                  */
/*       SKX (0x40138768)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_BNDL_MODE_IIO_DFX_REG 0x12004768
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x768
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CDR_BNDL_MODE_IIO_DFX_STRUCT;


/* CDR_OPEN_LOOP_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x4013876C)                                                  */
/*       SKX (0x4013876C)                                                     */
/* Register default value:              0x00000000                            */
#define CDR_OPEN_LOOP_IIO_DFX_REG 0x1200476C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x76c
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CDR_OPEN_LOOP_IIO_DFX_STRUCT;


/* AGC_OPEN_LOOP_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138770)                                                  */
/*       SKX (0x40138770)                                                     */
/* Register default value:              0x00000000                            */
#define AGC_OPEN_LOOP_IIO_DFX_REG 0x12004770
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x770
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} AGC_OPEN_LOOP_IIO_DFX_STRUCT;


/* AGC_FORCE_ACQ_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138774)                                                  */
/*       SKX (0x40138774)                                                     */
/* Register default value:              0x00000000                            */
#define AGC_FORCE_ACQ_IIO_DFX_REG 0x12004774
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x774
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} AGC_FORCE_ACQ_IIO_DFX_STRUCT;


/* AGC_UPDATE_RATE_ACQ_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x40138778)                                                  */
/*       SKX (0x40138778)                                                     */
/* Register default value:              0x00000000                            */
#define AGC_UPDATE_RATE_ACQ_IIO_DFX_REG 0x12004778
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x778
 *             SKX: repurpose VREF gain track for data rate LT 8G
 *       00 = x0.03125 (*)
 *       01 = x0.0625
 *       10 = x0.125
 *       11 = x0.25
 *       
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} AGC_UPDATE_RATE_ACQ_IIO_DFX_STRUCT;


/* AGC_UPDATE_RATE_TRACK_IIO_DFX_REG supported on:                            */
/*       SKX_A0 (0x4013877C)                                                  */
/*       SKX (0x4013877C)                                                     */
/* Register default value:              0x00000000                            */
#define AGC_UPDATE_RATE_TRACK_IIO_DFX_REG 0x1200477C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x77c
 *             SKX: repurpose
 *       [0] = reset VREF FSM in L1
 *       [1] = unused
 *       
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} AGC_UPDATE_RATE_TRACK_IIO_DFX_STRUCT;


/* AGC_GAIN_ACQ_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138780)                                                  */
/*       SKX (0x40138780)                                                     */
/* Register default value:              0x0000FFFF                            */
#define AGC_GAIN_ACQ_IIO_DFX_REG 0x12004780
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x780
 *             SKX: repurpose for vref_gain_acq for data rate LT 8G
 *       00 = x0.5
 *       01 = x4.0
 *       10 = x2.0
 *       11 = x1.0 (*)
 *       
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b11  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b11  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b11  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b11  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b11  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b11  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b11  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b11  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} AGC_GAIN_ACQ_IIO_DFX_STRUCT;


/* AGC_GAIN_TRACK_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138784)                                                  */
/*       SKX (0x40138784)                                                     */
/* Register default value:              0x0000FFFF                            */
#define AGC_GAIN_TRACK_IIO_DFX_REG 0x12004784
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x784
 *             SKX: repurpose for vref_gain_acq for data rate GE 8G
 *       00 = x0.5
 *       01 = x4.0
 *       10 = x2.0
 *       11 = x1.0 (*)
 *       
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b11  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b11  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b11  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b11  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b11  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b11  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b11  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b11  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} AGC_GAIN_TRACK_IIO_DFX_STRUCT;


/* AGC_ACQ_LENGTH_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138788)                                                  */
/*       SKX (0x40138788)                                                     */
/* Register default value:              0x55555555                            */
#define AGC_ACQ_LENGTH_IIO_DFX_REG 0x12004788
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x788
 *           SKX: repurpose for VREF acq_length for data rate LT 8G 
 * 	Length of time to stay in high gain (vref_gain_acq) mode
 * 	00 = 1024 (x32UI)
 * 	01 = 256 (x32UI)  default value
 * 	10 = 64 (x32UI)
 * 	11 = 32 (x32UI)
 *       
 */
typedef union {
  struct {
    UINT32 lane0 : 2;
    /* lane0 - Bits[1:0], RWS_L, default = 2'b01  */
    UINT32 lane1 : 2;
    /* lane1 - Bits[3:2], RWS_L, default = 2'b01  */
    UINT32 lane2 : 2;
    /* lane2 - Bits[5:4], RWS_L, default = 2'b01  */
    UINT32 lane3 : 2;
    /* lane3 - Bits[7:6], RWS_L, default = 2'b01  */
    UINT32 lane4 : 2;
    /* lane4 - Bits[9:8], RWS_L, default = 2'b01  */
    UINT32 lane5 : 2;
    /* lane5 - Bits[11:10], RWS_L, default = 2'b01  */
    UINT32 lane6 : 2;
    /* lane6 - Bits[13:12], RWS_L, default = 2'b01  */
    UINT32 lane7 : 2;
    /* lane7 - Bits[15:14], RWS_L, default = 2'b01  */
    UINT32 lane8 : 2;
    /* lane8 - Bits[17:16], RWS_L, default = 2'b01  */
    UINT32 lane9 : 2;
    /* lane9 - Bits[19:18], RWS_L, default = 2'b01  */
    UINT32 lane10 : 2;
    /* lane10 - Bits[21:20], RWS_L, default = 2'b01  */
    UINT32 lane11 : 2;
    /* lane11 - Bits[23:22], RWS_L, default = 2'b01  */
    UINT32 lane12 : 2;
    /* lane12 - Bits[25:24], RWS_L, default = 2'b01  */
    UINT32 lane13 : 2;
    /* lane13 - Bits[27:26], RWS_L, default = 2'b01  */
    UINT32 lane14 : 2;
    /* lane14 - Bits[29:28], RWS_L, default = 2'b01  */
    UINT32 lane15 : 2;
    /* lane15 - Bits[31:30], RWS_L, default = 2'b01  */
  } Bits;
  UINT32 Data;
} AGC_ACQ_LENGTH_IIO_DFX_STRUCT;


/* RX_AGC_USE_ERR_DATA_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x40138790)                                                  */
/*       SKX (0x40138790)                                                     */
/* Register default value:              0x0000FFFF                            */
#define RX_AGC_USE_ERR_DATA_IIO_DFX_REG 0x12004790
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x790
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b1  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b1  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b1  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b1  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b1  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b1  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b1  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b1  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b1  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b1  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b1  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b1  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b1  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b1  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b1  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b1  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_AGC_USE_ERR_DATA_IIO_DFX_STRUCT;


/* DFE_FORCE_ACQ_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138794)                                                  */
/*       SKX (0x40138794)                                                     */
/* Register default value:              0x00000000                            */
#define DFE_FORCE_ACQ_IIO_DFX_REG 0x12004794
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x794
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFE_FORCE_ACQ_IIO_DFX_STRUCT;


/* DFE_GAIN_ACQ_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138798)                                                  */
/*       SKX (0x40138798)                                                     */
/* Register default value:              0x0000AAAA                            */
#define DFE_GAIN_ACQ_IIO_DFX_REG 0x12004798
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x798
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'd2  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'd2  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'd2  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'd2  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'd2  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'd2  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'd2  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'd2  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFE_GAIN_ACQ_IIO_DFX_STRUCT;


/* DFE_GAIN_TRACK_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x4013879C)                                                  */
/*       SKX (0x4013879C)                                                     */
/* Register default value:              0x00005555                            */
#define DFE_GAIN_TRACK_IIO_DFX_REG 0x1200479C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x79c
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'd1  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'd1  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'd1  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'd1  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'd1  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'd1  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'd1  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'd1  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFE_GAIN_TRACK_IIO_DFX_STRUCT;


/* DFE_OPEN_LOOP_TAP_0_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x401387A0)                                                  */
/*       SKX (0x401387A0)                                                     */
/* Register default value:              0x00000000                            */
#define DFE_OPEN_LOOP_TAP_0_IIO_DFX_REG 0x120047A0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x7a0
 */
typedef union {
  struct {
    UINT32 lane0 : 4;
    /* lane0 - Bits[3:0], RWS_L, default = 4'b0000  */
    UINT32 lane1 : 4;
    /* lane1 - Bits[7:4], RWS_L, default = 4'b0000  */
    UINT32 lane2 : 4;
    /* lane2 - Bits[11:8], RWS_L, default = 4'b0000  */
    UINT32 lane3 : 4;
    /* lane3 - Bits[15:12], RWS_L, default = 4'b0000  */
    UINT32 lane4 : 4;
    /* lane4 - Bits[19:16], RWS_L, default = 4'b0000  */
    UINT32 lane5 : 4;
    /* lane5 - Bits[23:20], RWS_L, default = 4'b0000  */
    UINT32 lane6 : 4;
    /* lane6 - Bits[27:24], RWS_L, default = 4'b0000  */
    UINT32 lane7 : 4;
    /* lane7 - Bits[31:28], RWS_L, default = 4'b0000  */
  } Bits;
  UINT32 Data;
} DFE_OPEN_LOOP_TAP_0_IIO_DFX_STRUCT;


/* DFE_OPEN_LOOP_TAP_1_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x401387A4)                                                  */
/*       SKX (0x401387A4)                                                     */
/* Register default value:              0x00000000                            */
#define DFE_OPEN_LOOP_TAP_1_IIO_DFX_REG 0x120047A4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x7a4
 */
typedef union {
  struct {
    UINT32 lane8 : 4;
    /* lane8 - Bits[3:0], RWS_L, default = 4'b0000  */
    UINT32 lane9 : 4;
    /* lane9 - Bits[7:4], RWS_L, default = 4'b0000  */
    UINT32 lane10 : 4;
    /* lane10 - Bits[11:8], RWS_L, default = 4'b0000  */
    UINT32 lane11 : 4;
    /* lane11 - Bits[15:12], RWS_L, default = 4'b0000  */
    UINT32 lane12 : 4;
    /* lane12 - Bits[19:16], RWS_L, default = 4'b0000  */
    UINT32 lane13 : 4;
    /* lane13 - Bits[23:20], RWS_L, default = 4'b0000  */
    UINT32 lane14 : 4;
    /* lane14 - Bits[27:24], RWS_L, default = 4'b0000  */
    UINT32 lane15 : 4;
    /* lane15 - Bits[31:28], RWS_L, default = 4'b0000  */
  } Bits;
  UINT32 Data;
} DFE_OPEN_LOOP_TAP_1_IIO_DFX_STRUCT;


/* DFE_ACQ_LENGTH_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x401387B0)                                                  */
/*       SKX (0x401387B0)                                                     */
/* Register default value:              0xAAAAAAAA                            */
#define DFE_ACQ_LENGTH_IIO_DFX_REG 0x120047B0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x7b0
 */
typedef union {
  struct {
    UINT32 lane0 : 2;
    /* lane0 - Bits[1:0], RWS_L, default = 2'd2  */
    UINT32 lane1 : 2;
    /* lane1 - Bits[3:2], RWS_L, default = 2'd2  */
    UINT32 lane2 : 2;
    /* lane2 - Bits[5:4], RWS_L, default = 2'd2  */
    UINT32 lane3 : 2;
    /* lane3 - Bits[7:6], RWS_L, default = 2'd2  */
    UINT32 lane4 : 2;
    /* lane4 - Bits[9:8], RWS_L, default = 2'd2  */
    UINT32 lane5 : 2;
    /* lane5 - Bits[11:10], RWS_L, default = 2'd2  */
    UINT32 lane6 : 2;
    /* lane6 - Bits[13:12], RWS_L, default = 2'd2  */
    UINT32 lane7 : 2;
    /* lane7 - Bits[15:14], RWS_L, default = 2'd2  */
    UINT32 lane8 : 2;
    /* lane8 - Bits[17:16], RWS_L, default = 2'd2  */
    UINT32 lane9 : 2;
    /* lane9 - Bits[19:18], RWS_L, default = 2'd2  */
    UINT32 lane10 : 2;
    /* lane10 - Bits[21:20], RWS_L, default = 2'd2  */
    UINT32 lane11 : 2;
    /* lane11 - Bits[23:22], RWS_L, default = 2'd2  */
    UINT32 lane12 : 2;
    /* lane12 - Bits[25:24], RWS_L, default = 2'd2  */
    UINT32 lane13 : 2;
    /* lane13 - Bits[27:26], RWS_L, default = 2'd2  */
    UINT32 lane14 : 2;
    /* lane14 - Bits[29:28], RWS_L, default = 2'd2  */
    UINT32 lane15 : 2;
    /* lane15 - Bits[31:30], RWS_L, default = 2'd2  */
  } Bits;
  UINT32 Data;
} DFE_ACQ_LENGTH_IIO_DFX_STRUCT;


/* DFE_UPDATE_RATE_ACQ_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x401387B8)                                                  */
/*       SKX (0x401387B8)                                                     */
/* Register default value:              0x00005555                            */
#define DFE_UPDATE_RATE_ACQ_IIO_DFX_REG 0x120047B8
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x7b8
 *        SKX: repurpose for VREF acq_length for data rate GE 8G 
 * 	Length of time to stay in high gain (vref_gain_acq) mode
 * 	00 = 1024 (x32UI)
 * 	01 = 256 (x32UI)  default value
 * 	10 = 64 (x32UI)
 * 	11 = 32 (x32UI)
 *       
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b01  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b01  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b01  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b01  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b01  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b01  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b01  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b01  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFE_UPDATE_RATE_ACQ_IIO_DFX_STRUCT;


/* DFE_UPDATE_RATE_TRACK_IIO_DFX_REG supported on:                            */
/*       SKX_A0 (0x401387BC)                                                  */
/*       SKX (0x401387BC)                                                     */
/* Register default value:              0x00000000                            */
#define DFE_UPDATE_RATE_TRACK_IIO_DFX_REG 0x120047BC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x7bc
 *          SKX: repurpose for VREF gain track for data rate GE 8G
 *       00 = x0.03125 (*)
 *       01 = x0.0625
 *       10 = x0.125
 *       11 = x0.25
 *       
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFE_UPDATE_RATE_TRACK_IIO_DFX_STRUCT;


/* WSEL_IIO_DFX_REG supported on:                                             */
/*       SKX_A0 (0x401387C0)                                                  */
/*       SKX (0x401387C0)                                                     */
/* Register default value:              0x00B6DB6D                            */
#define WSEL_IIO_DFX_REG 0x120047C0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x7c0
 */
typedef union {
  struct {
    UINT32 bndl0 : 3;
    /* bndl0 - Bits[2:0], RWS_L, default = 3'b101  */
    UINT32 bndl1 : 3;
    /* bndl1 - Bits[5:3], RWS_L, default = 3'b101  */
    UINT32 bndl2 : 3;
    /* bndl2 - Bits[8:6], RWS_L, default = 3'b101  */
    UINT32 bndl3 : 3;
    /* bndl3 - Bits[11:9], RWS_L, default = 3'b101  */
    UINT32 bndl4 : 3;
    /* bndl4 - Bits[14:12], RWS_L, default = 3'b101  */
    UINT32 bndl5 : 3;
    /* bndl5 - Bits[17:15], RWS_L, default = 3'b101  */
    UINT32 bndl6 : 3;
    /* bndl6 - Bits[20:18], RWS_L, default = 3'b101  */
    UINT32 bndl7 : 3;
    /* bndl7 - Bits[23:21], RWS_L, default = 3'b101  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} WSEL_IIO_DFX_STRUCT;


/* VOTECNT_IIO_DFX_REG supported on:                                          */
/*       SKX_A0 (0x401387C4)                                                  */
/*       SKX (0x401387C4)                                                     */
/* Register default value:              0x00005555                            */
#define VOTECNT_IIO_DFX_REG 0x120047C4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x7c4
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b01  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b01  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b01  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b01  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b01  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b01  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b01  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b01  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} VOTECNT_IIO_DFX_STRUCT;


/* TX_RTERM_DIS_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x401387D0)                                                  */
/*       SKX (0x401387D0)                                                     */
/* Register default value:              0x00000000                            */
#define TX_RTERM_DIS_IIO_DFX_REG 0x120047D0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x7d0
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_RTERM_DIS_IIO_DFX_STRUCT;


/* TX_RTERM_PULLHIGH_N_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x401387D4)                                                  */
/*       SKX (0x401387D4)                                                     */
/* Register default value:              0xFFFFFFFF                            */
#define TX_RTERM_PULLHIGH_N_IIO_DFX_REG 0x120047D4
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x7d4
 */
typedef union {
  struct {
    UINT32 lane0 : 2;
    /* lane0 - Bits[1:0], RWS_L, default = 2'b11  */
    UINT32 lane1 : 2;
    /* lane1 - Bits[3:2], RWS_L, default = 2'b11  */
    UINT32 lane2 : 2;
    /* lane2 - Bits[5:4], RWS_L, default = 2'b11  */
    UINT32 lane3 : 2;
    /* lane3 - Bits[7:6], RWS_L, default = 2'b11  */
    UINT32 lane4 : 2;
    /* lane4 - Bits[9:8], RWS_L, default = 2'b11  */
    UINT32 lane5 : 2;
    /* lane5 - Bits[11:10], RWS_L, default = 2'b11  */
    UINT32 lane6 : 2;
    /* lane6 - Bits[13:12], RWS_L, default = 2'b11  */
    UINT32 lane7 : 2;
    /* lane7 - Bits[15:14], RWS_L, default = 2'b11  */
    UINT32 lane8 : 2;
    /* lane8 - Bits[17:16], RWS_L, default = 2'b11  */
    UINT32 lane9 : 2;
    /* lane9 - Bits[19:18], RWS_L, default = 2'b11  */
    UINT32 lane10 : 2;
    /* lane10 - Bits[21:20], RWS_L, default = 2'b11  */
    UINT32 lane11 : 2;
    /* lane11 - Bits[23:22], RWS_L, default = 2'b11  */
    UINT32 lane12 : 2;
    /* lane12 - Bits[25:24], RWS_L, default = 2'b11  */
    UINT32 lane13 : 2;
    /* lane13 - Bits[27:26], RWS_L, default = 2'b11  */
    UINT32 lane14 : 2;
    /* lane14 - Bits[29:28], RWS_L, default = 2'b11  */
    UINT32 lane15 : 2;
    /* lane15 - Bits[31:30], RWS_L, default = 2'b11  */
  } Bits;
  UINT32 Data;
} TX_RTERM_PULLHIGH_N_IIO_DFX_STRUCT;


/* TX_RTERM_PULLHIGH_P_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x401387DC)                                                  */
/*       SKX (0x401387DC)                                                     */
/* Register default value:              0xFFFFFFFF                            */
#define TX_RTERM_PULLHIGH_P_IIO_DFX_REG 0x120047DC
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x7dc
 */
typedef union {
  struct {
    UINT32 lane0 : 2;
    /* lane0 - Bits[1:0], RWS_L, default = 2'b11  */
    UINT32 lane1 : 2;
    /* lane1 - Bits[3:2], RWS_L, default = 2'b11  */
    UINT32 lane2 : 2;
    /* lane2 - Bits[5:4], RWS_L, default = 2'b11  */
    UINT32 lane3 : 2;
    /* lane3 - Bits[7:6], RWS_L, default = 2'b11  */
    UINT32 lane4 : 2;
    /* lane4 - Bits[9:8], RWS_L, default = 2'b11  */
    UINT32 lane5 : 2;
    /* lane5 - Bits[11:10], RWS_L, default = 2'b11  */
    UINT32 lane6 : 2;
    /* lane6 - Bits[13:12], RWS_L, default = 2'b11  */
    UINT32 lane7 : 2;
    /* lane7 - Bits[15:14], RWS_L, default = 2'b11  */
    UINT32 lane8 : 2;
    /* lane8 - Bits[17:16], RWS_L, default = 2'b11  */
    UINT32 lane9 : 2;
    /* lane9 - Bits[19:18], RWS_L, default = 2'b11  */
    UINT32 lane10 : 2;
    /* lane10 - Bits[21:20], RWS_L, default = 2'b11  */
    UINT32 lane11 : 2;
    /* lane11 - Bits[23:22], RWS_L, default = 2'b11  */
    UINT32 lane12 : 2;
    /* lane12 - Bits[25:24], RWS_L, default = 2'b11  */
    UINT32 lane13 : 2;
    /* lane13 - Bits[27:26], RWS_L, default = 2'b11  */
    UINT32 lane14 : 2;
    /* lane14 - Bits[29:28], RWS_L, default = 2'b11  */
    UINT32 lane15 : 2;
    /* lane15 - Bits[31:30], RWS_L, default = 2'b11  */
  } Bits;
  UINT32 Data;
} TX_RTERM_PULLHIGH_P_IIO_DFX_STRUCT;


/* TX_RX_DET_IIO_DFX_REG supported on:                                        */
/*       SKX_A0 (0x40138804)                                                  */
/*       SKX (0x40138804)                                                     */
/* Register default value:              0x0000FFFF                            */
#define TX_RX_DET_IIO_DFX_REG 0x12004804
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x804
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RO_V, default = 1'b1  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RO_V, default = 1'b1  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RO_V, default = 1'b1  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RO_V, default = 1'b1  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RO_V, default = 1'b1  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RO_V, default = 1'b1  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RO_V, default = 1'b1  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RO_V, default = 1'b1  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RO_V, default = 1'b1  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RO_V, default = 1'b1  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RO_V, default = 1'b1  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RO_V, default = 1'b1  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RO_V, default = 1'b1  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RO_V, default = 1'b1  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RO_V, default = 1'b1  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RO_V, default = 1'b1  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_RX_DET_IIO_DFX_STRUCT;


/* TX_SPARE_0_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138808)                                                  */
/*       SKX (0x40138808)                                                     */
/* Register default value:              0x88888888                            */
#define TX_SPARE_0_IIO_DFX_REG 0x12004808
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x808
 *       [3]: (*) reset CDR FSM and accumulator at exit of L1. (VREF FSM can be 
 * reset at L1 exit by setting agc_udpate_rate_track[0]) 
 *       [2]: simulation hook to skip DDR calibration. Mask off 
 * pcie_rate_change_det to RXTXDIG_OFFSCAL 
 *       [1:0]: unused
 *       
 */
typedef union {
  struct {
    UINT32 lane0 : 4;
    /* lane0 - Bits[3:0], RWS_L, default = 4'h8  */
    UINT32 lane1 : 4;
    /* lane1 - Bits[7:4], RWS_L, default = 4'h8  */
    UINT32 lane2 : 4;
    /* lane2 - Bits[11:8], RWS_L, default = 4'h8  */
    UINT32 lane3 : 4;
    /* lane3 - Bits[15:12], RWS_L, default = 4'h8  */
    UINT32 lane4 : 4;
    /* lane4 - Bits[19:16], RWS_L, default = 4'h8  */
    UINT32 lane5 : 4;
    /* lane5 - Bits[23:20], RWS_L, default = 4'h8  */
    UINT32 lane6 : 4;
    /* lane6 - Bits[27:24], RWS_L, default = 4'h8  */
    UINT32 lane7 : 4;
    /* lane7 - Bits[31:28], RWS_L, default = 4'h8  */
  } Bits;
  UINT32 Data;
} TX_SPARE_0_IIO_DFX_STRUCT;


/* TX_SPARE_1_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x4013880C)                                                  */
/*       SKX (0x4013880C)                                                     */
/* Register default value:              0x88888888                            */
#define TX_SPARE_1_IIO_DFX_REG 0x1200480C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x80c
 */
typedef union {
  struct {
    UINT32 lane8 : 4;
    /* lane8 - Bits[3:0], RWS_L, default = 4'h8  */
    UINT32 lane9 : 4;
    /* lane9 - Bits[7:4], RWS_L, default = 4'h8  */
    UINT32 lane10 : 4;
    /* lane10 - Bits[11:8], RWS_L, default = 4'h8  */
    UINT32 lane11 : 4;
    /* lane11 - Bits[15:12], RWS_L, default = 4'h8  */
    UINT32 lane12 : 4;
    /* lane12 - Bits[19:16], RWS_L, default = 4'h8  */
    UINT32 lane13 : 4;
    /* lane13 - Bits[23:20], RWS_L, default = 4'h8  */
    UINT32 lane14 : 4;
    /* lane14 - Bits[27:24], RWS_L, default = 4'h8  */
    UINT32 lane15 : 4;
    /* lane15 - Bits[31:28], RWS_L, default = 4'h8  */
  } Bits;
  UINT32 Data;
} TX_SPARE_1_IIO_DFX_STRUCT;


/* TX_LCL_ICOMP_DIS_IIO_DFX_REG supported on:                                 */
/*       SKX_A0 (0x40138818)                                                  */
/*       SKX (0x40138818)                                                     */
/* Register default value:              0x00000000                            */
#define TX_LCL_ICOMP_DIS_IIO_DFX_REG 0x12004818
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x818
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_LCL_ICOMP_DIS_IIO_DFX_STRUCT;


/* TX_DRVSW_CTL_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x4013881C)                                                  */
/*       SKX (0x4013881C)                                                     */
/* Register default value:              0x00000000                            */
#define TX_DRVSW_CTL_IIO_DFX_REG 0x1200481C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x81c
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_DRVSW_CTL_IIO_DFX_STRUCT;


/* TX_DRVSW_ON_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138820)                                                  */
/*       SKX (0x40138820)                                                     */
/* Register default value:              0x55555555                            */
#define TX_DRVSW_ON_IIO_DFX_REG 0x12004820
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x820
 */
typedef union {
  struct {
    UINT32 lane0 : 2;
    /* lane0 - Bits[1:0], RWS_L, default = 2'b01  */
    UINT32 lane1 : 2;
    /* lane1 - Bits[3:2], RWS_L, default = 2'b01  */
    UINT32 lane2 : 2;
    /* lane2 - Bits[5:4], RWS_L, default = 2'b01  */
    UINT32 lane3 : 2;
    /* lane3 - Bits[7:6], RWS_L, default = 2'b01  */
    UINT32 lane4 : 2;
    /* lane4 - Bits[9:8], RWS_L, default = 2'b01  */
    UINT32 lane5 : 2;
    /* lane5 - Bits[11:10], RWS_L, default = 2'b01  */
    UINT32 lane6 : 2;
    /* lane6 - Bits[13:12], RWS_L, default = 2'b01  */
    UINT32 lane7 : 2;
    /* lane7 - Bits[15:14], RWS_L, default = 2'b01  */
    UINT32 lane8 : 2;
    /* lane8 - Bits[17:16], RWS_L, default = 2'b01  */
    UINT32 lane9 : 2;
    /* lane9 - Bits[19:18], RWS_L, default = 2'b01  */
    UINT32 lane10 : 2;
    /* lane10 - Bits[21:20], RWS_L, default = 2'b01  */
    UINT32 lane11 : 2;
    /* lane11 - Bits[23:22], RWS_L, default = 2'b01  */
    UINT32 lane12 : 2;
    /* lane12 - Bits[25:24], RWS_L, default = 2'b01  */
    UINT32 lane13 : 2;
    /* lane13 - Bits[27:26], RWS_L, default = 2'b01  */
    UINT32 lane14 : 2;
    /* lane14 - Bits[29:28], RWS_L, default = 2'b01  */
    UINT32 lane15 : 2;
    /* lane15 - Bits[31:30], RWS_L, default = 2'b01  */
  } Bits;
  UINT32 Data;
} TX_DRVSW_ON_IIO_DFX_STRUCT;


/* TX_DTSW_CTL_0_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138828)                                                  */
/*       SKX (0x40138828)                                                     */
/* Register default value:              0x44444444                            */
#define TX_DTSW_CTL_0_IIO_DFX_REG 0x12004828
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x828
 */
typedef union {
  struct {
    UINT32 lane0 : 4;
    /* lane0 - Bits[3:0], RWS_L, default = 4'b0100  */
    UINT32 lane1 : 4;
    /* lane1 - Bits[7:4], RWS_L, default = 4'b0100  */
    UINT32 lane2 : 4;
    /* lane2 - Bits[11:8], RWS_L, default = 4'b0100  */
    UINT32 lane3 : 4;
    /* lane3 - Bits[15:12], RWS_L, default = 4'b0100  */
    UINT32 lane4 : 4;
    /* lane4 - Bits[19:16], RWS_L, default = 4'b0100  */
    UINT32 lane5 : 4;
    /* lane5 - Bits[23:20], RWS_L, default = 4'b0100  */
    UINT32 lane6 : 4;
    /* lane6 - Bits[27:24], RWS_L, default = 4'b0100  */
    UINT32 lane7 : 4;
    /* lane7 - Bits[31:28], RWS_L, default = 4'b0100  */
  } Bits;
  UINT32 Data;
} TX_DTSW_CTL_0_IIO_DFX_STRUCT;


/* TX_DTSW_CTL_1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x4013882C)                                                  */
/*       SKX (0x4013882C)                                                     */
/* Register default value:              0x44444444                            */
#define TX_DTSW_CTL_1_IIO_DFX_REG 0x1200482C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x82c
 */
typedef union {
  struct {
    UINT32 lane8 : 4;
    /* lane8 - Bits[3:0], RWS_L, default = 4'b0100  */
    UINT32 lane9 : 4;
    /* lane9 - Bits[7:4], RWS_L, default = 4'b0100  */
    UINT32 lane10 : 4;
    /* lane10 - Bits[11:8], RWS_L, default = 4'b0100  */
    UINT32 lane11 : 4;
    /* lane11 - Bits[15:12], RWS_L, default = 4'b0100  */
    UINT32 lane12 : 4;
    /* lane12 - Bits[19:16], RWS_L, default = 4'b0100  */
    UINT32 lane13 : 4;
    /* lane13 - Bits[23:20], RWS_L, default = 4'b0100  */
    UINT32 lane14 : 4;
    /* lane14 - Bits[27:24], RWS_L, default = 4'b0100  */
    UINT32 lane15 : 4;
    /* lane15 - Bits[31:28], RWS_L, default = 4'b0100  */
  } Bits;
  UINT32 Data;
} TX_DTSW_CTL_1_IIO_DFX_STRUCT;


/* TX_IREF_CTL_0_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138838)                                                  */
/*       SKX (0x40138838)                                                     */
/* Register default value:              0x04210842                            */
#define TX_IREF_CTL_0_IIO_DFX_REG 0x12004838
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x838
 */
typedef union {
  struct {
    UINT32 bndl0 : 5;
    /* bndl0 - Bits[4:0], RWS_L, default = 5'h2  */
    UINT32 bndl1 : 5;
    /* bndl1 - Bits[9:5], RWS_L, default = 5'h2  */
    UINT32 bndl2 : 5;
    /* bndl2 - Bits[14:10], RWS_L, default = 5'h2  */
    UINT32 bndl3 : 5;
    /* bndl3 - Bits[19:15], RWS_L, default = 5'h2  */
    UINT32 bndl4 : 5;
    /* bndl4 - Bits[24:20], RWS_L, default = 5'h2  */
    UINT32 bndl5 : 5;
    /* bndl5 - Bits[29:25], RWS_L, default = 5'h2  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_IREF_CTL_0_IIO_DFX_STRUCT;


/* TX_IREF_CTL_1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x4013883C)                                                  */
/*       SKX (0x4013883C)                                                     */
/* Register default value:              0x00000042                            */
#define TX_IREF_CTL_1_IIO_DFX_REG 0x1200483C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x83c
 */
typedef union {
  struct {
    UINT32 bndl6 : 5;
    /* bndl6 - Bits[4:0], RWS_L, default = 5'h2  */
    UINT32 bndl7 : 5;
    /* bndl7 - Bits[9:5], RWS_L, default = 5'h2  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_IREF_CTL_1_IIO_DFX_STRUCT;


/* TX_VREF_SEL_0_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138840)                                                  */
/*       SKX (0x40138840)                                                     */
/* Register default value:              0x16B5AD6B                            */
#define TX_VREF_SEL_0_IIO_DFX_REG 0x12004840
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x840
 */
typedef union {
  struct {
    UINT32 bndl0 : 5;
    /* bndl0 - Bits[4:0], RWS_L, default = 5'b01011  */
    UINT32 bndl1 : 5;
    /* bndl1 - Bits[9:5], RWS_L, default = 5'b01011  */
    UINT32 bndl2 : 5;
    /* bndl2 - Bits[14:10], RWS_L, default = 5'b01011  */
    UINT32 bndl3 : 5;
    /* bndl3 - Bits[19:15], RWS_L, default = 5'b01011  */
    UINT32 bndl4 : 5;
    /* bndl4 - Bits[24:20], RWS_L, default = 5'b01011  */
    UINT32 bndl5 : 5;
    /* bndl5 - Bits[29:25], RWS_L, default = 5'b01011  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_VREF_SEL_0_IIO_DFX_STRUCT;


/* TX_VREF_SEL_1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138844)                                                  */
/*       SKX (0x40138844)                                                     */
/* Register default value:              0x0000016B                            */
#define TX_VREF_SEL_1_IIO_DFX_REG 0x12004844
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x844
 */
typedef union {
  struct {
    UINT32 bndl6 : 5;
    /* bndl6 - Bits[4:0], RWS_L, default = 5'b01011  */
    UINT32 bndl7 : 5;
    /* bndl7 - Bits[9:5], RWS_L, default = 5'b01011  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_VREF_SEL_1_IIO_DFX_STRUCT;


/* TX_RXLPCLK_SEL_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138848)                                                  */
/*       SKX (0x40138848)                                                     */
/* Register default value:              0x00000000                            */
#define TX_RXLPCLK_SEL_IIO_DFX_REG 0x12004848
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x848
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_RXLPCLK_SEL_IIO_DFX_STRUCT;


/* TX_SENSE_LANE_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x4013884C)                                                  */
/*       SKX (0x4013884C)                                                     */
/* Register default value:              0x00000000                            */
#define TX_SENSE_LANE_IIO_DFX_REG 0x1200484C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x84c
 */
typedef union {
  struct {
    UINT32 bndl0 : 1;
    /* bndl0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 bndl1 : 1;
    /* bndl1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 bndl2 : 1;
    /* bndl2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 bndl3 : 1;
    /* bndl3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 bndl4 : 1;
    /* bndl4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 bndl5 : 1;
    /* bndl5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 bndl6 : 1;
    /* bndl6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 bndl7 : 1;
    /* bndl7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_SENSE_LANE_IIO_DFX_STRUCT;


/* OC_START_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138868)                                                  */
/*       SKX (0x40138868)                                                     */
/* Register default value:              0x00000000                            */
#define OC_START_IIO_DFX_REG 0x12004868
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x868
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 14;
    /* rsvd - Bits[29:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 afe_req_oc : 1;
    /* afe_req_oc - Bits[30:30], RWS_L, default = 1'b0  */
    UINT32 override_enable : 1;
    /* override_enable - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} OC_START_IIO_DFX_STRUCT;


/* OC_DONE_IIO_DFX_REG supported on:                                          */
/*       SKX_A0 (0x4013886C)                                                  */
/*       SKX (0x4013886C)                                                     */
/* Register default value:              0x00000000                            */
#define OC_DONE_IIO_DFX_REG 0x1200486C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x86c
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RO_V, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RO_V, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RO_V, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RO_V, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RO_V, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RO_V, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RO_V, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RO_V, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RO_V, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RO_V, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RO_V, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RO_V, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RO_V, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RO_V, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RO_V, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RO_V, default = 1'b0  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} OC_DONE_IIO_DFX_STRUCT;


/* L0S_RX_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x40138870)                                                  */
/*       SKX (0x40138870)                                                     */
/* Register default value:              0x00000000                            */
#define L0S_RX_IIO_DFX_REG 0x12004870
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x870
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 15;
    /* rsvd - Bits[30:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 override_enable : 1;
    /* override_enable - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} L0S_RX_IIO_DFX_STRUCT;


/* L0S_TX_IIO_DFX_REG supported on:                                           */
/*       SKX_A0 (0x40138874)                                                  */
/*       SKX (0x40138874)                                                     */
/* Register default value:              0x00000000                            */
#define L0S_TX_IIO_DFX_REG 0x12004874
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x874
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 15;
    /* rsvd - Bits[30:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 override_enable : 1;
    /* override_enable - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} L0S_TX_IIO_DFX_STRUCT;


/* L1_MODE_IIO_DFX_REG supported on:                                          */
/*       SKX_A0 (0x40138878)                                                  */
/*       SKX (0x40138878)                                                     */
/* Register default value:              0x00000000                            */
#define L1_MODE_IIO_DFX_REG 0x12004878
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x878
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 15;
    /* rsvd - Bits[30:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 override_enable : 1;
    /* override_enable - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} L1_MODE_IIO_DFX_STRUCT;


/* RX_LANE_CAL_RST_IIO_DFX_REG supported on:                                  */
/*       SKX_A0 (0x4013887C)                                                  */
/*       SKX (0x4013887C)                                                     */
/* Register default value:              0x00000000                            */
#define RX_LANE_CAL_RST_IIO_DFX_REG 0x1200487C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x87c
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 15;
    /* rsvd - Bits[30:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 override_enable : 1;
    /* override_enable - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} RX_LANE_CAL_RST_IIO_DFX_STRUCT;


/* RX_RESET_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138880)                                                  */
/*       SKX (0x40138880)                                                     */
/* Register default value:              0x00000000                            */
#define RX_RESET_IIO_DFX_REG 0x12004880
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x880
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 15;
    /* rsvd - Bits[30:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 override_enable : 1;
    /* override_enable - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} RX_RESET_IIO_DFX_STRUCT;


/* TX_RESET_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138884)                                                  */
/*       SKX (0x40138884)                                                     */
/* Register default value:              0x00000000                            */
#define TX_RESET_IIO_DFX_REG 0x12004884
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x884
 */
typedef union {
  struct {
    UINT32 lane0 : 1;
    /* lane0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 lane1 : 1;
    /* lane1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 lane2 : 1;
    /* lane2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 lane3 : 1;
    /* lane3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 lane4 : 1;
    /* lane4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 lane5 : 1;
    /* lane5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 lane6 : 1;
    /* lane6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 lane7 : 1;
    /* lane7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 lane8 : 1;
    /* lane8 - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 lane9 : 1;
    /* lane9 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 lane10 : 1;
    /* lane10 - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 lane11 : 1;
    /* lane11 - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 lane12 : 1;
    /* lane12 - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 lane13 : 1;
    /* lane13 - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 lane14 : 1;
    /* lane14 - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 lane15 : 1;
    /* lane15 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 rsvd : 15;
    /* rsvd - Bits[30:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 override_enable : 1;
    /* override_enable - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} TX_RESET_IIO_DFX_STRUCT;


/* BNDL_RST_IIO_DFX_REG supported on:                                         */
/*       SKX_A0 (0x40138888)                                                  */
/*       SKX (0x40138888)                                                     */
/* Register default value:              0x00000000                            */
#define BNDL_RST_IIO_DFX_REG 0x12004888
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x888
 */
typedef union {
  struct {
    UINT32 bndl0 : 1;
    /* bndl0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 bndl1 : 1;
    /* bndl1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 bndl2 : 1;
    /* bndl2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 bndl3 : 1;
    /* bndl3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 bndl4 : 1;
    /* bndl4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 bndl5 : 1;
    /* bndl5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 bndl6 : 1;
    /* bndl6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 bndl7 : 1;
    /* bndl7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 rsvd : 23;
    /* rsvd - Bits[30:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 override_enable : 1;
    /* override_enable - Bits[31:31], RWS_L, default = 1'b0  */
  } Bits;
  UINT32 Data;
} BNDL_RST_IIO_DFX_STRUCT;


/* DFX_BDL_SEL_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x4013888C)                                                  */
/*       SKX (0x4013888C)                                                     */
/* Register default value:              0x00000000                            */
#define DFX_BDL_SEL_IIO_DFX_REG 0x1200488C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x88c
 */
typedef union {
  struct {
    UINT32 bndl0 : 1;
    /* bndl0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 bndl1 : 1;
    /* bndl1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 bndl2 : 1;
    /* bndl2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 bndl3 : 1;
    /* bndl3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 bndl4 : 1;
    /* bndl4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 bndl5 : 1;
    /* bndl5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 bndl6 : 1;
    /* bndl6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 bndl7 : 1;
    /* bndl7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFX_BDL_SEL_IIO_DFX_STRUCT;


/* EYEMON_TRIG_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138894)                                                  */
/*       SKX (0x40138894)                                                     */
/* Register default value:              0x00000000                            */
#define EYEMON_TRIG_IIO_DFX_REG 0x12004894
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x894
 */
typedef union {
  struct {
    UINT32 bndl0 : 1;
    /* bndl0 - Bits[0:0], RWS_LV, default = 1'b0  */
    UINT32 bndl1 : 1;
    /* bndl1 - Bits[1:1], RWS_LV, default = 1'b0  */
    UINT32 bndl2 : 1;
    /* bndl2 - Bits[2:2], RWS_LV, default = 1'b0  */
    UINT32 bndl3 : 1;
    /* bndl3 - Bits[3:3], RWS_LV, default = 1'b0  */
    UINT32 bndl4 : 1;
    /* bndl4 - Bits[4:4], RWS_LV, default = 1'b0  */
    UINT32 bndl5 : 1;
    /* bndl5 - Bits[5:5], RWS_LV, default = 1'b0  */
    UINT32 bndl6 : 1;
    /* bndl6 - Bits[6:6], RWS_LV, default = 1'b0  */
    UINT32 bndl7 : 1;
    /* bndl7 - Bits[7:7], RWS_LV, default = 1'b0  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} EYEMON_TRIG_IIO_DFX_STRUCT;


/* TAGSUSEDCNT_IIO_DFX_REG supported on:                                      */
/*       SKX_A0 (0x40138898)                                                  */
/*       SKX (0x40138898)                                                     */
/* Register default value:              0x00000000                            */
#define TAGSUSEDCNT_IIO_DFX_REG 0x12004898
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0x898
 */
typedef union {
  struct {
    UINT32 alltagsusedcnt : 32;
    /* alltagsusedcnt - Bits[31:0], RW, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} TAGSUSEDCNT_IIO_DFX_STRUCT;


/* BNDL_SPARE2_0_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138A00)                                                  */
/*       SKX (0x40138A00)                                                     */
/* Register default value:              0x00000000                            */
#define BNDL_SPARE2_0_IIO_DFX_REG 0x12004A00
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa00
 *         Unused in UniPhy
 *       
 */
typedef union {
  struct {
    UINT32 bndl0 : 8;
    /* bndl0 - Bits[7:0], RWS_L, default = 8'b00000000  */
    UINT32 bndl1 : 8;
    /* bndl1 - Bits[15:8], RWS_L, default = 8'b00000000  */
    UINT32 bndl2 : 8;
    /* bndl2 - Bits[23:16], RWS_L, default = 8'b00000000  */
    UINT32 bndl3 : 8;
    /* bndl3 - Bits[31:24], RWS_L, default = 8'b00000000  */
  } Bits;
  UINT32 Data;
} BNDL_SPARE2_0_IIO_DFX_STRUCT;


/* BNDL_SPARE2_1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138A04)                                                  */
/*       SKX (0x40138A04)                                                     */
/* Register default value:              0x00000000                            */
#define BNDL_SPARE2_1_IIO_DFX_REG 0x12004A04
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa04
 */
typedef union {
  struct {
    UINT32 bndl4 : 8;
    /* bndl4 - Bits[7:0], RWS_L, default = 8'b00000000  */
    UINT32 bndl5 : 8;
    /* bndl5 - Bits[15:8], RWS_L, default = 8'b00000000  */
    UINT32 bndl6 : 8;
    /* bndl6 - Bits[23:16], RWS_L, default = 8'b00000000  */
    UINT32 bndl7 : 8;
    /* bndl7 - Bits[31:24], RWS_L, default = 8'b00000000  */
  } Bits;
  UINT32 Data;
} BNDL_SPARE2_1_IIO_DFX_STRUCT;


/* BNDL_SPARE3_0_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138A08)                                                  */
/*       SKX (0x40138A08)                                                     */
/* Register default value:              0xA0A0A0A0                            */
#define BNDL_SPARE3_0_IIO_DFX_REG 0x12004A08
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa08
 *       Train-cold-run-hot feature:
 *         [7]: 1= enable TCRH feature (default)
 *         [6:5]: VREF change threshold (2'b01 default)
 *         [4:3]: VREF min threshold (2'b00 default)
 *         [2:1] reserved
 *         [0]: 1= speed up attenuator phase 1 (default = 0)
 *       
 */
typedef union {
  struct {
    UINT32 bndl0 : 8;
    /* bndl0 - Bits[7:0], RWS_L, default = 8'b10100000  */
    UINT32 bndl1 : 8;
    /* bndl1 - Bits[15:8], RWS_L, default = 8'b10100000  */
    UINT32 bndl2 : 8;
    /* bndl2 - Bits[23:16], RWS_L, default = 8'b10100000  */
    UINT32 bndl3 : 8;
    /* bndl3 - Bits[31:24], RWS_L, default = 8'b10100000  */
  } Bits;
  UINT32 Data;
} BNDL_SPARE3_0_IIO_DFX_STRUCT;


/* BNDL_SPARE3_1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138A0C)                                                  */
/*       SKX (0x40138A0C)                                                     */
/* Register default value:              0xA0A0A0A0                            */
#define BNDL_SPARE3_1_IIO_DFX_REG 0x12004A0C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa0c
 *         Train-cold-run-hot feature:
 *         [7]: 1= enable TCRH feature (default)
 *         [6:5]: VREF change threshold (2'b01 default)
 *         [4:3]: VREF min threshold (2'b00 default)
 *         [2:1] reserved
 *         [0]: 1= speed up attenuator phase 1 (default = 0)
 *       
 */
typedef union {
  struct {
    UINT32 bndl4 : 8;
    /* bndl4 - Bits[7:0], RWS_L, default = 8'b10100000  */
    UINT32 bndl5 : 8;
    /* bndl5 - Bits[15:8], RWS_L, default = 8'b10100000  */
    UINT32 bndl6 : 8;
    /* bndl6 - Bits[23:16], RWS_L, default = 8'b10100000  */
    UINT32 bndl7 : 8;
    /* bndl7 - Bits[31:24], RWS_L, default = 8'b10100000  */
  } Bits;
  UINT32 Data;
} BNDL_SPARE3_1_IIO_DFX_STRUCT;


/* BNDL_SPARE4_0_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138A10)                                                  */
/*       SKX (0x40138A10)                                                     */
/* Register default value:              0x80808080                            */
#define BNDL_SPARE4_0_IIO_DFX_REG 0x12004A10
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa10
 *       [7]: (*) = use IVB eyemon fix - Sweep phase step 0->63, change vref, sweep 
 * phase step 63->0  
 *       [6]: 1= if in master mode, do not oepn loop freq accumulator
 *       [5]: 1= if in slave mode, do not oepn loop freq accumulator
 *       [4:3]: to pass only e_in even, e_in_odd or both to eye monitor
 *           "00" | "11": pass all
 *           "01": pass even only 
 *           "10": pass odd only 
 *       [2]: CSR override enable for bndl_ctleopcal_vincmsel
 *       [1:0]: CSR override enable for bndl_ctleopcal_vincmsel (2'b10)
 *              bndl_ctleopcal_vincmsel = dfx_hsx_spare4[2] ? dfx_hsx_spare4[1:0] : 
 * bndl_ctleopcal_vincmsel_fuse; 
 *       
 */
typedef union {
  struct {
    UINT32 bndl0 : 8;
    /* bndl0 - Bits[7:0], RWS_L, default = 8'b10000000  */
    UINT32 bndl1 : 8;
    /* bndl1 - Bits[15:8], RWS_L, default = 8'b10000000  */
    UINT32 bndl2 : 8;
    /* bndl2 - Bits[23:16], RWS_L, default = 8'b10000000  */
    UINT32 bndl3 : 8;
    /* bndl3 - Bits[31:24], RWS_L, default = 8'b10000000  */
  } Bits;
  UINT32 Data;
} BNDL_SPARE4_0_IIO_DFX_STRUCT;


/* BNDL_SPARE4_1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138A14)                                                  */
/*       SKX (0x40138A14)                                                     */
/* Register default value:              0x80808080                            */
#define BNDL_SPARE4_1_IIO_DFX_REG 0x12004A14
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa14
 */
typedef union {
  struct {
    UINT32 bndl4 : 8;
    /* bndl4 - Bits[7:0], RWS_L, default = 8'b10000000  */
    UINT32 bndl5 : 8;
    /* bndl5 - Bits[15:8], RWS_L, default = 8'b10000000  */
    UINT32 bndl6 : 8;
    /* bndl6 - Bits[23:16], RWS_L, default = 8'b10000000  */
    UINT32 bndl7 : 8;
    /* bndl7 - Bits[31:24], RWS_L, default = 8'b10000000  */
  } Bits;
  UINT32 Data;
} BNDL_SPARE4_1_IIO_DFX_STRUCT;


/* TX_ADAPT_DELTA_SW_L0_IIO_DFX_REG supported on:                             */
/*       SKX_A0 (0x40138A30)                                                  */
/*       SKX (0x40138A30)                                                     */
/* Register default value:              0x00000000                            */
#define TX_ADAPT_DELTA_SW_L0_IIO_DFX_REG 0x12004A30
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa30
 */
typedef union {
  struct {
    UINT32 bndl0 : 1;
    /* bndl0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 bndl1 : 1;
    /* bndl1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 bndl2 : 1;
    /* bndl2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 bndl3 : 1;
    /* bndl3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 bndl4 : 1;
    /* bndl4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 bndl5 : 1;
    /* bndl5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 bndl6 : 1;
    /* bndl6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 bndl7 : 1;
    /* bndl7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_ADAPT_DELTA_SW_L0_IIO_DFX_STRUCT;


/* TX_ADAPT_DELTA_SW_L1_IIO_DFX_REG supported on:                             */
/*       SKX_A0 (0x40138A34)                                                  */
/*       SKX (0x40138A34)                                                     */
/* Register default value:              0x00000000                            */
#define TX_ADAPT_DELTA_SW_L1_IIO_DFX_REG 0x12004A34
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa34
 */
typedef union {
  struct {
    UINT32 bndl0 : 1;
    /* bndl0 - Bits[0:0], RWS_L, default = 1'b0  */
    UINT32 bndl1 : 1;
    /* bndl1 - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 bndl2 : 1;
    /* bndl2 - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 bndl3 : 1;
    /* bndl3 - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 bndl4 : 1;
    /* bndl4 - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 bndl5 : 1;
    /* bndl5 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 bndl6 : 1;
    /* bndl6 - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 bndl7 : 1;
    /* bndl7 - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} TX_ADAPT_DELTA_SW_L1_IIO_DFX_STRUCT;


/* BNDL_SPARE_0_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138A38)                                                  */
/*       SKX (0x40138A38)                                                     */
/* Register default value:              0x00800080                            */
#define BNDL_SPARE_0_IIO_DFX_REG 0x12004A38
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa38
 *         [15:8]: unused
 *         [7]: cm_summer_fault_en, (*)
 *         [6]: unused
 *         [5:3] to AFE for dfesum_mfc_ctl pins but are unsued. Reserved for spare 
 *         [2] tx_en_in_slowmode_dis
 *         [1] cdr_mode_step
 *         [0]: disable_pmod_accu_reset
 *       
 */
typedef union {
  struct {
    UINT32 bndl0 : 16;
    /* bndl0 - Bits[15:0], RWS_L, default = 16'h0080  */
    UINT32 bndl1 : 16;
    /* bndl1 - Bits[31:16], RWS_L, default = 16'h0080  */
  } Bits;
  UINT32 Data;
} BNDL_SPARE_0_IIO_DFX_STRUCT;


/* BNDL_SPARE_1_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138A3C)                                                  */
/*       SKX (0x40138A3C)                                                     */
/* Register default value:              0x00800080                            */
#define BNDL_SPARE_1_IIO_DFX_REG 0x12004A3C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa3c
 *         [15:8]: unused
 *         [7]: cm_summer_fault_en, (*)
 *         [6]: unused
 *         [5:3] to AFE for dfesum_mfc_ctl pins but are unsued. Reserved for spare 
 *         [2] tx_en_in_slowmode_dis
 *         [1] cdr_mode_step
 *         [0]: disable_pmod_accu_reset
 *       
 */
typedef union {
  struct {
    UINT32 bndl2 : 16;
    /* bndl2 - Bits[15:0], RWS_L, default = 16'h0080  */
    UINT32 bndl3 : 16;
    /* bndl3 - Bits[31:16], RWS_L, default = 16'h0080  */
  } Bits;
  UINT32 Data;
} BNDL_SPARE_1_IIO_DFX_STRUCT;


/* BNDL_SPARE_2_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138A40)                                                  */
/*       SKX (0x40138A40)                                                     */
/* Register default value:              0x00800080                            */
#define BNDL_SPARE_2_IIO_DFX_REG 0x12004A40
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa40
 *       [15:8]: unused
 *       [7]: cm_summer_fault_en, (*)
 *       [6]: unused
 *       [5:3] to AFE for dfesum_mfc_ctl pins but are unsued. Reserved for spare 
 *       [2] tx_en_in_slowmode_dis
 *       [1] cdr_mode_step
 *       [0]: disable_pmod_accu_reset
 *       
 */
typedef union {
  struct {
    UINT32 bndl4 : 16;
    /* bndl4 - Bits[15:0], RWS_L, default = 16'h0080  */
    UINT32 bndl5 : 16;
    /* bndl5 - Bits[31:16], RWS_L, default = 16'h0080  */
  } Bits;
  UINT32 Data;
} BNDL_SPARE_2_IIO_DFX_STRUCT;


/* BNDL_SPARE_3_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138A44)                                                  */
/*       SKX (0x40138A44)                                                     */
/* Register default value:              0x00800080                            */
#define BNDL_SPARE_3_IIO_DFX_REG 0x12004A44
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa44
 */
typedef union {
  struct {
    UINT32 bndl6 : 16;
    /* bndl6 - Bits[15:0], RWS_L, default = 16'h0080  */
    UINT32 bndl7 : 16;
    /* bndl7 - Bits[31:16], RWS_L, default = 16'h0080  */
  } Bits;
  UINT32 Data;
} BNDL_SPARE_3_IIO_DFX_STRUCT;


/* ENBL_CDR_HANG_DET_L0_IIO_DFX_REG supported on:                             */
/*       SKX_A0 (0x40138A50)                                                  */
/*       SKX (0x40138A50)                                                     */
/* Register default value:              0x000000FF                            */
#define ENBL_CDR_HANG_DET_L0_IIO_DFX_REG 0x12004A50
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa50
 */
typedef union {
  struct {
    UINT32 bndl0 : 1;
    /* bndl0 - Bits[0:0], RWS_L, default = 1'b1  */
    UINT32 bndl1 : 1;
    /* bndl1 - Bits[1:1], RWS_L, default = 1'b1  */
    UINT32 bndl2 : 1;
    /* bndl2 - Bits[2:2], RWS_L, default = 1'b1  */
    UINT32 bndl3 : 1;
    /* bndl3 - Bits[3:3], RWS_L, default = 1'b1  */
    UINT32 bndl4 : 1;
    /* bndl4 - Bits[4:4], RWS_L, default = 1'b1  */
    UINT32 bndl5 : 1;
    /* bndl5 - Bits[5:5], RWS_L, default = 1'b1  */
    UINT32 bndl6 : 1;
    /* bndl6 - Bits[6:6], RWS_L, default = 1'b1  */
    UINT32 bndl7 : 1;
    /* bndl7 - Bits[7:7], RWS_L, default = 1'b1  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} ENBL_CDR_HANG_DET_L0_IIO_DFX_STRUCT;


/* ENBL_CDR_HANG_DET_L1_IIO_DFX_REG supported on:                             */
/*       SKX_A0 (0x40138A54)                                                  */
/*       SKX (0x40138A54)                                                     */
/* Register default value:              0x000000FF                            */
#define ENBL_CDR_HANG_DET_L1_IIO_DFX_REG 0x12004A54
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa54
 */
typedef union {
  struct {
    UINT32 bndl0 : 1;
    /* bndl0 - Bits[0:0], RWS_L, default = 1'b1  */
    UINT32 bndl1 : 1;
    /* bndl1 - Bits[1:1], RWS_L, default = 1'b1  */
    UINT32 bndl2 : 1;
    /* bndl2 - Bits[2:2], RWS_L, default = 1'b1  */
    UINT32 bndl3 : 1;
    /* bndl3 - Bits[3:3], RWS_L, default = 1'b1  */
    UINT32 bndl4 : 1;
    /* bndl4 - Bits[4:4], RWS_L, default = 1'b1  */
    UINT32 bndl5 : 1;
    /* bndl5 - Bits[5:5], RWS_L, default = 1'b1  */
    UINT32 bndl6 : 1;
    /* bndl6 - Bits[6:6], RWS_L, default = 1'b1  */
    UINT32 bndl7 : 1;
    /* bndl7 - Bits[7:7], RWS_L, default = 1'b1  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} ENBL_CDR_HANG_DET_L1_IIO_DFX_STRUCT;


/* FFE_BKCH_THRESHOLD_IIO_DFX_REG supported on:                               */
/*       SKX_A0 (0x40138A58)                                                  */
/*       SKX (0x40138A58)                                                     */
/* Register default value:              0x00000000                            */
#define FFE_BKCH_THRESHOLD_IIO_DFX_REG 0x12004A58
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa58
 *  repurpose in SKX: attenuator block: control the range of attenuator value from 
 * FSM 
 *         [1]: control upper rannge. If 0: max at 14dec; else max at 16 dec
 *         [0]: control lower range.  If 0: min at 0dec; else min at 2dec
 *       
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} FFE_BKCH_THRESHOLD_IIO_DFX_STRUCT;


/* PSA_CFG_GEN2_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138A60)                                                  */
/*       SKX (0x40138A60)                                                     */
/* Register default value:              0x00000000                            */
#define PSA_CFG_GEN2_IIO_DFX_REG 0x12004A60
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa60
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PSA_CFG_GEN2_IIO_DFX_STRUCT;


/* PSA_CFG_GEN3_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138A64)                                                  */
/*       SKX (0x40138A64)                                                     */
/* Register default value:              0x00000000                            */
#define PSA_CFG_GEN3_IIO_DFX_REG 0x12004A64
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa64
 */
typedef union {
  struct {
    UINT32 bndl0 : 2;
    /* bndl0 - Bits[1:0], RWS_L, default = 2'b00  */
    UINT32 bndl1 : 2;
    /* bndl1 - Bits[3:2], RWS_L, default = 2'b00  */
    UINT32 bndl2 : 2;
    /* bndl2 - Bits[5:4], RWS_L, default = 2'b00  */
    UINT32 bndl3 : 2;
    /* bndl3 - Bits[7:6], RWS_L, default = 2'b00  */
    UINT32 bndl4 : 2;
    /* bndl4 - Bits[9:8], RWS_L, default = 2'b00  */
    UINT32 bndl5 : 2;
    /* bndl5 - Bits[11:10], RWS_L, default = 2'b00  */
    UINT32 bndl6 : 2;
    /* bndl6 - Bits[13:12], RWS_L, default = 2'b00  */
    UINT32 bndl7 : 2;
    /* bndl7 - Bits[15:14], RWS_L, default = 2'b00  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PSA_CFG_GEN3_IIO_DFX_STRUCT;


/* RX_CTLE_PEAK_GEN1_0_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x40138A70)                                                  */
/*       SKX (0x40138A70)                                                     */
/* Register default value:              0x00000000                            */
#define RX_CTLE_PEAK_GEN1_0_IIO_DFX_REG 0x12004A70
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa70
 */
typedef union {
  struct {
    UINT32 bndl0 : 5;
    /* bndl0 - Bits[4:0], RWS_L, default = 5'b00000  */
    UINT32 bndl1 : 5;
    /* bndl1 - Bits[9:5], RWS_L, default = 5'b00000  */
    UINT32 bndl2 : 5;
    /* bndl2 - Bits[14:10], RWS_L, default = 5'b00000  */
    UINT32 bndl3 : 5;
    /* bndl3 - Bits[19:15], RWS_L, default = 5'b00000  */
    UINT32 bndl4 : 5;
    /* bndl4 - Bits[24:20], RWS_L, default = 5'b00000  */
    UINT32 bndl5 : 5;
    /* bndl5 - Bits[29:25], RWS_L, default = 5'b00000  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_CTLE_PEAK_GEN1_0_IIO_DFX_STRUCT;


/* RX_CTLE_PEAK_GEN1_1_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x40138A74)                                                  */
/*       SKX (0x40138A74)                                                     */
/* Register default value:              0x00000000                            */
#define RX_CTLE_PEAK_GEN1_1_IIO_DFX_REG 0x12004A74
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa74
 */
typedef union {
  struct {
    UINT32 bndl6 : 5;
    /* bndl6 - Bits[4:0], RWS_L, default = 5'b00000  */
    UINT32 bndl7 : 5;
    /* bndl7 - Bits[9:5], RWS_L, default = 5'b00000  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_CTLE_PEAK_GEN1_1_IIO_DFX_STRUCT;


/* RX_CTLE_PEAK_GEN2_0_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x40138A78)                                                  */
/*       SKX (0x40138A78)                                                     */
/* Register default value:              0x06318C63                            */
#define RX_CTLE_PEAK_GEN2_0_IIO_DFX_REG 0x12004A78
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa78
 */
typedef union {
  struct {
    UINT32 bndl0 : 5;
    /* bndl0 - Bits[4:0], RWS_L, default = 5'b00011  */
    UINT32 bndl1 : 5;
    /* bndl1 - Bits[9:5], RWS_L, default = 5'b00011  */
    UINT32 bndl2 : 5;
    /* bndl2 - Bits[14:10], RWS_L, default = 5'b00011  */
    UINT32 bndl3 : 5;
    /* bndl3 - Bits[19:15], RWS_L, default = 5'b00011  */
    UINT32 bndl4 : 5;
    /* bndl4 - Bits[24:20], RWS_L, default = 5'b00011  */
    UINT32 bndl5 : 5;
    /* bndl5 - Bits[29:25], RWS_L, default = 5'b00011  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_CTLE_PEAK_GEN2_0_IIO_DFX_STRUCT;


/* RX_CTLE_PEAK_GEN2_1_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x40138A7C)                                                  */
/*       SKX (0x40138A7C)                                                     */
/* Register default value:              0x00000063                            */
#define RX_CTLE_PEAK_GEN2_1_IIO_DFX_REG 0x12004A7C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa7c
 */
typedef union {
  struct {
    UINT32 bndl6 : 5;
    /* bndl6 - Bits[4:0], RWS_L, default = 5'b00011  */
    UINT32 bndl7 : 5;
    /* bndl7 - Bits[9:5], RWS_L, default = 5'b00011  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_CTLE_PEAK_GEN2_1_IIO_DFX_STRUCT;


/* RX_CTLE_PEAK_GEN3_0_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x40138A80)                                                  */
/*       SKX (0x40138A80)                                                     */
/* Register default value:              0x0E739CE7                            */
#define RX_CTLE_PEAK_GEN3_0_IIO_DFX_REG 0x12004A80
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa80
 */
typedef union {
  struct {
    UINT32 bndl0 : 5;
    /* bndl0 - Bits[4:0], RWS_L, default = 5'b00111  */
    UINT32 bndl1 : 5;
    /* bndl1 - Bits[9:5], RWS_L, default = 5'b00111  */
    UINT32 bndl2 : 5;
    /* bndl2 - Bits[14:10], RWS_L, default = 5'b00111  */
    UINT32 bndl3 : 5;
    /* bndl3 - Bits[19:15], RWS_L, default = 5'b00111  */
    UINT32 bndl4 : 5;
    /* bndl4 - Bits[24:20], RWS_L, default = 5'b00111  */
    UINT32 bndl5 : 5;
    /* bndl5 - Bits[29:25], RWS_L, default = 5'b00111  */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_CTLE_PEAK_GEN3_0_IIO_DFX_STRUCT;


/* RX_CTLE_PEAK_GEN3_1_IIO_DFX_REG supported on:                              */
/*       SKX_A0 (0x40138A84)                                                  */
/*       SKX (0x40138A84)                                                     */
/* Register default value:              0x000000E7                            */
#define RX_CTLE_PEAK_GEN3_1_IIO_DFX_REG 0x12004A84
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa84
 */
typedef union {
  struct {
    UINT32 bndl6 : 5;
    /* bndl6 - Bits[4:0], RWS_L, default = 5'b00111  */
    UINT32 bndl7 : 5;
    /* bndl7 - Bits[9:5], RWS_L, default = 5'b00111  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RX_CTLE_PEAK_GEN3_1_IIO_DFX_STRUCT;


/* RX_CTLE_RDEG_GEN1_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138A88)                                                  */
/*       SKX (0x40138A88)                                                     */
/* Register default value:              0x33333333                            */
#define RX_CTLE_RDEG_GEN1_IIO_DFX_REG 0x12004A88
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa88
 */
typedef union {
  struct {
    UINT32 bndl0 : 4;
    /* bndl0 - Bits[3:0], RWS_L, default = 4'b0011  */
    UINT32 bndl1 : 4;
    /* bndl1 - Bits[7:4], RWS_L, default = 4'b0011  */
    UINT32 bndl2 : 4;
    /* bndl2 - Bits[11:8], RWS_L, default = 4'b0011  */
    UINT32 bndl3 : 4;
    /* bndl3 - Bits[15:12], RWS_L, default = 4'b0011  */
    UINT32 bndl4 : 4;
    /* bndl4 - Bits[19:16], RWS_L, default = 4'b0011  */
    UINT32 bndl5 : 4;
    /* bndl5 - Bits[23:20], RWS_L, default = 4'b0011  */
    UINT32 bndl6 : 4;
    /* bndl6 - Bits[27:24], RWS_L, default = 4'b0011  */
    UINT32 bndl7 : 4;
    /* bndl7 - Bits[31:28], RWS_L, default = 4'b0011  */
  } Bits;
  UINT32 Data;
} RX_CTLE_RDEG_GEN1_IIO_DFX_STRUCT;


/* RX_CTLE_RDEG_GEN2_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138A8C)                                                  */
/*       SKX (0x40138A8C)                                                     */
/* Register default value:              0x33333333                            */
#define RX_CTLE_RDEG_GEN2_IIO_DFX_REG 0x12004A8C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa8c
 */
typedef union {
  struct {
    UINT32 bndl0 : 4;
    /* bndl0 - Bits[3:0], RWS_L, default = 4'b0011  */
    UINT32 bndl1 : 4;
    /* bndl1 - Bits[7:4], RWS_L, default = 4'b0011  */
    UINT32 bndl2 : 4;
    /* bndl2 - Bits[11:8], RWS_L, default = 4'b0011  */
    UINT32 bndl3 : 4;
    /* bndl3 - Bits[15:12], RWS_L, default = 4'b0011  */
    UINT32 bndl4 : 4;
    /* bndl4 - Bits[19:16], RWS_L, default = 4'b0011  */
    UINT32 bndl5 : 4;
    /* bndl5 - Bits[23:20], RWS_L, default = 4'b0011  */
    UINT32 bndl6 : 4;
    /* bndl6 - Bits[27:24], RWS_L, default = 4'b0011  */
    UINT32 bndl7 : 4;
    /* bndl7 - Bits[31:28], RWS_L, default = 4'b0011  */
  } Bits;
  UINT32 Data;
} RX_CTLE_RDEG_GEN2_IIO_DFX_STRUCT;


/* RX_CTLE_RDEG_GEN3_IIO_DFX_REG supported on:                                */
/*       SKX_A0 (0x40138A90)                                                  */
/*       SKX (0x40138A90)                                                     */
/* Register default value:              0x33333333                            */
#define RX_CTLE_RDEG_GEN3_IIO_DFX_REG 0x12004A90
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xa90
 */
typedef union {
  struct {
    UINT32 bndl0 : 4;
    /* bndl0 - Bits[3:0], RWS_L, default = 4'b0011  */
    UINT32 bndl1 : 4;
    /* bndl1 - Bits[7:4], RWS_L, default = 4'b0011  */
    UINT32 bndl2 : 4;
    /* bndl2 - Bits[11:8], RWS_L, default = 4'b0011  */
    UINT32 bndl3 : 4;
    /* bndl3 - Bits[15:12], RWS_L, default = 4'b0011  */
    UINT32 bndl4 : 4;
    /* bndl4 - Bits[19:16], RWS_L, default = 4'b0011  */
    UINT32 bndl5 : 4;
    /* bndl5 - Bits[23:20], RWS_L, default = 4'b0011  */
    UINT32 bndl6 : 4;
    /* bndl6 - Bits[27:24], RWS_L, default = 4'b0011  */
    UINT32 bndl7 : 4;
    /* bndl7 - Bits[31:28], RWS_L, default = 4'b0011  */
  } Bits;
  UINT32 Data;
} RX_CTLE_RDEG_GEN3_IIO_DFX_STRUCT;


/* NEWCLSPHYCTL0_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138B00)                                                  */
/*       SKX (0x40138B00)                                                     */
/* Register default value:              0x000FA080                            */
#define NEWCLSPHYCTL0_IIO_DFX_REG 0x12004B00
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb00
 */
typedef union {
  struct {
    UINT32 detect_stgr_int : 12;
    /* detect_stgr_int - Bits[11:0], RWS_L, default = 12'b000010000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 cnt_send_ts1_dis_state : 11;
    /* cnt_send_ts1_dis_state - Bits[22:12], RWS_L, default = 11'b00011111010 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 hvm_mode_eb_db : 1;
    /* hvm_mode_eb_db - Bits[23:23], RW_L, default = 1'b0  */
    UINT32 rsvd : 1;
    /* rsvd - Bits[24:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 spare_reg_link : 7;
    /* spare_reg_link - Bits[31:25], RWS_L, default = 7'b0000000  */
  } Bits;
  UINT32 Data;
} NEWCLSPHYCTL0_IIO_DFX_STRUCT;


/* DFXCHICKENBIT0_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138B04)                                                  */
/*       SKX (0x40138B04)                                                     */
/* Register default value:              0x00007181                            */
#define DFXCHICKENBIT0_IIO_DFX_REG 0x12004B04
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb04
 */
typedef union {
  struct {
    UINT32 en_eieos_rec : 1;
    /* en_eieos_rec - Bits[0:0], RWS_L, default = 1'b1  */
    UINT32 dis_coeff_extended_eieos : 1;
    /* dis_coeff_extended_eieos - Bits[1:1], RWS_L, default = 1'b0  */
    UINT32 dis_det_l1_mode : 1;
    /* dis_det_l1_mode - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 dis_rule4a1_check : 1;
    /* dis_rule4a1_check - Bits[3:3], RWS_L, default = 1'b0  */
    UINT32 dis_rule4c1_check : 1;
    /* dis_rule4c1_check - Bits[4:4], RWS_L, default = 1'b0  */
    UINT32 force_indep_pull : 1;
    /* force_indep_pull - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 dis_rule4a2_check : 1;
    /* dis_rule4a2_check - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 csr_dis_rsteiecount_2cycle : 1;
    /* csr_dis_rsteiecount_2cycle - Bits[7:7], RWS_L, default = 1'b1  */
    UINT32 en_eqts1_in_lpbk_m : 1;
    /* en_eqts1_in_lpbk_m - Bits[8:8], RWS_L, default = 1'b1  */
    UINT32 en_fuse_g2g3 : 1;
    /* en_fuse_g2g3 - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 dis_dferr_chk : 1;
    /* dis_dferr_chk - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 dis_eb_wrptr_hold : 1;
    /* dis_eb_wrptr_hold - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 dis_send_ts1_pol_state : 1;
    /* dis_send_ts1_pol_state - Bits[12:12], RWS_L, default = 1'b1  */
    UINT32 dis_l1exit2w4bitlock1state : 1;
    /* dis_l1exit2w4bitlock1state - Bits[13:13], RWS_L, default = 1'b1  */
    UINT32 dis_cef_cff_x2_x4 : 1;
    /* dis_cef_cff_x2_x4 - Bits[14:14], RWS_L, default = 1'b1  */
    UINT32 dis_l0_rec : 1;
    /* dis_l0_rec - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 cfgrcvto_dis : 1;
    /* cfgrcvto_dis - Bits[16:16], RWS_L, default = 1'b0  */
    UINT32 dis_pollact_sqexit : 1;
    /* dis_pollact_sqexit - Bits[17:17], RWS_L, default = 1'b0  */
    UINT32 dis_fix_upcfg : 1;
    /* dis_fix_upcfg - Bits[18:18], RWS_L, default = 1'b0  */
    UINT32 dis_check_compl_polact : 1;
    /* dis_check_compl_polact - Bits[19:19], RWS_L, default = 1'b0  */
    UINT32 dis_sym4_reclock_poll_and_cfg : 1;
    /* dis_sym4_reclock_poll_and_cfg - Bits[20:20], RWS_L, default = 1'b0  */
    UINT32 gen_trans_port_stgr : 2;
    /* gen_trans_port_stgr - Bits[22:21], RWS_L, default = 2'b00  */
    UINT32 dis_cfgoff_lanes_sqexit : 1;
    /* dis_cfgoff_lanes_sqexit - Bits[23:23], RWS_L, default = 1'b0  */
    UINT32 dis_ntb_ts2_check : 1;
    /* dis_ntb_ts2_check - Bits[24:24], RWS_L, default = 1'b0  */
    UINT32 dis_rcvd8_ts_check : 1;
    /* dis_rcvd8_ts_check - Bits[25:25], RWS_L, default = 1'b0  */
    UINT32 dis_2ts1lpbk_cmpl_check : 1;
    /* dis_2ts1lpbk_cmpl_check - Bits[26:26], RWS_L, default = 1'b0  */
    UINT32 cfg_lanewait_timer_setting : 2;
    /* cfg_lanewait_timer_setting - Bits[28:27], RWS_L, default = 2'b00  */
    UINT32 en_l0s_tx_drvswctl_sep : 1;
    /* en_l0s_tx_drvswctl_sep - Bits[29:29], RWS_L, default = 1'b0  */
    UINT32 en_l0s_tx_txval_cntr : 1;
    /* en_l0s_tx_txval_cntr - Bits[30:30], RWS_L, default = 1'b0  */
    UINT32 rsvd : 1;
    /* rsvd - Bits[31:31], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFXCHICKENBIT0_IIO_DFX_STRUCT;


/* LANEMSKREG_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138B08)                                                  */
/*       SKX (0x40138B08)                                                     */
/* Register default value:              0x000000FF                            */
#define LANEMSKREG_IIO_DFX_REG 0x12004B08
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb08
 */
typedef union {
  struct {
    UINT32 err_lane_mask : 16;
    /* err_lane_mask - Bits[15:0], RWS_L, default = 16'b0000000011111111  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LANEMSKREG_IIO_DFX_STRUCT;


/* LANEERRREG_IIO_DFX_REG supported on:                                       */
/*       SKX_A0 (0x40138B0C)                                                  */
/*       SKX (0x40138B0C)                                                     */
/* Register default value:              0x00000000                            */
#define LANEERRREG_IIO_DFX_REG 0x12004B0C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb0c
 */
typedef union {
  struct {
    UINT32 err_lane_csr_and_mask : 16;
    /* err_lane_csr_and_mask - Bits[15:0], RW1CS, default = 16'b0000000000000000  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LANEERRREG_IIO_DFX_STRUCT;


/* DFXSPAREREG0_IIO_DFX_REG supported on:                                     */
/*       SKX_A0 (0x40138B10)                                                  */
/*       SKX (0x40138B10)                                                     */
/* Register default value:              0x00000000                            */
#define DFXSPAREREG0_IIO_DFX_REG 0x12004B10
/* Struct format extracted from XML file SKX_A0\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb10
 */
typedef union {
  struct {
    UINT32 sparereg_bits0 : 16;
    /* sparereg_bits0 - Bits[15:0], RWS_L, default = 16'b0000000000000000  */
    UINT32 rsvd_16 : 1;
    /* rsvd_16 - Bits[16:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 block_exit_from_detectquietrst : 1;
    /* block_exit_from_detectquietrst - Bits[17:17], RWS_L, default = 1'b0 
       If 1, exit from detect quiet rst will happen only if sltsts[prsdch] is cleared 
       (if sltcap[surprise hotplug] is set. 
       If 0, exit from detect quiet rst will not depend on sltsts[prsdch].
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_18 : 14;
    /* rsvd_18 - Bits[31:18], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFXSPAREREG0_IIO_DFX_A0_STRUCT;

/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb10
 */
typedef union {
  struct {
    UINT32 sparereg_bits0 : 15;
    /* sparereg_bits0 - Bits[14:0], RWS_L, default = 15'b0000000000000000  */
    UINT32 snapshot_deskew_ptr_skp_w_sds : 1;
    /* snapshot_deskew_ptr_skp_w_sds - Bits[15:15], RWS_L, default = 1'b0 
       Reference SKX bug 307138: When high use the fix documented in the bug report.
       	Notes:
       	Locked by DBGBUSLCK
     */
    UINT32 rsvd_16 : 1;
    /* rsvd_16 - Bits[16:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 block_exit_from_detectquietrst : 1;
    /* block_exit_from_detectquietrst - Bits[17:17], RWS_L, default = 1'b0 
       If 1, exit from detect quiet rst will happen only if sltsts[prsdch] is cleared 
       (if sltcap[surprise hotplug] is set. 
       If 0, exit from detect quiet rst will not depend on sltsts[prsdch].
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_18 : 14;
    /* rsvd_18 - Bits[31:18], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFXSPAREREG0_IIO_DFX_STRUCT;



/* DFXUPCFGEXITEI_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138B14)                                                  */
/*       SKX (0x40138B14)                                                     */
/* Register default value:              0x00000000                            */
#define DFXUPCFGEXITEI_IIO_DFX_REG 0x12004B14
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb14
 */
typedef union {
  struct {
    UINT32 pollact_exit_ei_timeout : 8;
    /* pollact_exit_ei_timeout - Bits[7:0], RWS_L, default = 8'b00000000  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFXUPCFGEXITEI_IIO_DFX_STRUCT;


/* PHY_LAYER_DBG_MUX_SWIZ_SEL0_IIO_DFX_REG supported on:                      */
/*       SKX_A0 (0x40138B18)                                                  */
/*       SKX (0x40138B18)                                                     */
/* Register default value:              0x00000000                            */
#define PHY_LAYER_DBG_MUX_SWIZ_SEL0_IIO_DFX_REG 0x12004B18
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register selects which set of iisln/iitln debug signal sets drives the 
 * debug ring output of the transaction layer. 
 */
typedef union {
  struct {
    UINT32 phy_debug_swiz_sel0 : 4;
    /* phy_debug_swiz_sel0 - Bits[3:0], RWS_L, default = 4'b0000 
       Selects the source for byte lane 0 from the 9 internal debug bus lanes.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 phy_debug_swiz_sel1 : 4;
    /* phy_debug_swiz_sel1 - Bits[7:4], RWS_L, default = 4'b0000 
       Selects the source for byte lane 1 from the 9 internal debug bus lanes.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 phy_debug_swiz_sel2 : 4;
    /* phy_debug_swiz_sel2 - Bits[11:8], RWS_L, default = 4'b0000 
       Selects the source for byte lane 2 from the 9 internal debug bus lanes.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 phy_debug_swiz_sel3 : 4;
    /* phy_debug_swiz_sel3 - Bits[15:12], RWS_L, default = 4'b0000 
       Selects the source for byte lane 3 from the 9 internal debug bus lanes.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 phy_debug_swiz_sel4 : 4;
    /* phy_debug_swiz_sel4 - Bits[19:16], RWS_L, default = 4'b0000 
       Selects the source for byte lane 4 from the 9 internal debug bus lanes.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 phy_debug_swiz_sel5 : 4;
    /* phy_debug_swiz_sel5 - Bits[23:20], RWS_L, default = 4'b0000 
       Selects the source for byte lane 5 from the 9 internal debug bus lanes.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 phy_debug_swiz_sel6 : 4;
    /* phy_debug_swiz_sel6 - Bits[27:24], RWS_L, default = 4'b0000 
       Selects the source for byte lane 6 from the 9 internal debug bus lanes.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 phy_debug_swiz_sel7 : 4;
    /* phy_debug_swiz_sel7 - Bits[31:28], RWS_L, default = 4'b0000 
       Selects the source for byte lane 7 from the 9 internal debug bus lanes.
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} PHY_LAYER_DBG_MUX_SWIZ_SEL0_IIO_DFX_STRUCT;


/* PHY_LAYER_DBG_MUX_SWIZ_SEL1_IIO_DFX_REG supported on:                      */
/*       SKX_A0 (0x40138B1C)                                                  */
/*       SKX (0x40138B1C)                                                     */
/* Register default value:              0x00000000                            */
#define PHY_LAYER_DBG_MUX_SWIZ_SEL1_IIO_DFX_REG 0x12004B1C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * This register selects which set of iisln/iitln debug signal sets drives the 
 * debug ring output of the transaction layer. 
 */
typedef union {
  struct {
    UINT32 phy_debug_swiz_sel8 : 4;
    /* phy_debug_swiz_sel8 - Bits[3:0], RWS_L, default = 4'b0000 
       Selects the source for byte lane 8 from the 9 internal debug bus lanes.
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 26;
    /* rsvd - Bits[29:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 xor_mode : 1;
    /* xor_mode - Bits[30:30], RO, default = 1'b0 
       Puts the debug muxes into XOR mode instead of MUX mode for scanout coverage. Not 
       implemented for IOU0/1. 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 dbg_mux_en : 1;
    /* dbg_mux_en - Bits[31:31], RWS_L, default = 1'b0 
       Turns on the debug muxes (clocks, etc).
       Notes:
       Locked by DBGBUSLCK
     */
  } Bits;
  UINT32 Data;
} PHY_LAYER_DBG_MUX_SWIZ_SEL1_IIO_DFX_STRUCT;


/* DFXCHICKENBIT2_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138B20)                                                  */
/*       SKX (0x40138B20)                                                     */
/* Register default value:              0x00000078                            */
#define DFXCHICKENBIT2_IIO_DFX_REG 0x12004B20
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb20
 */
typedef union {
  struct {
    UINT32 cfg_lanewait_timer_setting : 19;
    /* cfg_lanewait_timer_setting - Bits[18:0], RWS_L, default = 19'd120  */
    UINT32 rsvd : 13;
    /* rsvd - Bits[31:19], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFXCHICKENBIT2_IIO_DFX_STRUCT;


/* DFXCHICKENBIT1_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138B24)                                                  */
/*       SKX (0x40138B24)                                                     */
/* Register default value:              0x00000041                            */
#define DFXCHICKENBIT1_IIO_DFX_REG 0x12004B24
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb24
 */
typedef union {
  struct {
    UINT32 dis_ph3_preset_req : 1;
    /* dis_ph3_preset_req - Bits[0:0], RWS_L, default = 1'b1  */
    UINT32 remote_tx_preset_dfx : 4;
    /* remote_tx_preset_dfx - Bits[4:1], RWS_L, default = 4'b0000  */
    UINT32 en_byp_ph3_with_neq0 : 1;
    /* en_byp_ph3_with_neq0 - Bits[5:5], RWS_L, default = 1'b0  */
    UINT32 dis_mid_max_cal : 1;
    /* dis_mid_max_cal - Bits[6:6], RWS_L, default = 1'b1  */
    UINT32 dis_8b_10b_err_log : 1;
    /* dis_8b_10b_err_log - Bits[7:7], RWS_L, default = 1'b0  */
    UINT32 dis_ntb_ph23_fix : 1;
    /* dis_ntb_ph23_fix - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 ebdis_lfclk_en_fix : 1;
    /* ebdis_lfclk_en_fix - Bits[9:9], RWS_L, default = 1'b0  */
    UINT32 dis_cfgrec_idle_check : 1;
    /* dis_cfgrec_idle_check - Bits[10:10], RWS_L, default = 1'b0  */
    UINT32 dis_l0s_sqmask : 1;
    /* dis_l0s_sqmask - Bits[11:11], RWS_L, default = 1'b0  */
    UINT32 en_8us_timer_for_all_fub : 1;
    /* en_8us_timer_for_all_fub - Bits[12:12], RWS_L, default = 1'b0  */
    UINT32 dis_pol_invfix : 1;
    /* dis_pol_invfix - Bits[13:13], RWS_L, default = 1'b0  */
    UINT32 dis_gen1_reutfix : 1;
    /* dis_gen1_reutfix - Bits[14:14], RWS_L, default = 1'b0  */
    UINT32 dis_fix4540009 : 1;
    /* dis_fix4540009 - Bits[15:15], RWS_L, default = 1'b0  */
    UINT32 en_txn_eq_bw_only : 1;
    /* en_txn_eq_bw_only - Bits[16:16], RWS_L, default = 1'b0  */
    UINT32 rsvd : 15;
    /* rsvd - Bits[31:17], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DFXCHICKENBIT1_IIO_DFX_STRUCT;


/* XPDFXSPAREREG_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138B40)                                                  */
/*       SKX (0x40138B40)                                                     */
/* Register default value:              0xC7D22000                            */
#define XPDFXSPAREREG_IIO_DFX_REG 0x12004B40
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb40
 */
typedef union {
  struct {
    UINT32 xpdfxsparereg_en_convert_invcmpl_urcmpl : 1;
    /* xpdfxsparereg_en_convert_invcmpl_urcmpl - Bits[0:0], RW_LV, default = 1'b0 
       if set to '1' will convert CMPLT_INV to CMPLT_MA inbound
     */
    UINT32 xpdfxsparereg_dis_perfboost_pktgen : 1;
    /* xpdfxsparereg_dis_perfboost_pktgen - Bits[1:1], RW_LV, default = 1'b0 
       if reset to '0' increase the perf b.w to 10.6GB/s from 8.0GB/s
     */
    UINT32 dis_hdrchk4tphbe_rules : 1;
    /* dis_hdrchk4tphbe_rules - Bits[2:2], RW_LV, default = 1'b0  */
    UINT32 rsvd : 1;
    /* rsvd - Bits[3:3], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 dbg_mux_en : 1;
    /* dbg_mux_en - Bits[4:4], RWS_L, default = 1'b0 
       Turns on the debug muxes (clocks, etc).
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 en_ib_poison_ma : 1;
    /* en_ib_poison_ma - Bits[5:5], RW_LV, default = 1'b0 
       Set MA hint on all inbound packets with EP=1. Useful for containment of inbound 
       poison writes that trigger LER. 
     */
    UINT32 ler_epnp_dis : 1;
    /* ler_epnp_dis - Bits[6:6], RW_LV, default = 1'b0 
       Disable enhanced fix for LER containment and credit returns (ignored if 
       ler_ob_contain==0). 
     */
    UINT32 ler_ob_contain : 1;
    /* ler_ob_contain - Bits[7:7], RW_LV, default = 1'b0 
       Enable LER containment of subsequent packets from the LER triggering packet.
     */
    UINT32 use_extended_tag_bit : 1;
    /* use_extended_tag_bit - Bits[8:8], RW_LV, default = 1'b0 
       Use extened tag bit [7:5] same as legacy products
     */
    UINT32 en_sdoorbell_ordering : 1;
    /* en_sdoorbell_ordering - Bits[9:9], RW_LV, default = 1'b0 
       Disable fix: SKX bug ECO 304500
     */
    UINT32 no_stall_pkt_gen_sdoorbell : 1;
    /* no_stall_pkt_gen_sdoorbell - Bits[10:10], RW_LV, default = 1'b0 
       Disable to drop outbound transaction from IOTC in viral mode
     */
    UINT32 dis_msgd_len_chk : 1;
    /* dis_msgd_len_chk - Bits[11:11], RW_LV, default = 1'b0 
       Disable treating MsgD with len>16 as malformed TLP
     */
    UINT32 xpdfxsparereg_bits0 : 4;
    /* xpdfxsparereg_bits0 - Bits[15:12], RW_LV, default = 4'b0010 
       [12] not in used PCIE stack
                            [15:13] for selecting different MCTP behavior
                            [13] msgd_gt16dw_ma_fix_en	- BDX default
                            [14] msgd_mctp_drop_ma_fix_en
                            [15] mal_tlp_msgd_gt16dw
               
     */
    UINT32 xpdfxsparereg_disloweraddr : 1;
    /* xpdfxsparereg_disloweraddr - Bits[16:16], RW_LV, default = 1'b0  */
    UINT32 xpdfxsparereg_discmpl_lowaddr : 1;
    /* xpdfxsparereg_discmpl_lowaddr - Bits[17:17], RW_LV, default = 1'b1  */
    UINT32 disable_msi_gt_1dw : 1;
    /* disable_msi_gt_1dw - Bits[18:18], RW_LV, default = 1'b0 
       If set to 1, Requests with address GT 51 bits and MSI GT 1 DW will not be logged 
       by the PCIE Transaction Layer. 
     */
    UINT32 xpdfxsparereg_en_ecn271_uncerr : 1;
    /* xpdfxsparereg_en_ecn271_uncerr - Bits[19:19], RW_LV, default = 1'b0  */
    UINT32 xpdfxsparereg_en_gosmsg_and_rstwarn_during_abort_inbound : 1;
    /* xpdfxsparereg_en_gosmsg_and_rstwarn_during_abort_inbound - Bits[20:20], RW_LV, default = 1'b1  */
    UINT32 xpdfxsparereg_dis_atomic_poison_check : 1;
    /* xpdfxsparereg_dis_atomic_poison_check - Bits[21:21], RW_LV, default = 1'b0  */
    UINT32 xpdfxsparereg_dis_cfgwr_cmplt_check : 1;
    /* xpdfxsparereg_dis_cfgwr_cmplt_check - Bits[22:22], RW_LV, default = 1'b1  */
    UINT32 xpdfxsparereg_dis_incorrect_cmpl_returned : 1;
    /* xpdfxsparereg_dis_incorrect_cmpl_returned - Bits[23:23], RW_LV, default = 1'b1  */
    UINT32 xpdfxsparereg_dis_incorrect_addr5_2_check : 1;
    /* xpdfxsparereg_dis_incorrect_addr5_2_check - Bits[24:24], RW_LV, default = 1'b1  */
    UINT32 xpdfxsparereg_dis_incorrect_lk_cmpl_check : 1;
    /* xpdfxsparereg_dis_incorrect_lk_cmpl_check - Bits[25:25], RW_LV, default = 1'b1  */
    UINT32 xpdfxsparereg_dis_len_1_0_check : 1;
    /* xpdfxsparereg_dis_len_1_0_check - Bits[26:26], RW_LV, default = 1'b1 
       if set to '0' will compare the LEN[1:0] of the received CMPL dev[4:3] with 
       LEN[1:0] 
     */
    UINT32 xpdfxsparereg_en_x16_ler_check : 1;
    /* xpdfxsparereg_en_x16_ler_check - Bits[27:27], RW_LV, default = 1'b0  */
    UINT32 xpdfxsparereg_en_x16_ler_dump : 1;
    /* xpdfxsparereg_en_x16_ler_dump - Bits[28:28], RW_LV, default = 1'b0  */
    UINT32 xpdfxsparereg_drop_poison_cmpl : 1;
    /* xpdfxsparereg_drop_poison_cmpl - Bits[29:29], RW_LV, default = 1'b0  */
    UINT32 enable_at_switch_swizzle : 1;
    /* enable_at_switch_swizzle - Bits[30:30], RW_LV, default = 1'b1 
       If set to 1, the AT field in the switch header will be zero for ACS completer 
       abort cases. 
     */
    UINT32 enable_acs_mem_check : 1;
    /* enable_acs_mem_check - Bits[31:31], RW_LV, default = 1'b1 
       If set to 1, Memory Requests with AT=11 and Memory Writes with AT=01 will be 
       logged by the PCIE Transaction Layer. 
     */
  } Bits;
  UINT32 Data;
} XPDFXSPAREREG_IIO_DFX_STRUCT;


/* XPDFXSPAREREG1_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138B44)                                                  */
/*       SKX (0x40138B44)                                                     */
/* Register default value on SKX_A0:    0x00000000                            */
/* Register default value on SKX:       0x00000100                            */
#define XPDFXSPAREREG1_IIO_DFX_REG 0x12004B44
/* Struct format extracted from XML file SKX_A0\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb44
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 2;
    /* rsvd_0 - Bits[1:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 cto0_sel : 3;
    /* cto0_sel - Bits[4:2], RWS_L, default = 3'b000 
       Bit-mask to select which IOU CTO source propagates through to the CTO.
       [2] - enable for LTSSM logger trigger
       [1] - enable for outbound header match
       [0] - enable for inbound header match
       Locked by DBGBUSLCK
     */
    UINT32 cto1_sel : 3;
    /* cto1_sel - Bits[7:5], RWS_L, default = 3'b000 
       Bit-mask to select which IOU CTO source propagates through to the CTO.
       [2] - enable for LTSSM logger trigger
       [1] - enable for outbound header match
       [0] - enable for inbound header match
       Locked by DBGBUSLCK
     */
    UINT32 rsvd_8 : 24;
    /* rsvd_8 - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPDFXSPAREREG1_IIO_DFX_A0_STRUCT;

/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb44
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 2;
    /* rsvd_0 - Bits[1:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 cto0_sel : 3;
    /* cto0_sel - Bits[4:2], RWS_L, default = 3'b000 
       Bit-mask to select which IOU CTO source propagates through to the CTO.
       [2] - enable for LTSSM logger trigger
       [1] - enable for outbound header match
       [0] - enable for inbound header match
       Locked by DBGBUSLCK
     */
    UINT32 cto1_sel : 3;
    /* cto1_sel - Bits[7:5], RWS_L, default = 3'b000 
       Bit-mask to select which IOU CTO source propagates through to the CTO.
       [2] - enable for LTSSM logger trigger
       [1] - enable for outbound header match
       [0] - enable for inbound header match
       Locked by DBGBUSLCK
     */
    UINT32 dis_msk_uncerrsts_cto_in_ler : 1;
    /* dis_msk_uncerrsts_cto_in_ler - Bits[8:8], RWS_L, default = 1'b1 
       
       set 1 to disable mask CTO uncerrsts bit during LER mode
     */
    UINT32 rsvd_9 : 23;
    /* rsvd_9 - Bits[31:9], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPDFXSPAREREG1_IIO_DFX_STRUCT;



/* XPDFXSPAREREG2_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138B48)                                                  */
/*       SKX (0x40138B48)                                                     */
/* Register default value:              0x00000000                            */
#define XPDFXSPAREREG2_IIO_DFX_REG 0x12004B48
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xb48
 */
typedef union {
  struct {
    UINT32 xpdfxsparereg2_bdx_eios_l1_fix : 1;
    /* xpdfxsparereg2_bdx_eios_l1_fix - Bits[0:0], RW_LV, default = 1'b0 
       if set to '1' will enable the fix for bugeco #237944.
     */
    UINT32 xpdfxsparereg2_csr_hold_in_disable : 1;
    /* xpdfxsparereg2_csr_hold_in_disable - Bits[1:1], RW_LV, default = 1'b0 
       if set to '1' Upstream port will stay in Disabled state if directed.
     */
    UINT32 xpdfxsparereg2_csr_en_ph2_presetfix : 1;
    /* xpdfxsparereg2_csr_en_ph2_presetfix - Bits[2:2], RW_LV, default = 1'b0 
       if set to '1' the fix for bugeco #273546 is enabled.
     */
    UINT32 rsvd : 29;
    /* rsvd - Bits[31:3], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPDFXSPAREREG2_IIO_DFX_STRUCT;


/* LTSSMLOGDATA0_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138B50)                                                  */
/*       SKX (0x40138B50)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMLOGDATA0_IIO_DFX_REG 0x12004B50
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 06_0_0xb50
 */
typedef union {
  struct {
    UINT32 ltslog_log_entry : 32;
    /* ltslog_log_entry - Bits[31:0], RO_V, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} LTSSMLOGDATA0_IIO_DFX_STRUCT;


/* LTSSMLOGDATA1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138B54)                                                  */
/*       SKX (0x40138B54)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMLOGDATA1_IIO_DFX_REG 0x12004B54
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 06_0_0xb54
 */
typedef union {
  struct {
    UINT32 ltslog_log_entry : 6;
    /* ltslog_log_entry - Bits[5:0], RO_V, default = 6'b000000  */
    UINT32 rsvd : 26;
    /* rsvd - Bits[31:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMLOGDATA1_IIO_DFX_STRUCT;


/* LTSSMLOGCTRL0_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138B58)                                                  */
/*       SKX (0x40138B58)                                                     */
/* Register default value:              0x02600980                            */
#define LTSSMLOGCTRL0_IIO_DFX_REG 0x12004B58
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 06_0_0xb58
 */
typedef union {
  struct {
    UINT32 ltslog_portsel : 2;
    /* ltslog_portsel - Bits[1:0], RWS_L, default = 2'b00 
       
       2'b00 select PORT=0
       2'b01 select PORT=1
       2'b10 select PORT=2
       2'b11 select PORT=3
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 ltslog_cur_stoplog_bypass : 1;
    /* ltslog_cur_stoplog_bypass - Bits[2:2], RWS_L, default = 1'b0  */
    UINT32 ltslog_cur_stoplog : 14;
    /* ltslog_cur_stoplog - Bits[16:3], RWS_L, default = 14'b00000100110000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 ltslog_stoplog : 14;
    /* ltslog_stoplog - Bits[30:17], RWS_L, default = 14'b00000100110000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 1;
    /* rsvd - Bits[31:31], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMLOGCTRL0_IIO_DFX_STRUCT;


/* LTSSMLOGCTRL1_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138B5C)                                                  */
/*       SKX (0x40138B5C)                                                     */
/* Register default value:              0xFF04C001                            */
#define LTSSMLOGCTRL1_IIO_DFX_REG 0x12004B5C
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 06_0_0xb5c
 */
typedef union {
  struct {
    UINT32 ltslog_start32log : 1;
    /* ltslog_start32log - Bits[0:0], RWS_L, default = 1'b1 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 ltslog_enable_clk_divby2 : 1;
    /* ltslog_enable_clk_divby2 - Bits[1:1], RWS_L, default = 1'b0 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 ltslog_mask_ltstates : 8;
    /* ltslog_mask_ltstates - Bits[9:2], RWS_L, default = 8'b00000000  */
    UINT32 ltslog_stoplog_mask : 14;
    /* ltslog_stoplog_mask - Bits[23:10], RWS_L, default = 14'b00000100110000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 ltssm_stoplog : 8;
    /* ltssm_stoplog - Bits[31:24], RWS_L, default = 8'b11111111  */
  } Bits;
  UINT32 Data;
} LTSSMLOGCTRL1_IIO_DFX_STRUCT;


/* LTSSMLOGCTRL2_IIO_DFX_REG supported on:                                    */
/*       SKX_A0 (0x40138B60)                                                  */
/*       SKX (0x40138B60)                                                     */
/* Register default value:              0x00000000                            */
#define LTSSMLOGCTRL2_IIO_DFX_REG 0x12004B60
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 06_0_0xb60
 */
typedef union {
  struct {
    UINT32 ltslog_rd_index : 6;
    /* ltslog_rd_index - Bits[5:0], RWS_L, default = 6'b000000 
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 26;
    /* rsvd - Bits[31:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LTSSMLOGCTRL2_IIO_DFX_STRUCT;


/* PHYTXLNINV_CTL_IIO_DFX_REG supported on:                                   */
/*       SKX_A0 (0x40138BA0)                                                  */
/*       SKX (0x40138BA0)                                                     */
/* Register default value:              0x00000000                            */
#define PHYTXLNINV_CTL_IIO_DFX_REG 0x12004BA0
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xba0
 */
typedef union {
  struct {
    UINT32 dbg_tx_invert : 1;
    /* dbg_tx_invert - Bits[0:0], RWS_L, default = 1'b0 
       per port TX lane inversion (SKX feature 79771)
       Notes:
       Locked by DBGBUSLCK
     */
    UINT32 rsvd : 31;
    /* rsvd - Bits[31:1], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PHYTXLNINV_CTL_IIO_DFX_STRUCT;


/* XPDFXTXNCLSSPAREREG2_IIO_DFX_REG supported on:                             */
/*       SKX_A0 (0x40138C00)                                                  */
/*       SKX (0x40138C00)                                                     */
/* Register default value:              0x00000104                            */
#define XPDFXTXNCLSSPAREREG2_IIO_DFX_REG 0x12004C00
/* Struct format extracted from XML file SKX\1.7.0.CFG.xml.
 * generated by critter 07_0_0xc00
 */
typedef union {
  struct {
    UINT32 en_dummypopcpld4halfcpl : 1;
    /* en_dummypopcpld4halfcpl - Bits[0:0], RW_L, default = 1'b0 
       Enable the dummypop when the address offset for completion is after the 
       halfcacheline. (That is lower address bit5 is "1") 
       code is added in SKX to improve the performance and added a chicken bit to 
       preserve the old behavior 
     */
    UINT32 dis_prh_avail2_logic : 1;
    /* dis_prh_avail2_logic - Bits[1:1], RW_L, default = 1'b0 
       SKX added logic for prh_avail2 to improve the performance, this bit should be 
       set to disable this 
     */
    UINT32 dis_nprh_avail2_logic : 1;
    /* dis_nprh_avail2_logic - Bits[2:2], RW_L, default = 1'b1 
       SKX added logic for nprh_avail2 to improve the performance, this bit should be 
       set to disable this 
     */
    UINT32 dis_cplh_avail2_logic : 1;
    /* dis_cplh_avail2_logic - Bits[3:3], RW_L, default = 1'b0 
       SKX added logic for cplh_avail2 to improve the performance, this bit should be 
       set to disable this 
     */
    UINT32 dis_prdcrdchk4hdrarb : 1;
    /* dis_prdcrdchk4hdrarb - Bits[4:4], RW_L, default = 1'b0  */
    UINT32 dis_nprdcrdchk4hdrarb : 1;
    /* dis_nprdcrdchk4hdrarb - Bits[5:5], RW_L, default = 1'b0  */
    UINT32 dis_cpldcrdchk4hdrarb : 1;
    /* dis_cpldcrdchk4hdrarb - Bits[6:6], RW_L, default = 1'b0  */
    UINT32 dis_mpscpldcrdchk4hdrarb : 1;
    /* dis_mpscpldcrdchk4hdrarb - Bits[7:7], RW_L, default = 1'b0  */
    UINT32 dis_gen_err_msg : 1;
    /* dis_gen_err_msg - Bits[8:8], RW_L, default = 1'b1  */
    UINT32 rsvd : 23;
    /* rsvd - Bits[31:9], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPDFXTXNCLSSPAREREG2_IIO_DFX_STRUCT;


#endif /* IIO_DFX_h */
