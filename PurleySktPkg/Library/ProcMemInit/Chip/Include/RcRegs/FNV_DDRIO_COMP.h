//
// This file contains 'Framework Code' and is licensed as such
// under the terms of your license agreement with Intel or your
// vendor.  This file may not be modified, except as allowed by
// additional terms of your license agreement.
//
// **************************************************************************
// *                                                                        *
// *      Intel Restricted Secret                                           *
// *                                                                        *
// *      Reference Code                                                    *
// *                                                                        *
// *      Copyright (c) 2007-2016, Intel Corporation.                       *
// *                                                                        *
// *      This software and associated documentation (if any) is furnished  *
// *      under a license and may only be used or copied in accordance      *
// *      with the terms of the license. Except as permitted by such        *
// *      license, no part of this software or documentation may be         *
// *      reproduced, stored in a retrieval system, or transmitted in any   *
// *      form or by any means without the express written consent of       *
// *      Intel Corporation.                                                *
// *                                                                        *
// *      This program has been developed by Intel Corporation.             *
// *      Licensee has Intel's permission to incorporate this source code   *
// *      into their product, royalty free.  This source code may NOT be    *
// *      redistributed to anyone without Intel's written permission.       *
// *                                                                        *
// *      Intel specifically disclaims all warranties, express or           *
// *      implied, and all liability, including consequential and other     *
// *      indirect damages, for the use of this code, including liability   *
// *      for infringement of any proprietary rights, and including the     *
// *      warranties of merchantability and fitness for a particular        *
// *      purpose.  Intel does not assume any responsibility for any        *
// *      errors which may appear in this code nor any responsibility to    *
// *      update it.                                                        *
// *                                                                        *
// **************************************************************************
// **************************************************************************
// *                                                                        *
// *  PURPOSE:                                                              *
// *                                                                        *
// *      This file contains Silicon register definitions.                  *
// *                                                                        *
// **************************************************************************
//
/* Date Stamp: 1/5/2016 */

#ifndef FNV_DDRIO_COMP_h
#define FNV_DDRIO_COMP_h

#include "DataTypes.h"

/* Device and Function specifications:                                        */
/* For all target CPUs:                                                       */
/* FNV_DDRIO_COMP_DEV 22                                                      */
/* FNV_DDRIO_COMP_FUN 0                                                       */



/* DDRCRDATACOMP1_CH_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0108)                                                     */
/* Register default value:              0x0C00C000                            */
#define DDRCRDATACOMP1_CH_FNV_DDRIO_COMP_REG 0x050E4108
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * This CR holds the second (of two) 32-bit register set for Data fub Compensation
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 12;
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000001100 
       Sets the resistive value of the VssHi Panic driver pulldown to move VssHi by a 
       precise dV when it gets out of spec 
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000110000 
       Sets the resistive value of the VssHi Panic driver pullup to move VssHi by a 
       precise dV when it gets out of spec. 
     */
  } Bits;
  UINT32 Data;
} DDRCRDATACOMP1_CH_FNV_DDRIO_COMP_STRUCT;




/* DDRCRCTLCOMP_CH_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B0110)                                                     */
/* Register default value:              0x34000000                            */
#define DDRCRCTLCOMP_CH_FNV_DDRIO_COMP_REG 0x050E4110
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * This CR holds the 32-bit register set for Ctl fub Compensation
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 28;
    UINT32 ctlstatlegen : 2;
    /* ctlstatlegen - Bits[29:28], RWV, default = 2'b11 
       Ctl Comp Loop Static Leg Config
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DDRCRCTLCOMP_CH_FNV_DDRIO_COMP_STRUCT;




/* DDRCRCOMPCTL0_CH_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0118)                                                     */
/* Register default value:              0x40800007                            */
#define DDRCRCOMPCTL0_CH_FNV_DDRIO_COMP_REG 0x050E4118
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * This CR holds Compensation Controls like Vref Offset etc
 */
typedef union {
  struct {
    UINT32 lvmodevalid : 1;
    /* lvmodevalid - Bits[0:0], RW, default = 1'b1 
       desc is missing
     */
    UINT32 rsvd_1 : 2;
    UINT32 visabusenable : 1;
    /* visabusenable - Bits[3:3], RW, default = 1'h0 
       Enable Visa debug bus LCB for COMP fub
     */
    UINT32 dqodtupdnoff : 6;
    /* dqodtupdnoff - Bits[9:4], RW, default = 6'h0 
       Offset between DqOdt Up and Down
     */
    UINT32 fixodtd : 1;
    /* fixodtd - Bits[10:10], RW, default = 1'h0 
       Skip DqRcomOdtDn compensation and use DqOdtDn = DqOdtUp + DqOdtUpDnOff
     */
    UINT32 dqdrvpupvref : 7;
    /* dqdrvpupvref - Bits[17:11], RW, default = 7'h0 
       2's compliment analog offset for DqRcompDrvUp Vref with step size of Vccddq/64
     */
    UINT32 dqdrvpdnvref : 7;
    /* dqdrvpdnvref - Bits[24:18], RW, default = 7'b0100000 
       2's compliment analog offset for DqRcompDrvDown Vref with step size of Vccddq/96
     */
    UINT32 dqodtpupvref : 7;
    /* dqodtpupvref - Bits[31:25], RW, default = 7'b0100000 
       2's compliment analog offset for DqOdtcompDrvUp Vref with step size of Vccddq/96
     */
  } Bits;
  UINT32 Data;
} DDRCRCOMPCTL0_CH_FNV_DDRIO_COMP_STRUCT;


/* DDRCRCOMPCTL1_CH_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B011C)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRCOMPCTL1_CH_FNV_DDRIO_COMP_REG 0x050E411C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * This CR holds Compensation Controls like Scomp Offset etc
 */
typedef union {
  struct {
    UINT32 dqscompcells : 4;
    /* dqscompcells - Bits[3:0], RW, default = 4'b0000 
       # of delay cells in DqScomp delayline. (Min Setting > 3)
     */
    UINT32 dqscomppc : 1;
    /* dqscomppc - Bits[4:4], RW, default = 1'b0 
       When set (1'b1), SCOMP locks to a cycle, otherwise locks to a phase
     */
    UINT32 cmdscompcells : 4;
    /* cmdscompcells - Bits[8:5], RW, default = 4'b000 
       # of delay cells in CmdScomp delayline = CmdScompCells
     */
    UINT32 cmdscomppc : 1;
    /* cmdscomppc - Bits[9:9], RW, default = 1'h0 
       When set (1'b1), SCOMP locks to a cycle, otherwise locks to a phase
     */
    UINT32 ctlscompcells : 4;
    /* ctlscompcells - Bits[13:10], RW, default = 4'b000 
       # of delay cells in CtlScomp delayline = CtlScompCells
     */
    UINT32 ctlscomppc : 1;
    /* ctlscomppc - Bits[14:14], RW, default = 1'h0 
       When set (1'b1), SCOMP locks to a cycle, otherwise locks to a phase
     */
    UINT32 rsvd_15 : 6;
    UINT32 tcovref : 7;
    /* tcovref - Bits[27:21], RW, default = 7'b0000000 
       Vref control for TcoComp loop, can be used to offset FSM result
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DDRCRCOMPCTL1_CH_FNV_DDRIO_COMP_STRUCT;


/* DDRCRCOMPCTL2_CH_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0120)                                                     */
/* Register default value:              0x8204083F                            */
#define DDRCRCOMPCTL2_CH_FNV_DDRIO_COMP_REG 0x050E4120
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * This CR holds Compensation Controls like ODT static leg, Rxbias etc
 */
typedef union {
  struct {
    UINT32 odtstatlegen : 2;
    /* odtstatlegen - Bits[1:0], RW, default = 2'b11 
       ODT Comp Loop Staic Leg Config. 00: 0-leg; 01: 3-leg; 10: 6-leg; 11: 12-leg
     */
    UINT32 txdqstatlegen : 2;
    /* txdqstatlegen - Bits[3:2], RW, default = 2'b11 
       DQ Comp Loop Staic Leg Config. 00: 0-leg; 01: 3-leg; 10: 6-leg; 11: 12-leg
     */
    UINT32 cmdstatlegen : 2;
    /* cmdstatlegen - Bits[5:4], RW, default = 2'b11 
       Cmd Comp Loop Staic Leg Config. 00: 0-leg; 01: 3-leg; 10: 6-leg; 11: 12-leg
     */
    UINT32 dqodtpdnvref : 7;
    /* dqodtpdnvref - Bits[12:6], RW, default = 7'b0100000 
       unsiged analog offset for DqOdtRcompDrvDown Vref with step size of 0.75mW
     */
    UINT32 clkdrvpupvref : 7;
    /* clkdrvpupvref - Bits[19:13], RW, default = 7'b0100000 
       unsiged analog offset for ClkRcompDrvUp Vref with step size of 0.75mV
     */
    UINT32 clkdrvpdnvref : 7;
    /* clkdrvpdnvref - Bits[26:20], RW, default = 7'b0100000 
       unsigned analog offset for ClkRcompDrvDown Vref with step size of 0.75mV
     */
    UINT32 rsvd_27 : 1;
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[28:28], RW, default = 1'h0 
       level shift hold enable[br]
                            Holds the HV control values and power down the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling. 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[29:29], RW, default = 1'h0 
       Force ODT on used in dq/clk/ctl rcomp AIP
     */
    UINT32 ddr3nren : 1;
    /* ddr3nren - Bits[30:30], RW, default = 1'b0 
       DDR3 Narrow Range
     */
    UINT32 highbwen : 1;
    /* highbwen - Bits[31:31], RW, default = 1'b1 
       highbwen for panicvtcomp
     */
  } Bits;
  UINT32 Data;
} DDRCRCOMPCTL2_CH_FNV_DDRIO_COMP_STRUCT;


/* DDRCRCOMPVSSHI_CH_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0124)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRCOMPVSSHI_CH_FNV_DDRIO_COMP_REG 0x050E4124
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * This CR holds Compensation Controls for VssHi
 */
typedef union {
  struct {
    UINT32 panicdrvdnvref : 6;
    /* panicdrvdnvref - Bits[5:0], RW, default = 6'h0 
       Unsigned integer to select Vref for Panic DriverDn compensation. Step size of 
       VccIO/128 
     */
    UINT32 panicdrvupvref : 6;
    /* panicdrvupvref - Bits[11:6], RW, default = 6'h0 
       Unsigned integer to select Vref for Panic DriverUp compensation. Step size of 
       VccIO/128 
     */
    UINT32 vtoffset : 5;
    /* vtoffset - Bits[16:12], RW, default = 5'h0 
       Digital Offset to VtComp value.  Unsigned interger in the VccIO domain with a 
       step size of VccIO/128 
     */
    UINT32 vtslopea : 3;
    /* vtslopea - Bits[19:17], RW, default = 3'h0 
       Slope adjustment to the VtComp value.  {0: 0, 1: -1/4, 2: -1/8, 3: -1/16, 4: 
       +1/2, 5: +1/4, 6: +1/8, 7: +1/16} 
     */
    UINT32 vtslopeb : 3;
    /* vtslopeb - Bits[22:20], RW, default = 3'h0 
       Slope adjustment to the VtComp value.  {0: 0, 1: -1/4, 2: -1/8, 3: -1/16, 4: 
       +1/2, 5: +1/4, 6: +1/8, 7: +1/16} 
     */
    UINT32 clkdiv : 3;
    /* clkdiv - Bits[25:23], RW, default = 3'h0 
       divide by clk select for panicvt comp
     */
    UINT32 ddrdmvrfs3localpwrgoodoverride : 1;
    /* ddrdmvrfs3localpwrgoodoverride - Bits[26:26], RW, default = 1'h0 
       When this CSR bit is cleared,  S3LocalVcc in DIMM Vref is always on
     */
    UINT32 disablemcdfxclkqnnnh : 1;
    /* disablemcdfxclkqnnnh - Bits[27:27], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 4;
    /* spare - Bits[31:28], RW, default = 4'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DDRCRCOMPVSSHI_CH_FNV_DDRIO_COMP_STRUCT;


/* DDRCRCOMPOVR_CH_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B0128)                                                     */
/* Register default value:              0x010F0000                            */
#define DDRCRCOMPOVR_CH_FNV_DDRIO_COMP_REG 0x050E4128
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * This CR holds bits for Override Enable for different Compensations
 */
typedef union {
  struct {
    UINT32 dqdrvu : 1;
    /* dqdrvu - Bits[0:0], RW, default = 1'h0 
       Override Data Rcomp DriveUp Value
     */
    UINT32 dqdrvd : 1;
    /* dqdrvd - Bits[1:1], RW, default = 1'h0 
       Override Data Rcomp DriveDn Value
     */
    UINT32 dqodtu : 1;
    /* dqodtu - Bits[2:2], RW, default = 1'h0 
       Override Data Rcomp OdtUp Value
     */
    UINT32 dqodtd : 1;
    /* dqodtd - Bits[3:3], RW, default = 1'h0 
       Override Data Rcomp OdtDn Value
     */
    UINT32 cmddrvu : 1;
    /* cmddrvu - Bits[4:4], RW, default = 1'h0 
       Override Cmd Rcomp DriveUp Value
     */
    UINT32 cmddrvd : 1;
    /* cmddrvd - Bits[5:5], RW, default = 1'h0 
       Override Cmd Rcomp DriveDn Value
     */
    UINT32 ctldrvu : 1;
    /* ctldrvu - Bits[6:6], RW, default = 1'h0 
       Override Ctl Rcomp DriveUp Value
     */
    UINT32 ctldrvd : 1;
    /* ctldrvd - Bits[7:7], RW, default = 1'h0 
       Override Ctl Rcomp DriveDn Value
     */
    UINT32 clkdrvu : 1;
    /* clkdrvu - Bits[8:8], RW, default = 1'h0 
       Override Clk Rcomp DriveUp Value
     */
    UINT32 clkdrvd : 1;
    /* clkdrvd - Bits[9:9], RW, default = 1'h0 
       Override Clk Rcomp DriveDn Value
     */
    UINT32 dqsr : 1;
    /* dqsr - Bits[10:10], RW, default = 1'h0 
       Override Data Scomp Value
     */
    UINT32 cmdsr : 1;
    /* cmdsr - Bits[11:11], RW, default = 1'h0 
       Override Cmd Scomp Value
     */
    UINT32 ctlsr : 1;
    /* ctlsr - Bits[12:12], RW, default = 1'h0 
       Override Ctl Scomp Value
     */
    UINT32 clksr : 1;
    /* clksr - Bits[13:13], RW, default = 1'h0 
       Override Clk Scomp Value
     */
    UINT32 dqtcooff : 1;
    /* dqtcooff - Bits[14:14], RW, default = 1'h0 
       Override Data TcoOffset Value
     */
    UINT32 cmdtcooff : 1;
    /* cmdtcooff - Bits[15:15], RW, default = 1'h0 
       Override Cmd TcoOffset Value
     */
    UINT32 dqtco : 1;
    /* dqtco - Bits[16:16], RW, default = 1'b1 
       Override Data Tco Value
     */
    UINT32 cmdtco : 1;
    /* cmdtco - Bits[17:17], RW, default = 1'b1 
       Override Cmd Tco Value
     */
    UINT32 ctltco : 1;
    /* ctltco - Bits[18:18], RW, default = 1'b1 
       Override Ctl Tco Value
     */
    UINT32 clktco : 1;
    /* clktco - Bits[19:19], RW, default = 1'b1 
       Override Clk Tco Value
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[20:20], RW, default = 1'h0 
       Enable finer vref resolution in ddr4
     */
    UINT32 rsvd_21 : 4;
    UINT32 cttermination : 1;
    /* cttermination - Bits[25:25], RW, default = 1'b0 
        used to be VccddqHi in HSW, both are equivalent[br]
                 1 - Nominal Vccddq voltage is 1.5v[br]
                 0 - Nominal Vccddq voltage is 1.35v or 1.2v
     */
    UINT32 centerrptclkenovrd : 1;
    /* centerrptclkenovrd - Bits[26:26], RW, default = 1'h0 
       Override Clkgating signal for lcben in ifc
     */
    UINT32 rsvd_27 : 5;
  } Bits;
  UINT32 Data;
} DDRCRCOMPOVR_CH_FNV_DDRIO_COMP_STRUCT;


/* DDRCRCOMPVSSHICONTROL_CH_FNV_DDRIO_COMP_REG supported on:                  */
/*       EKV (0x401B012C)                                                     */
/* Register default value:              0x004D8238                            */
#define DDRCRCOMPVSSHICONTROL_CH_FNV_DDRIO_COMP_REG 0x050E412C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * This CR holds bits to control the VssHi Generation
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
       VssHi control bits
     */
    UINT32 outputcode : 8;
    /* outputcode - Bits[31:24], ROV, default = 8'h0 
       Read the current code being generated by the VssHi feedback loop.  Use SelCode 
       field to control which instance is read. 
     */
  } Bits;
  UINT32 Data;
} DDRCRCOMPVSSHICONTROL_CH_FNV_DDRIO_COMP_STRUCT;


/* DDRCRDIMMVREFCONTROL1_CH_FNV_DDRIO_COMP_REG supported on:                  */
/*       EKV (0x401B0130)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRDIMMVREFCONTROL1_CH_FNV_DDRIO_COMP_REG 0x050E4130
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * DimmVref Adjust Controls.
 */
typedef union {
  struct {
    UINT32 ch0cavrefctl : 8;
    /* ch0cavrefctl - Bits[7:0], RW, default = 8'b0 
        Ch0 CA DIMM Vref Control. [br]
                             2s compliment encoding with 0 = Vdd/2, range of +/- Vdd/6 
       and step size of Vdd/384 (3.9mV)[br] 
               NOTE: LSB (bit 0) is a DFX feature (averaging between two codes) - only 
       use even codes so that LSB is '0'. 
     */
    UINT32 ch2cavrefctl : 8;
    /* ch2cavrefctl - Bits[15:8], RW, default = 8'b0 
        ch2 DQ DIMM Vref Control.[br]
                             2s compliment encoding with 0 = Vdd/2, range of +/- Vdd/6 
       and step size of Vdd/384 (3.9mV)[br] 
               NOTE: LSB (bit 7) is a DFX feature (averaging between two codes) - only 
       use even codes so that LSB is '0'. 
     */
    UINT32 ch1cavrefctl : 8;
    /* ch1cavrefctl - Bits[23:16], RW, default = 8'b0 
        ch1 DQ DIMM Vref Control.[br]
                             2s compliment encoding with 0 = Vdd/2, range of +/- Vdd/6 
       and step size of Vdd/384 (3.9mV)[br] 
               NOTE: LSB (bit 14) is a DFX feature - only use even codes so that LSB is 
       '0'. 
     */
    UINT32 ch0caendimmvref : 1;
    /* ch0caendimmvref - Bits[24:24], RW, default = 1'b0 
       Enables Ch0 CA DIMM Vref
     */
    UINT32 ch2caendimmvref : 1;
    /* ch2caendimmvref - Bits[25:25], RW, default = 1'b0 
       Enables Channel 2 DIMM Vref
     */
    UINT32 ch1caendimmvref : 1;
    /* ch1caendimmvref - Bits[26:26], RW, default = 1'b0 
       Enables Channel 1 DIMM Vref
     */
    UINT32 hiztimerctrl : 2;
    /* hiztimerctrl - Bits[28:27], RW, default = 2'b0 
        For the HiZ Timer, selects the number of clocks for the timer to expire [br]
                             {0: 4 cycles, 1: 8 cycles, 2: 16 cycles, 3: 32 cycles}
     */
    UINT32 ch0caslowbw : 1;
    /* ch0caslowbw - Bits[29:29], ROV, default = 1'b0 
       Ch0 CA Vref controller has completed initial convergence and is in slow BW mode. 
        If used as a lock detector, add 5uS after slow BW mode is achieved for full 
       convergence 
     */
    UINT32 ch1caslowbw : 1;
    /* ch1caslowbw - Bits[30:30], ROV, default = 1'b0 
       Ch1 Vref controller has completed initial convergence and is in slow BW mode.  
       If used as a lock detector, add 5uS after slow BW mode is achieved for full 
       convergence 
     */
    UINT32 ch2caslowbw : 1;
    /* ch2caslowbw - Bits[31:31], ROV, default = 1'b0 
       Ch2 Vref controller has completed initial convergence and is in slow BW mode.  
       If used as a lock detector, add 5uS after slow BW mode is achieved for full 
       convergence 
     */
  } Bits;
  UINT32 Data;
} DDRCRDIMMVREFCONTROL1_CH_FNV_DDRIO_COMP_STRUCT;


/* DDRCRDIMMVREFCONTROL2_CH_FNV_DDRIO_COMP_REG supported on:                  */
/*       EKV (0x401B0134)                                                     */
/* Register default value:              0x000E4500                            */
#define DDRCRDIMMVREFCONTROL2_CH_FNV_DDRIO_COMP_REG 0x050E4134
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. 
 */
typedef union {
  struct {
    UINT32 dimmvrefctl : 24;
    /* dimmvrefctl - Bits[23:0], RW, default = 24'h0E4500 
        DIMM VREF adjust settings.[br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode         23:21   Selects the code to output:  [0] = {0: Code, 1: 
       TCode}  [2:1] = {0: Select Ch0 CA Code, 1: Select DQCh1 Code, 2: Select DQCh2 
       Code}  [br] 
           VtOffset    20:18   Offset for VtComp to convert from VccIO to VccDDQ.  
       Signed integer in VccDDQ domain with a step size of VccDDQ/48 (32 mV)[br] 
           VtSlopeA    17:15   Slope correction to convert between VtComp in VccIO to 
       VccDDQ: {0: 0, 1: -1/8, 2: -1/16, 3: -1/32. 4: +1/4, 5: +1/8, 6: +1/16. 7: 
       +1/32}[br] 
           VtSlopeB    14:12   Slope correction to convert between VtComp in VccIO to 
       VccDDQ: {0: 0, 1: -1/8, 2: -1/16, 3: -1/32. 4: +1/4, 5: +1/8, 6: +1/16. 7: 
       +1/32}[br] 
           Reserved        11      Reserved for future usage[br]
           HiBWEnable  10  Enables high bandwidth mode after a code change to allow 
       fast loop convergence[br] 
           SlowBWError 9:8 In slow BW mode, limits the loop gain (ie: difference 
       between code and tcode) to +/- 2^(SlowBWError)[br] 
           OpenLoop    7   Operates the dimm vref in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
           SampleDivider   6:4 Controls the loop bandwidth by dividing down the input 
       clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: 
       Qclk/64, 7: Qclk/128}[br] 
           LoBWDivider 3:2 For the slow integrator, selects the net number of samples 
       in a given direction to trip the filter.  {0: 4 samples, 1: 8 samples, 2: 16 
       samples, 3: 32 samples} [br] 
           HiBWDivider 1:0 For the fast integrator, selects the net number of samples 
       in a given direction to trip the filter.  {0: 4 samples, 1: 8 samples, 2: 16 
       samples, 3: 32 samples} 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} DDRCRDIMMVREFCONTROL2_CH_FNV_DDRIO_COMP_STRUCT;


/* DDRCRSPDCFG1_CH_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B0138)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRSPDCFG1_CH_FNV_DDRIO_COMP_REG 0x050E4138
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * SPD Comp Config
 */
typedef union {
  struct {
    UINT32 crspdcfg1 : 22;
    /* crspdcfg1 - Bits[21:0], RW, default = 22'b0000000000000000 
         SPD config1[br]
               Field Description: [br]
                Field             Bits    Description[br]
               -------            ----    
       --------------------------------------------------------------------------------------------------------------------------------------------------------------- 
          [br] 
               spd_rcomp          21:15   view CComp[br]
               spd_scomp_p        14:9   view SComp[br]
               spd_scomp_n          8:3   view SComp[br]
               spd_slowbuffer_ctl2    2   View Slow buffer control / Control 
       ddr_viewdig1 [br] 
               spd_slowbuffer_ctl1    1   View Slow buffer control / Control 
       ddr_viewdig0 [br] 
               spd_ddr_chdbg_sel      0   View Debug mux select in spd,  / 1'b1  - 
       select ch0 
     */
    UINT32 odtupsegen : 2;
    /* odtupsegen - Bits[23:22], RW, default = 2'b00 
       Odt up segment Enable
     */
    UINT32 odtdnsegen : 2;
    /* odtdnsegen - Bits[25:24], RW, default = 2'b00 
       Odt down segment Enable
     */
    UINT32 odtsegovrd : 1;
    /* odtsegovrd - Bits[26:26], RW, default = 1'b0 
       Dq segment Override
     */
    UINT32 rsvd : 5;
    /* rsvd - Bits[31:27], RW, default = 5'b0 
       Reserved for future usage
     */
  } Bits;
  UINT32 Data;
} DDRCRSPDCFG1_CH_FNV_DDRIO_COMP_STRUCT;


/* DDRCRSPDCFG2_CH_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B013C)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRSPDCFG2_CH_FNV_DDRIO_COMP_REG 0x050E413C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * SPD Comp Config
 */
typedef union {
  struct {
    UINT32 crspdcfg2 : 15;
    /* crspdcfg2 - Bits[14:0], RW, default = 15'b000000000000000 
         SPD config2[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    
       --------------------------------------------------------------------------------------------------------------------------------------------------------------- 
          [br] 
               spd_smbus1b           14   SPD/[br]
               spd_hys_configp    13:12   SPD/Memhot/View[br]
               spd_hys_confign_b  11:10   SPD/Memhot/View[br]
               spd_rcompnctl        9:5   SPD/Memhot RComp[br]
               spd_scompnctl        4:0   SPD/Memhot SComp
     */
    UINT32 dqupsegen : 2;
    /* dqupsegen - Bits[16:15], RW, default = 2'b00 
       Dq up segment Enable
     */
    UINT32 dqdnsegen : 2;
    /* dqdnsegen - Bits[18:17], RW, default = 2'b00 
       Dq down segment Enable
     */
    UINT32 dqsegovrd : 1;
    /* dqsegovrd - Bits[19:19], RW, default = 1'b0 
       Dq segment Override
     */
    UINT32 clkupsegen : 2;
    /* clkupsegen - Bits[21:20], RW, default = 2'b00 
       Clk up segment Enable
     */
    UINT32 clkdnsegen : 2;
    /* clkdnsegen - Bits[23:22], RW, default = 2'b00 
       Clk down segment Enable
     */
    UINT32 clksegovrd : 1;
    /* clksegovrd - Bits[24:24], RW, default = 1'b0 
       Clk segment Override
     */
    UINT32 ctlupsegen : 2;
    /* ctlupsegen - Bits[26:25], RW, default = 2'b00 
       Ctl up segment Enable
     */
    UINT32 ctldnsegen : 2;
    /* ctldnsegen - Bits[28:27], RW, default = 2'b00 
       Ctl down segment Enable
     */
    UINT32 ctlsegovrd : 1;
    /* ctlsegovrd - Bits[29:29], RW, default = 1'b0 
       Ctl segment Override
     */
    UINT32 rsvd : 2;
    /* rsvd - Bits[31:30], RW, default = 2'b0 
       Reserved for future usage
     */
  } Bits;
  UINT32 Data;
} DDRCRSPDCFG2_CH_FNV_DDRIO_COMP_STRUCT;


/* DDRCRCOMPCTL3_CH_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0140)                                                     */
/* Register default value:              0x24081020                            */
#define DDRCRCOMPCTL3_CH_FNV_DDRIO_COMP_REG 0x050E4140
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * This CR holds Compensation Controls like cmd vref ctl, ctl vref ctl etc
 */
typedef union {
  struct {
    UINT32 cmddrvpupvref : 7;
    /* cmddrvpupvref - Bits[6:0], RW, default = 7'b0100000 
       2's compliment analog offset for CmdRcompDrvUp Vref with step size of Vccddq/96
     */
    UINT32 cmddrvpdnvref : 7;
    /* cmddrvpdnvref - Bits[13:7], RW, default = 7'b0100000 
       2's compliment analog offset for CmdRcompDrvDown Vref with step size of 
       Vccddq/96 
     */
    UINT32 ctldrvpupvref : 7;
    /* ctldrvpupvref - Bits[20:14], RW, default = 7'b0100000 
       2's compliment analog offset for CtlRcompDrvUp Vref with step size of Vccddq/96
     */
    UINT32 ctldrvpdnvref : 7;
    /* ctldrvpdnvref - Bits[27:21], RW, default = 7'b0100000 
       2's compliment analog offset for CtlRcompDrvDown Vref with step size of 
       Vccddq/96 
     */
    UINT32 swcapcmpclksel : 2;
    /* swcapcmpclksel - Bits[29:28], RW, default = 2'b10 
       Switch capacitor comparator clock select
     */
    UINT32 halflsbshiften : 1;
    /* halflsbshiften - Bits[30:30], RW, default = 1'h0 
       Half LSB Shift Enable
     */
    UINT32 dfxsel : 1;
    /* dfxsel - Bits[31:31], RW, default = 1'b0 
       dfxsel for cmd rcomp
     */
  } Bits;
  UINT32 Data;
} DDRCRCOMPCTL3_CH_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N0RANK0_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0200)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_0_FNV_DDRIO_COMP_REG 0x050E4200
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset, [br] 
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK1_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0204)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_0_FNV_DDRIO_COMP_REG 0x050E4204
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank1. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK2_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0208)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_0_FNV_DDRIO_COMP_REG 0x050E4208
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank2. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK3_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B020C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_0_FNV_DDRIO_COMP_REG 0x050E420C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank3. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK4_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0210)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_0_FNV_DDRIO_COMP_REG 0x050E4210
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank4. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK5_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0214)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_0_FNV_DDRIO_COMP_REG 0x050E4214
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank5. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK6_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0218)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_0_FNV_DDRIO_COMP_REG 0x050E4218
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank6. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK7_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B021C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_0_FNV_DDRIO_COMP_REG 0x050E421C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank7. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK0_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0220)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_0_FNV_DDRIO_COMP_REG 0x050E4220
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK1_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0224)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_0_FNV_DDRIO_COMP_REG 0x050E4224
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK2_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0228)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_0_FNV_DDRIO_COMP_REG 0x050E4228
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK3_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B022C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_0_FNV_DDRIO_COMP_REG 0x050E422C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK4_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0230)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_0_FNV_DDRIO_COMP_REG 0x050E4230
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK5_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0234)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_0_FNV_DDRIO_COMP_REG 0x050E4234
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK6_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0238)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_0_FNV_DDRIO_COMP_REG 0x050E4238
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK7_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B023C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_0_FNV_DDRIO_COMP_REG 0x050E423C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK0_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0240)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_0_FNV_DDRIO_COMP_REG 0x050E4240
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the four DQ Clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK1_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0244)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_0_FNV_DDRIO_COMP_REG 0x050E4244
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK2_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0248)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_0_FNV_DDRIO_COMP_REG 0x050E4248
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK3_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B024C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_0_FNV_DDRIO_COMP_REG 0x050E424C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK4_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0250)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_0_FNV_DDRIO_COMP_REG 0x050E4250
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK5_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0254)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_0_FNV_DDRIO_COMP_REG 0x050E4254
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 3;
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK6_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0258)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_0_FNV_DDRIO_COMP_REG 0x050E4258
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK7_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B025C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_0_FNV_DDRIO_COMP_REG 0x050E425C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK0_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0260)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_0_FNV_DDRIO_COMP_REG 0x050E4260
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte. 0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK1_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0264)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_0_FNV_DDRIO_COMP_REG 0x050E4264
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK2_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0268)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_0_FNV_DDRIO_COMP_REG 0x050E4268
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK3_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B026C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_0_FNV_DDRIO_COMP_REG 0x050E426C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK4_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0270)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_0_FNV_DDRIO_COMP_REG 0x050E4270
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK5_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0274)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_0_FNV_DDRIO_COMP_REG 0x050E4274
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK6_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0278)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_0_FNV_DDRIO_COMP_REG 0x050E4278
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK7_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B027C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_0_FNV_DDRIO_COMP_REG 0x050E427C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK0_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0280)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_0_FNV_DDRIO_COMP_REG 0x050E4280
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       selects which skewed DQSP (to sample even bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSP 
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       selects which skewed DQSN (to sample odd bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSN 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK1_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0284)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_0_FNV_DDRIO_COMP_REG 0x050E4284
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK2_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0288)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_0_FNV_DDRIO_COMP_REG 0x050E4288
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK3_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B028C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_0_FNV_DDRIO_COMP_REG 0x050E428C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK4_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0290)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_0_FNV_DDRIO_COMP_REG 0x050E4290
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK5_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0294)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_0_FNV_DDRIO_COMP_REG 0x050E4294
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK6_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0298)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_0_FNV_DDRIO_COMP_REG 0x050E4298
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK7_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B029C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_0_FNV_DDRIO_COMP_REG 0x050E429C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_0_FNV_DDRIO_COMP_STRUCT;


/* TXXTALKN0_0_FNV_DDRIO_COMP_REG supported on:                               */
/*       EKV (0x401B02A0)                                                     */
/* Register default value:              0x00000000                            */
#define TXXTALKN0_0_FNV_DDRIO_COMP_REG 0x050E42A0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * TX Crosstalk Cancellation Per Lane Write CoEfficents. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 twototwologicdelayrank0 : 4;
    /* twototwologicdelayrank0 - Bits[3:0], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 0
     */
    UINT32 twototwologicdelayrank1 : 4;
    /* twototwologicdelayrank1 - Bits[7:4], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 1
     */
    UINT32 twototwologicdelayrank2 : 4;
    /* twototwologicdelayrank2 - Bits[11:8], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 2
     */
    UINT32 twototwologicdelayrank3 : 4;
    /* twototwologicdelayrank3 - Bits[15:12], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 3
     */
    UINT32 twototwologicdelayrank4 : 4;
    /* twototwologicdelayrank4 - Bits[19:16], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 4
     */
    UINT32 twototwologicdelayrank5 : 4;
    /* twototwologicdelayrank5 - Bits[23:20], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 5
     */
    UINT32 twototwologicdelayrank6 : 4;
    /* twototwologicdelayrank6 - Bits[27:24], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 6
     */
    UINT32 twototwologicdelayrank7 : 4;
    /* twototwologicdelayrank7 - Bits[31:28], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 7
     */
  } Bits;
  UINT32 Data;
} TXXTALKN0_0_FNV_DDRIO_COMP_STRUCT;


/* RXVREFCTRLN0_0_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B02A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_0_FNV_DDRIO_COMP_REG 0x050E42A4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_0_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN0_0_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B02A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_0_FNV_DDRIO_COMP_REG 0x050E42A8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage[br]
       [br]
               DataTrainFeedback Description:[br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  --------------------------[br]
               Cross Over Cal     0      0        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      0        Tx Dq Phase Detection[br]
               Cross Over Cal     2      0        Rec En Phase Detection[br]
               RcvEn              8:0    0        Byte detection[br]
       [br]
               Wr Leveling        8:0    0        Byte detection[br]
               Senseamp offset    3:0    0        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_0_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN0_0_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B02C8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN0_0_FNV_DDRIO_COMP_REG 0x050E42C8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN0_0_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N0_0_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B02CC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N0_0_FNV_DDRIO_COMP_REG 0x050E42CC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N0_0_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN0_0_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B02D0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN0_0_FNV_DDRIO_COMP_REG 0x050E42D0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN0_0_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N0_0_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B02D4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N0_0_FNV_DDRIO_COMP_REG 0x050E42D4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N0_0_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N0_0_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B02D8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N0_0_FNV_DDRIO_COMP_REG 0x050E42D8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N0_0_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN0_0_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B02DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN0_0_FNV_DDRIO_COMP_REG 0x050E42DC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN0_0_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN0_0_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B02E4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN0_0_FNV_DDRIO_COMP_REG 0x050E42E4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN0_0_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N0_0_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B02E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N0_0_FNV_DDRIO_COMP_REG 0x050E42E8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N0_0_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N0_0_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B02EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N0_0_FNV_DDRIO_COMP_REG 0x050E42EC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N0_0_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N0_0_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B02F0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N0_0_FNV_DDRIO_COMP_REG 0x050E42F0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N0_0_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N0_0_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B02F4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N0_0_FNV_DDRIO_COMP_REG 0x050E42F4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N0_0_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN0_0_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B02F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN0_0_FNV_DDRIO_COMP_REG 0x050E42F8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN0_0_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N1RANK0_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0300)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_0_FNV_DDRIO_COMP_REG 0x050E4300
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK1_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0304)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_0_FNV_DDRIO_COMP_REG 0x050E4304
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK2_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0308)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_0_FNV_DDRIO_COMP_REG 0x050E4308
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0.Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK3_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B030C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_0_FNV_DDRIO_COMP_REG 0x050E430C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK4_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0310)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_0_FNV_DDRIO_COMP_REG 0x050E4310
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK5_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0314)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_0_FNV_DDRIO_COMP_REG 0x050E4314
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK6_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0318)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_0_FNV_DDRIO_COMP_REG 0x050E4318
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK7_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B031C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_0_FNV_DDRIO_COMP_REG 0x050E431C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK0_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0320)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_0_FNV_DDRIO_COMP_REG 0x050E4320
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK1_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0324)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_0_FNV_DDRIO_COMP_REG 0x050E4324
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK2_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0328)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_0_FNV_DDRIO_COMP_REG 0x050E4328
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK3_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B032C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_0_FNV_DDRIO_COMP_REG 0x050E432C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK4_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0330)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_0_FNV_DDRIO_COMP_REG 0x050E4330
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK5_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0334)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_0_FNV_DDRIO_COMP_REG 0x050E4334
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK6_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0338)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_0_FNV_DDRIO_COMP_REG 0x050E4338
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_0_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK7_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B033C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_0_FNV_DDRIO_COMP_REG 0x050E433C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK0_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0340)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_0_FNV_DDRIO_COMP_REG 0x050E4340
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK1_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0344)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_0_FNV_DDRIO_COMP_REG 0x050E4344
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK2_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0348)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_0_FNV_DDRIO_COMP_REG 0x050E4348
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK3_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B034C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_0_FNV_DDRIO_COMP_REG 0x050E434C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK4_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0350)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_0_FNV_DDRIO_COMP_REG 0x050E4350
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK5_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0354)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_0_FNV_DDRIO_COMP_REG 0x050E4354
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled [br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK6_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0358)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_0_FNV_DDRIO_COMP_REG 0x050E4358
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK7_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B035C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_0_FNV_DDRIO_COMP_REG 0x050E435C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK0_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0360)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_0_FNV_DDRIO_COMP_REG 0x050E4360
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK1_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0364)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_0_FNV_DDRIO_COMP_REG 0x050E4364
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK2_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0368)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_0_FNV_DDRIO_COMP_REG 0x050E4368
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK3_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B036C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_0_FNV_DDRIO_COMP_REG 0x050E436C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK4_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0370)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_0_FNV_DDRIO_COMP_REG 0x050E4370
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK5_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0374)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_0_FNV_DDRIO_COMP_REG 0x050E4374
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK6_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0378)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_0_FNV_DDRIO_COMP_REG 0x050E4378
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_0_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK7_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B037C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_0_FNV_DDRIO_COMP_REG 0x050E437C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK0_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0380)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_0_FNV_DDRIO_COMP_REG 0x050E4380
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK1_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0384)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_0_FNV_DDRIO_COMP_REG 0x050E4384
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK2_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0388)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_0_FNV_DDRIO_COMP_REG 0x050E4388
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK3_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B038C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_0_FNV_DDRIO_COMP_REG 0x050E438C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK4_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0390)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_0_FNV_DDRIO_COMP_REG 0x050E4390
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK5_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0394)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_0_FNV_DDRIO_COMP_REG 0x050E4394
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK6_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0398)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_0_FNV_DDRIO_COMP_REG 0x050E4398
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_0_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK7_0_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B039C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_0_FNV_DDRIO_COMP_REG 0x050E439C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_0_FNV_DDRIO_COMP_STRUCT;




/* RXVREFCTRLN1_0_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B03A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_0_FNV_DDRIO_COMP_REG 0x050E43A4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_0_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN1_0_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B03A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_0_FNV_DDRIO_COMP_REG 0x050E43A8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage [br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  ---------------[br]
               Cross Over Cal     0      1        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      1        Tx Dq Phase Detection[br]
               Cross Over Cal     2      1        Rec En Phase Detection[br]
               RcvEn              8:0    1        Byte detection[br]
               Wr Leveling        8:0    1        Byte detection[br]
               Senseamp offset    3:0    1        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_0_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN1_0_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B03C8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN1_0_FNV_DDRIO_COMP_REG 0x050E43C8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN1_0_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N1_0_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B03CC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N1_0_FNV_DDRIO_COMP_REG 0x050E43CC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N1_0_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN1_0_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B03D0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN1_0_FNV_DDRIO_COMP_REG 0x050E43D0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN1_0_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N1_0_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B03D4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N1_0_FNV_DDRIO_COMP_REG 0x050E43D4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N1_0_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N1_0_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B03D8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N1_0_FNV_DDRIO_COMP_REG 0x050E43D8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N1_0_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN1_0_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B03DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN1_0_FNV_DDRIO_COMP_REG 0x050E43DC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN1_0_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN1_0_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B03E4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN1_0_FNV_DDRIO_COMP_REG 0x050E43E4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN1_0_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N1_0_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B03E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N1_0_FNV_DDRIO_COMP_REG 0x050E43E8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N1_0_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N1_0_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B03EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N1_0_FNV_DDRIO_COMP_REG 0x050E43EC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N1_0_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N1_0_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B03F0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N1_0_FNV_DDRIO_COMP_REG 0x050E43F0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N1_0_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N1_0_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B03F4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N1_0_FNV_DDRIO_COMP_REG 0x050E43F4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N1_0_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN1_0_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B03F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN1_0_FNV_DDRIO_COMP_REG 0x050E43F8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN1_0_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N0RANK0_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0400)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_1_FNV_DDRIO_COMP_REG 0x050E4400
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset, [br] 
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK1_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0404)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_1_FNV_DDRIO_COMP_REG 0x050E4404
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank1. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK2_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0408)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_1_FNV_DDRIO_COMP_REG 0x050E4408
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank2. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK3_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B040C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_1_FNV_DDRIO_COMP_REG 0x050E440C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank3. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK4_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0410)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_1_FNV_DDRIO_COMP_REG 0x050E4410
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank4. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK5_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0414)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_1_FNV_DDRIO_COMP_REG 0x050E4414
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank5. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK6_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0418)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_1_FNV_DDRIO_COMP_REG 0x050E4418
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank6. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK7_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B041C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_1_FNV_DDRIO_COMP_REG 0x050E441C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank7. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK0_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0420)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_1_FNV_DDRIO_COMP_REG 0x050E4420
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK1_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0424)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_1_FNV_DDRIO_COMP_REG 0x050E4424
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK2_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0428)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_1_FNV_DDRIO_COMP_REG 0x050E4428
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK3_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B042C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_1_FNV_DDRIO_COMP_REG 0x050E442C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK4_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0430)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_1_FNV_DDRIO_COMP_REG 0x050E4430
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK5_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0434)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_1_FNV_DDRIO_COMP_REG 0x050E4434
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK6_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0438)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_1_FNV_DDRIO_COMP_REG 0x050E4438
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK7_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B043C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_1_FNV_DDRIO_COMP_REG 0x050E443C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK0_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0440)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_1_FNV_DDRIO_COMP_REG 0x050E4440
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the four DQ Clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK1_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0444)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_1_FNV_DDRIO_COMP_REG 0x050E4444
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK2_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0448)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_1_FNV_DDRIO_COMP_REG 0x050E4448
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK3_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B044C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_1_FNV_DDRIO_COMP_REG 0x050E444C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK4_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0450)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_1_FNV_DDRIO_COMP_REG 0x050E4450
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK5_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0454)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_1_FNV_DDRIO_COMP_REG 0x050E4454
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 3;
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK6_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0458)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_1_FNV_DDRIO_COMP_REG 0x050E4458
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK7_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B045C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_1_FNV_DDRIO_COMP_REG 0x050E445C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK0_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0460)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_1_FNV_DDRIO_COMP_REG 0x050E4460
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte. 0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK1_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0464)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_1_FNV_DDRIO_COMP_REG 0x050E4464
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK2_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0468)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_1_FNV_DDRIO_COMP_REG 0x050E4468
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK3_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B046C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_1_FNV_DDRIO_COMP_REG 0x050E446C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK4_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0470)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_1_FNV_DDRIO_COMP_REG 0x050E4470
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK5_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0474)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_1_FNV_DDRIO_COMP_REG 0x050E4474
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK6_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0478)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_1_FNV_DDRIO_COMP_REG 0x050E4478
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK7_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B047C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_1_FNV_DDRIO_COMP_REG 0x050E447C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK0_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0480)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_1_FNV_DDRIO_COMP_REG 0x050E4480
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       selects which skewed DQSP (to sample even bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSP 
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       selects which skewed DQSN (to sample odd bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSN 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK1_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0484)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_1_FNV_DDRIO_COMP_REG 0x050E4484
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK2_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0488)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_1_FNV_DDRIO_COMP_REG 0x050E4488
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK3_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B048C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_1_FNV_DDRIO_COMP_REG 0x050E448C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK4_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0490)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_1_FNV_DDRIO_COMP_REG 0x050E4490
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK5_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0494)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_1_FNV_DDRIO_COMP_REG 0x050E4494
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK6_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0498)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_1_FNV_DDRIO_COMP_REG 0x050E4498
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK7_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B049C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_1_FNV_DDRIO_COMP_REG 0x050E449C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_1_FNV_DDRIO_COMP_STRUCT;


/* TXXTALKN0_1_FNV_DDRIO_COMP_REG supported on:                               */
/*       EKV (0x401B04A0)                                                     */
/* Register default value:              0x00000000                            */
#define TXXTALKN0_1_FNV_DDRIO_COMP_REG 0x050E44A0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * TX Crosstalk Cancellation Per Lane Write CoEfficents. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 twototwologicdelayrank0 : 4;
    /* twototwologicdelayrank0 - Bits[3:0], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 0
     */
    UINT32 twototwologicdelayrank1 : 4;
    /* twototwologicdelayrank1 - Bits[7:4], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 1
     */
    UINT32 twototwologicdelayrank2 : 4;
    /* twototwologicdelayrank2 - Bits[11:8], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 2
     */
    UINT32 twototwologicdelayrank3 : 4;
    /* twototwologicdelayrank3 - Bits[15:12], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 3
     */
    UINT32 twototwologicdelayrank4 : 4;
    /* twototwologicdelayrank4 - Bits[19:16], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 4
     */
    UINT32 twototwologicdelayrank5 : 4;
    /* twototwologicdelayrank5 - Bits[23:20], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 5
     */
    UINT32 twototwologicdelayrank6 : 4;
    /* twototwologicdelayrank6 - Bits[27:24], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 6
     */
    UINT32 twototwologicdelayrank7 : 4;
    /* twototwologicdelayrank7 - Bits[31:28], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 7
     */
  } Bits;
  UINT32 Data;
} TXXTALKN0_1_FNV_DDRIO_COMP_STRUCT;


/* RXVREFCTRLN0_1_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B04A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_1_FNV_DDRIO_COMP_REG 0x050E44A4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_1_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN0_1_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B04A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_1_FNV_DDRIO_COMP_REG 0x050E44A8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage[br]
       [br]
               DataTrainFeedback Description:[br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  --------------------------[br]
               Cross Over Cal     0      0        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      0        Tx Dq Phase Detection[br]
               Cross Over Cal     2      0        Rec En Phase Detection[br]
               RcvEn              8:0    0        Byte detection[br]
       [br]
               Wr Leveling        8:0    0        Byte detection[br]
               Senseamp offset    3:0    0        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_1_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN0_1_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B04C8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN0_1_FNV_DDRIO_COMP_REG 0x050E44C8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN0_1_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N0_1_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B04CC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N0_1_FNV_DDRIO_COMP_REG 0x050E44CC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N0_1_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN0_1_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B04D0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN0_1_FNV_DDRIO_COMP_REG 0x050E44D0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN0_1_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N0_1_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B04D4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N0_1_FNV_DDRIO_COMP_REG 0x050E44D4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N0_1_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N0_1_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B04D8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N0_1_FNV_DDRIO_COMP_REG 0x050E44D8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N0_1_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN0_1_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B04DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN0_1_FNV_DDRIO_COMP_REG 0x050E44DC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN0_1_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN0_1_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B04E4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN0_1_FNV_DDRIO_COMP_REG 0x050E44E4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN0_1_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N0_1_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B04E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N0_1_FNV_DDRIO_COMP_REG 0x050E44E8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N0_1_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N0_1_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B04EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N0_1_FNV_DDRIO_COMP_REG 0x050E44EC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N0_1_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N0_1_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B04F0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N0_1_FNV_DDRIO_COMP_REG 0x050E44F0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N0_1_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N0_1_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B04F4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N0_1_FNV_DDRIO_COMP_REG 0x050E44F4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N0_1_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN0_1_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B04F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN0_1_FNV_DDRIO_COMP_REG 0x050E44F8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN0_1_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N1RANK0_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0500)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_1_FNV_DDRIO_COMP_REG 0x050E4500
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK1_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0504)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_1_FNV_DDRIO_COMP_REG 0x050E4504
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK2_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0508)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_1_FNV_DDRIO_COMP_REG 0x050E4508
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0.Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK3_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B050C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_1_FNV_DDRIO_COMP_REG 0x050E450C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK4_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0510)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_1_FNV_DDRIO_COMP_REG 0x050E4510
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK5_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0514)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_1_FNV_DDRIO_COMP_REG 0x050E4514
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK6_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0518)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_1_FNV_DDRIO_COMP_REG 0x050E4518
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK7_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B051C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_1_FNV_DDRIO_COMP_REG 0x050E451C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK0_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0520)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_1_FNV_DDRIO_COMP_REG 0x050E4520
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK1_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0524)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_1_FNV_DDRIO_COMP_REG 0x050E4524
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK2_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0528)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_1_FNV_DDRIO_COMP_REG 0x050E4528
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK3_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B052C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_1_FNV_DDRIO_COMP_REG 0x050E452C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK4_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0530)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_1_FNV_DDRIO_COMP_REG 0x050E4530
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK5_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0534)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_1_FNV_DDRIO_COMP_REG 0x050E4534
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK6_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0538)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_1_FNV_DDRIO_COMP_REG 0x050E4538
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_1_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK7_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B053C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_1_FNV_DDRIO_COMP_REG 0x050E453C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK0_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0540)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_1_FNV_DDRIO_COMP_REG 0x050E4540
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK1_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0544)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_1_FNV_DDRIO_COMP_REG 0x050E4544
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK2_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0548)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_1_FNV_DDRIO_COMP_REG 0x050E4548
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK3_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B054C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_1_FNV_DDRIO_COMP_REG 0x050E454C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK4_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0550)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_1_FNV_DDRIO_COMP_REG 0x050E4550
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK5_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0554)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_1_FNV_DDRIO_COMP_REG 0x050E4554
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled [br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK6_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0558)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_1_FNV_DDRIO_COMP_REG 0x050E4558
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK7_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B055C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_1_FNV_DDRIO_COMP_REG 0x050E455C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK0_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0560)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_1_FNV_DDRIO_COMP_REG 0x050E4560
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK1_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0564)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_1_FNV_DDRIO_COMP_REG 0x050E4564
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK2_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0568)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_1_FNV_DDRIO_COMP_REG 0x050E4568
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK3_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B056C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_1_FNV_DDRIO_COMP_REG 0x050E456C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK4_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0570)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_1_FNV_DDRIO_COMP_REG 0x050E4570
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK5_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0574)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_1_FNV_DDRIO_COMP_REG 0x050E4574
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK6_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0578)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_1_FNV_DDRIO_COMP_REG 0x050E4578
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_1_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK7_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B057C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_1_FNV_DDRIO_COMP_REG 0x050E457C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK0_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0580)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_1_FNV_DDRIO_COMP_REG 0x050E4580
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK1_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0584)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_1_FNV_DDRIO_COMP_REG 0x050E4584
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK2_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0588)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_1_FNV_DDRIO_COMP_REG 0x050E4588
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK3_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B058C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_1_FNV_DDRIO_COMP_REG 0x050E458C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK4_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0590)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_1_FNV_DDRIO_COMP_REG 0x050E4590
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK5_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0594)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_1_FNV_DDRIO_COMP_REG 0x050E4594
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK6_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0598)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_1_FNV_DDRIO_COMP_REG 0x050E4598
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_1_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK7_1_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B059C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_1_FNV_DDRIO_COMP_REG 0x050E459C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_1_FNV_DDRIO_COMP_STRUCT;




/* RXVREFCTRLN1_1_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B05A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_1_FNV_DDRIO_COMP_REG 0x050E45A4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_1_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN1_1_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B05A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_1_FNV_DDRIO_COMP_REG 0x050E45A8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage [br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  ---------------[br]
               Cross Over Cal     0      1        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      1        Tx Dq Phase Detection[br]
               Cross Over Cal     2      1        Rec En Phase Detection[br]
               RcvEn              8:0    1        Byte detection[br]
               Wr Leveling        8:0    1        Byte detection[br]
               Senseamp offset    3:0    1        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_1_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN1_1_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B05C8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN1_1_FNV_DDRIO_COMP_REG 0x050E45C8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN1_1_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N1_1_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B05CC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N1_1_FNV_DDRIO_COMP_REG 0x050E45CC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N1_1_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN1_1_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B05D0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN1_1_FNV_DDRIO_COMP_REG 0x050E45D0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN1_1_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N1_1_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B05D4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N1_1_FNV_DDRIO_COMP_REG 0x050E45D4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N1_1_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N1_1_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B05D8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N1_1_FNV_DDRIO_COMP_REG 0x050E45D8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N1_1_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN1_1_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B05DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN1_1_FNV_DDRIO_COMP_REG 0x050E45DC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN1_1_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN1_1_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B05E4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN1_1_FNV_DDRIO_COMP_REG 0x050E45E4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN1_1_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N1_1_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B05E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N1_1_FNV_DDRIO_COMP_REG 0x050E45E8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N1_1_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N1_1_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B05EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N1_1_FNV_DDRIO_COMP_REG 0x050E45EC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N1_1_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N1_1_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B05F0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N1_1_FNV_DDRIO_COMP_REG 0x050E45F0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N1_1_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N1_1_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B05F4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N1_1_FNV_DDRIO_COMP_REG 0x050E45F4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N1_1_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN1_1_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B05F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN1_1_FNV_DDRIO_COMP_REG 0x050E45F8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN1_1_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N0RANK0_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0600)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_2_FNV_DDRIO_COMP_REG 0x050E4600
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset, [br] 
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK1_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0604)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_2_FNV_DDRIO_COMP_REG 0x050E4604
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank1. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK2_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0608)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_2_FNV_DDRIO_COMP_REG 0x050E4608
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank2. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK3_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B060C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_2_FNV_DDRIO_COMP_REG 0x050E460C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank3. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK4_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0610)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_2_FNV_DDRIO_COMP_REG 0x050E4610
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank4. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK5_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0614)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_2_FNV_DDRIO_COMP_REG 0x050E4614
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank5. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK6_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0618)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_2_FNV_DDRIO_COMP_REG 0x050E4618
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank6. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK7_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B061C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_2_FNV_DDRIO_COMP_REG 0x050E461C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank7. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK0_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0620)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_2_FNV_DDRIO_COMP_REG 0x050E4620
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK1_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0624)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_2_FNV_DDRIO_COMP_REG 0x050E4624
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK2_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0628)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_2_FNV_DDRIO_COMP_REG 0x050E4628
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK3_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B062C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_2_FNV_DDRIO_COMP_REG 0x050E462C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK4_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0630)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_2_FNV_DDRIO_COMP_REG 0x050E4630
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK5_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0634)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_2_FNV_DDRIO_COMP_REG 0x050E4634
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK6_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0638)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_2_FNV_DDRIO_COMP_REG 0x050E4638
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK7_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B063C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_2_FNV_DDRIO_COMP_REG 0x050E463C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK0_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0640)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_2_FNV_DDRIO_COMP_REG 0x050E4640
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the four DQ Clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK1_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0644)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_2_FNV_DDRIO_COMP_REG 0x050E4644
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK2_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0648)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_2_FNV_DDRIO_COMP_REG 0x050E4648
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK3_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B064C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_2_FNV_DDRIO_COMP_REG 0x050E464C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK4_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0650)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_2_FNV_DDRIO_COMP_REG 0x050E4650
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK5_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0654)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_2_FNV_DDRIO_COMP_REG 0x050E4654
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 3;
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK6_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0658)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_2_FNV_DDRIO_COMP_REG 0x050E4658
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK7_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B065C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_2_FNV_DDRIO_COMP_REG 0x050E465C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK0_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0660)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_2_FNV_DDRIO_COMP_REG 0x050E4660
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte. 0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK1_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0664)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_2_FNV_DDRIO_COMP_REG 0x050E4664
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK2_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0668)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_2_FNV_DDRIO_COMP_REG 0x050E4668
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK3_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B066C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_2_FNV_DDRIO_COMP_REG 0x050E466C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK4_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0670)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_2_FNV_DDRIO_COMP_REG 0x050E4670
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK5_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0674)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_2_FNV_DDRIO_COMP_REG 0x050E4674
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK6_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0678)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_2_FNV_DDRIO_COMP_REG 0x050E4678
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK7_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B067C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_2_FNV_DDRIO_COMP_REG 0x050E467C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK0_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0680)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_2_FNV_DDRIO_COMP_REG 0x050E4680
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       selects which skewed DQSP (to sample even bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSP 
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       selects which skewed DQSN (to sample odd bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSN 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK1_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0684)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_2_FNV_DDRIO_COMP_REG 0x050E4684
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK2_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0688)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_2_FNV_DDRIO_COMP_REG 0x050E4688
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK3_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B068C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_2_FNV_DDRIO_COMP_REG 0x050E468C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK4_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0690)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_2_FNV_DDRIO_COMP_REG 0x050E4690
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK5_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0694)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_2_FNV_DDRIO_COMP_REG 0x050E4694
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK6_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0698)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_2_FNV_DDRIO_COMP_REG 0x050E4698
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK7_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B069C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_2_FNV_DDRIO_COMP_REG 0x050E469C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_2_FNV_DDRIO_COMP_STRUCT;


/* TXXTALKN0_2_FNV_DDRIO_COMP_REG supported on:                               */
/*       EKV (0x401B06A0)                                                     */
/* Register default value:              0x00000000                            */
#define TXXTALKN0_2_FNV_DDRIO_COMP_REG 0x050E46A0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * TX Crosstalk Cancellation Per Lane Write CoEfficents. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 twototwologicdelayrank0 : 4;
    /* twototwologicdelayrank0 - Bits[3:0], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 0
     */
    UINT32 twototwologicdelayrank1 : 4;
    /* twototwologicdelayrank1 - Bits[7:4], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 1
     */
    UINT32 twototwologicdelayrank2 : 4;
    /* twototwologicdelayrank2 - Bits[11:8], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 2
     */
    UINT32 twototwologicdelayrank3 : 4;
    /* twototwologicdelayrank3 - Bits[15:12], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 3
     */
    UINT32 twototwologicdelayrank4 : 4;
    /* twototwologicdelayrank4 - Bits[19:16], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 4
     */
    UINT32 twototwologicdelayrank5 : 4;
    /* twototwologicdelayrank5 - Bits[23:20], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 5
     */
    UINT32 twototwologicdelayrank6 : 4;
    /* twototwologicdelayrank6 - Bits[27:24], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 6
     */
    UINT32 twototwologicdelayrank7 : 4;
    /* twototwologicdelayrank7 - Bits[31:28], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 7
     */
  } Bits;
  UINT32 Data;
} TXXTALKN0_2_FNV_DDRIO_COMP_STRUCT;


/* RXVREFCTRLN0_2_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B06A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_2_FNV_DDRIO_COMP_REG 0x050E46A4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_2_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN0_2_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B06A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_2_FNV_DDRIO_COMP_REG 0x050E46A8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage[br]
       [br]
               DataTrainFeedback Description:[br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  --------------------------[br]
               Cross Over Cal     0      0        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      0        Tx Dq Phase Detection[br]
               Cross Over Cal     2      0        Rec En Phase Detection[br]
               RcvEn              8:0    0        Byte detection[br]
       [br]
               Wr Leveling        8:0    0        Byte detection[br]
               Senseamp offset    3:0    0        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_2_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN0_2_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B06C8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN0_2_FNV_DDRIO_COMP_REG 0x050E46C8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN0_2_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N0_2_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B06CC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N0_2_FNV_DDRIO_COMP_REG 0x050E46CC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N0_2_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN0_2_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B06D0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN0_2_FNV_DDRIO_COMP_REG 0x050E46D0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN0_2_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N0_2_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B06D4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N0_2_FNV_DDRIO_COMP_REG 0x050E46D4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N0_2_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N0_2_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B06D8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N0_2_FNV_DDRIO_COMP_REG 0x050E46D8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N0_2_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN0_2_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B06DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN0_2_FNV_DDRIO_COMP_REG 0x050E46DC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN0_2_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN0_2_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B06E4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN0_2_FNV_DDRIO_COMP_REG 0x050E46E4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN0_2_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N0_2_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B06E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N0_2_FNV_DDRIO_COMP_REG 0x050E46E8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N0_2_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N0_2_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B06EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N0_2_FNV_DDRIO_COMP_REG 0x050E46EC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N0_2_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N0_2_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B06F0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N0_2_FNV_DDRIO_COMP_REG 0x050E46F0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N0_2_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N0_2_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B06F4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N0_2_FNV_DDRIO_COMP_REG 0x050E46F4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N0_2_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN0_2_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B06F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN0_2_FNV_DDRIO_COMP_REG 0x050E46F8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN0_2_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N1RANK0_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0700)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_2_FNV_DDRIO_COMP_REG 0x050E4700
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK1_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0704)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_2_FNV_DDRIO_COMP_REG 0x050E4704
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK2_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0708)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_2_FNV_DDRIO_COMP_REG 0x050E4708
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0.Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK3_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B070C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_2_FNV_DDRIO_COMP_REG 0x050E470C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK4_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0710)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_2_FNV_DDRIO_COMP_REG 0x050E4710
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK5_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0714)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_2_FNV_DDRIO_COMP_REG 0x050E4714
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK6_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0718)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_2_FNV_DDRIO_COMP_REG 0x050E4718
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK7_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B071C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_2_FNV_DDRIO_COMP_REG 0x050E471C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK0_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0720)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_2_FNV_DDRIO_COMP_REG 0x050E4720
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK1_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0724)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_2_FNV_DDRIO_COMP_REG 0x050E4724
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK2_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0728)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_2_FNV_DDRIO_COMP_REG 0x050E4728
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK3_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B072C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_2_FNV_DDRIO_COMP_REG 0x050E472C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK4_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0730)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_2_FNV_DDRIO_COMP_REG 0x050E4730
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK5_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0734)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_2_FNV_DDRIO_COMP_REG 0x050E4734
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK6_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0738)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_2_FNV_DDRIO_COMP_REG 0x050E4738
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_2_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK7_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B073C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_2_FNV_DDRIO_COMP_REG 0x050E473C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK0_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0740)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_2_FNV_DDRIO_COMP_REG 0x050E4740
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK1_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0744)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_2_FNV_DDRIO_COMP_REG 0x050E4744
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK2_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0748)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_2_FNV_DDRIO_COMP_REG 0x050E4748
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK3_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B074C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_2_FNV_DDRIO_COMP_REG 0x050E474C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK4_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0750)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_2_FNV_DDRIO_COMP_REG 0x050E4750
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK5_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0754)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_2_FNV_DDRIO_COMP_REG 0x050E4754
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled [br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK6_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0758)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_2_FNV_DDRIO_COMP_REG 0x050E4758
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK7_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B075C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_2_FNV_DDRIO_COMP_REG 0x050E475C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK0_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0760)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_2_FNV_DDRIO_COMP_REG 0x050E4760
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK1_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0764)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_2_FNV_DDRIO_COMP_REG 0x050E4764
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK2_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0768)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_2_FNV_DDRIO_COMP_REG 0x050E4768
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK3_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B076C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_2_FNV_DDRIO_COMP_REG 0x050E476C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK4_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0770)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_2_FNV_DDRIO_COMP_REG 0x050E4770
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK5_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0774)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_2_FNV_DDRIO_COMP_REG 0x050E4774
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK6_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0778)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_2_FNV_DDRIO_COMP_REG 0x050E4778
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_2_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK7_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B077C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_2_FNV_DDRIO_COMP_REG 0x050E477C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK0_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0780)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_2_FNV_DDRIO_COMP_REG 0x050E4780
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK1_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0784)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_2_FNV_DDRIO_COMP_REG 0x050E4784
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK2_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0788)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_2_FNV_DDRIO_COMP_REG 0x050E4788
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK3_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B078C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_2_FNV_DDRIO_COMP_REG 0x050E478C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK4_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0790)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_2_FNV_DDRIO_COMP_REG 0x050E4790
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK5_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0794)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_2_FNV_DDRIO_COMP_REG 0x050E4794
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK6_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0798)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_2_FNV_DDRIO_COMP_REG 0x050E4798
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_2_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK7_2_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B079C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_2_FNV_DDRIO_COMP_REG 0x050E479C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_2_FNV_DDRIO_COMP_STRUCT;




/* RXVREFCTRLN1_2_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B07A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_2_FNV_DDRIO_COMP_REG 0x050E47A4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_2_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN1_2_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B07A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_2_FNV_DDRIO_COMP_REG 0x050E47A8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage [br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  ---------------[br]
               Cross Over Cal     0      1        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      1        Tx Dq Phase Detection[br]
               Cross Over Cal     2      1        Rec En Phase Detection[br]
               RcvEn              8:0    1        Byte detection[br]
               Wr Leveling        8:0    1        Byte detection[br]
               Senseamp offset    3:0    1        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_2_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN1_2_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B07C8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN1_2_FNV_DDRIO_COMP_REG 0x050E47C8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN1_2_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N1_2_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B07CC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N1_2_FNV_DDRIO_COMP_REG 0x050E47CC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N1_2_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN1_2_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B07D0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN1_2_FNV_DDRIO_COMP_REG 0x050E47D0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN1_2_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N1_2_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B07D4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N1_2_FNV_DDRIO_COMP_REG 0x050E47D4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N1_2_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N1_2_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B07D8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N1_2_FNV_DDRIO_COMP_REG 0x050E47D8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N1_2_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN1_2_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B07DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN1_2_FNV_DDRIO_COMP_REG 0x050E47DC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN1_2_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN1_2_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B07E4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN1_2_FNV_DDRIO_COMP_REG 0x050E47E4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN1_2_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N1_2_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B07E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N1_2_FNV_DDRIO_COMP_REG 0x050E47E8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N1_2_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N1_2_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B07EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N1_2_FNV_DDRIO_COMP_REG 0x050E47EC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N1_2_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N1_2_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B07F0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N1_2_FNV_DDRIO_COMP_REG 0x050E47F0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N1_2_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N1_2_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B07F4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N1_2_FNV_DDRIO_COMP_REG 0x050E47F4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N1_2_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN1_2_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B07F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN1_2_FNV_DDRIO_COMP_REG 0x050E47F8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN1_2_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N0RANK0_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0800)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_3_FNV_DDRIO_COMP_REG 0x050E4800
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset, [br] 
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK1_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0804)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_3_FNV_DDRIO_COMP_REG 0x050E4804
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank1. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK2_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0808)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_3_FNV_DDRIO_COMP_REG 0x050E4808
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank2. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK3_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B080C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_3_FNV_DDRIO_COMP_REG 0x050E480C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank3. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK4_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0810)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_3_FNV_DDRIO_COMP_REG 0x050E4810
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank4. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK5_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0814)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_3_FNV_DDRIO_COMP_REG 0x050E4814
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank5. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK6_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0818)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_3_FNV_DDRIO_COMP_REG 0x050E4818
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank6. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK7_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B081C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_3_FNV_DDRIO_COMP_REG 0x050E481C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank7. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK0_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0820)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_3_FNV_DDRIO_COMP_REG 0x050E4820
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK1_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0824)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_3_FNV_DDRIO_COMP_REG 0x050E4824
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK2_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0828)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_3_FNV_DDRIO_COMP_REG 0x050E4828
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK3_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B082C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_3_FNV_DDRIO_COMP_REG 0x050E482C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK4_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0830)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_3_FNV_DDRIO_COMP_REG 0x050E4830
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK5_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0834)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_3_FNV_DDRIO_COMP_REG 0x050E4834
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK6_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0838)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_3_FNV_DDRIO_COMP_REG 0x050E4838
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK7_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B083C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_3_FNV_DDRIO_COMP_REG 0x050E483C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK0_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0840)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_3_FNV_DDRIO_COMP_REG 0x050E4840
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the four DQ Clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK1_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0844)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_3_FNV_DDRIO_COMP_REG 0x050E4844
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK2_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0848)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_3_FNV_DDRIO_COMP_REG 0x050E4848
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK3_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B084C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_3_FNV_DDRIO_COMP_REG 0x050E484C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK4_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0850)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_3_FNV_DDRIO_COMP_REG 0x050E4850
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK5_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0854)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_3_FNV_DDRIO_COMP_REG 0x050E4854
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 3;
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK6_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0858)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_3_FNV_DDRIO_COMP_REG 0x050E4858
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK7_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B085C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_3_FNV_DDRIO_COMP_REG 0x050E485C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK0_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0860)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_3_FNV_DDRIO_COMP_REG 0x050E4860
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte. 0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK1_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0864)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_3_FNV_DDRIO_COMP_REG 0x050E4864
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK2_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0868)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_3_FNV_DDRIO_COMP_REG 0x050E4868
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK3_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B086C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_3_FNV_DDRIO_COMP_REG 0x050E486C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK4_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0870)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_3_FNV_DDRIO_COMP_REG 0x050E4870
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK5_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0874)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_3_FNV_DDRIO_COMP_REG 0x050E4874
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK6_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0878)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_3_FNV_DDRIO_COMP_REG 0x050E4878
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK7_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B087C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_3_FNV_DDRIO_COMP_REG 0x050E487C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK0_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0880)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_3_FNV_DDRIO_COMP_REG 0x050E4880
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       selects which skewed DQSP (to sample even bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSP 
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       selects which skewed DQSN (to sample odd bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSN 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK1_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0884)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_3_FNV_DDRIO_COMP_REG 0x050E4884
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK2_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0888)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_3_FNV_DDRIO_COMP_REG 0x050E4888
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK3_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B088C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_3_FNV_DDRIO_COMP_REG 0x050E488C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK4_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0890)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_3_FNV_DDRIO_COMP_REG 0x050E4890
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK5_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0894)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_3_FNV_DDRIO_COMP_REG 0x050E4894
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK6_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0898)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_3_FNV_DDRIO_COMP_REG 0x050E4898
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK7_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B089C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_3_FNV_DDRIO_COMP_REG 0x050E489C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_3_FNV_DDRIO_COMP_STRUCT;


/* TXXTALKN0_3_FNV_DDRIO_COMP_REG supported on:                               */
/*       EKV (0x401B08A0)                                                     */
/* Register default value:              0x00000000                            */
#define TXXTALKN0_3_FNV_DDRIO_COMP_REG 0x050E48A0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * TX Crosstalk Cancellation Per Lane Write CoEfficents. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 twototwologicdelayrank0 : 4;
    /* twototwologicdelayrank0 - Bits[3:0], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 0
     */
    UINT32 twototwologicdelayrank1 : 4;
    /* twototwologicdelayrank1 - Bits[7:4], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 1
     */
    UINT32 twototwologicdelayrank2 : 4;
    /* twototwologicdelayrank2 - Bits[11:8], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 2
     */
    UINT32 twototwologicdelayrank3 : 4;
    /* twototwologicdelayrank3 - Bits[15:12], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 3
     */
    UINT32 twototwologicdelayrank4 : 4;
    /* twototwologicdelayrank4 - Bits[19:16], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 4
     */
    UINT32 twototwologicdelayrank5 : 4;
    /* twototwologicdelayrank5 - Bits[23:20], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 5
     */
    UINT32 twototwologicdelayrank6 : 4;
    /* twototwologicdelayrank6 - Bits[27:24], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 6
     */
    UINT32 twototwologicdelayrank7 : 4;
    /* twototwologicdelayrank7 - Bits[31:28], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 7
     */
  } Bits;
  UINT32 Data;
} TXXTALKN0_3_FNV_DDRIO_COMP_STRUCT;


/* RXVREFCTRLN0_3_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B08A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_3_FNV_DDRIO_COMP_REG 0x050E48A4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_3_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN0_3_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B08A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_3_FNV_DDRIO_COMP_REG 0x050E48A8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage[br]
       [br]
               DataTrainFeedback Description:[br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  --------------------------[br]
               Cross Over Cal     0      0        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      0        Tx Dq Phase Detection[br]
               Cross Over Cal     2      0        Rec En Phase Detection[br]
               RcvEn              8:0    0        Byte detection[br]
       [br]
               Wr Leveling        8:0    0        Byte detection[br]
               Senseamp offset    3:0    0        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_3_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN0_3_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B08C8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN0_3_FNV_DDRIO_COMP_REG 0x050E48C8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN0_3_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N0_3_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B08CC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N0_3_FNV_DDRIO_COMP_REG 0x050E48CC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N0_3_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN0_3_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B08D0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN0_3_FNV_DDRIO_COMP_REG 0x050E48D0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN0_3_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N0_3_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B08D4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N0_3_FNV_DDRIO_COMP_REG 0x050E48D4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N0_3_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N0_3_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B08D8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N0_3_FNV_DDRIO_COMP_REG 0x050E48D8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N0_3_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN0_3_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B08DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN0_3_FNV_DDRIO_COMP_REG 0x050E48DC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN0_3_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN0_3_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B08E4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN0_3_FNV_DDRIO_COMP_REG 0x050E48E4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN0_3_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N0_3_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B08E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N0_3_FNV_DDRIO_COMP_REG 0x050E48E8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N0_3_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N0_3_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B08EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N0_3_FNV_DDRIO_COMP_REG 0x050E48EC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N0_3_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N0_3_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B08F0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N0_3_FNV_DDRIO_COMP_REG 0x050E48F0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N0_3_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N0_3_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B08F4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N0_3_FNV_DDRIO_COMP_REG 0x050E48F4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N0_3_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN0_3_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B08F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN0_3_FNV_DDRIO_COMP_REG 0x050E48F8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN0_3_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N1RANK0_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0900)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_3_FNV_DDRIO_COMP_REG 0x050E4900
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK1_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0904)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_3_FNV_DDRIO_COMP_REG 0x050E4904
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK2_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0908)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_3_FNV_DDRIO_COMP_REG 0x050E4908
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0.Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK3_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B090C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_3_FNV_DDRIO_COMP_REG 0x050E490C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK4_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0910)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_3_FNV_DDRIO_COMP_REG 0x050E4910
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK5_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0914)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_3_FNV_DDRIO_COMP_REG 0x050E4914
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK6_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0918)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_3_FNV_DDRIO_COMP_REG 0x050E4918
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK7_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B091C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_3_FNV_DDRIO_COMP_REG 0x050E491C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK0_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0920)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_3_FNV_DDRIO_COMP_REG 0x050E4920
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK1_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0924)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_3_FNV_DDRIO_COMP_REG 0x050E4924
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK2_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0928)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_3_FNV_DDRIO_COMP_REG 0x050E4928
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK3_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B092C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_3_FNV_DDRIO_COMP_REG 0x050E492C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK4_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0930)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_3_FNV_DDRIO_COMP_REG 0x050E4930
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK5_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0934)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_3_FNV_DDRIO_COMP_REG 0x050E4934
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK6_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0938)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_3_FNV_DDRIO_COMP_REG 0x050E4938
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_3_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK7_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B093C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_3_FNV_DDRIO_COMP_REG 0x050E493C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK0_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0940)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_3_FNV_DDRIO_COMP_REG 0x050E4940
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK1_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0944)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_3_FNV_DDRIO_COMP_REG 0x050E4944
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK2_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0948)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_3_FNV_DDRIO_COMP_REG 0x050E4948
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK3_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B094C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_3_FNV_DDRIO_COMP_REG 0x050E494C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK4_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0950)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_3_FNV_DDRIO_COMP_REG 0x050E4950
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK5_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0954)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_3_FNV_DDRIO_COMP_REG 0x050E4954
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled [br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK6_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0958)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_3_FNV_DDRIO_COMP_REG 0x050E4958
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK7_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B095C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_3_FNV_DDRIO_COMP_REG 0x050E495C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK0_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0960)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_3_FNV_DDRIO_COMP_REG 0x050E4960
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK1_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0964)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_3_FNV_DDRIO_COMP_REG 0x050E4964
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK2_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0968)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_3_FNV_DDRIO_COMP_REG 0x050E4968
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK3_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B096C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_3_FNV_DDRIO_COMP_REG 0x050E496C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK4_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0970)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_3_FNV_DDRIO_COMP_REG 0x050E4970
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK5_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0974)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_3_FNV_DDRIO_COMP_REG 0x050E4974
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK6_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0978)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_3_FNV_DDRIO_COMP_REG 0x050E4978
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_3_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK7_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B097C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_3_FNV_DDRIO_COMP_REG 0x050E497C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK0_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0980)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_3_FNV_DDRIO_COMP_REG 0x050E4980
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK1_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0984)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_3_FNV_DDRIO_COMP_REG 0x050E4984
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK2_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0988)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_3_FNV_DDRIO_COMP_REG 0x050E4988
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK3_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B098C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_3_FNV_DDRIO_COMP_REG 0x050E498C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK4_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0990)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_3_FNV_DDRIO_COMP_REG 0x050E4990
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK5_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0994)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_3_FNV_DDRIO_COMP_REG 0x050E4994
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK6_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0998)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_3_FNV_DDRIO_COMP_REG 0x050E4998
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_3_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK7_3_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B099C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_3_FNV_DDRIO_COMP_REG 0x050E499C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_3_FNV_DDRIO_COMP_STRUCT;




/* RXVREFCTRLN1_3_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B09A4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_3_FNV_DDRIO_COMP_REG 0x050E49A4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_3_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN1_3_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B09A8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_3_FNV_DDRIO_COMP_REG 0x050E49A8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage [br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  ---------------[br]
               Cross Over Cal     0      1        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      1        Tx Dq Phase Detection[br]
               Cross Over Cal     2      1        Rec En Phase Detection[br]
               RcvEn              8:0    1        Byte detection[br]
               Wr Leveling        8:0    1        Byte detection[br]
               Senseamp offset    3:0    1        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_3_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN1_3_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B09C8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN1_3_FNV_DDRIO_COMP_REG 0x050E49C8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN1_3_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N1_3_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B09CC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N1_3_FNV_DDRIO_COMP_REG 0x050E49CC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N1_3_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN1_3_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B09D0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN1_3_FNV_DDRIO_COMP_REG 0x050E49D0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN1_3_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N1_3_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B09D4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N1_3_FNV_DDRIO_COMP_REG 0x050E49D4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N1_3_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N1_3_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B09D8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N1_3_FNV_DDRIO_COMP_REG 0x050E49D8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N1_3_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN1_3_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B09DC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN1_3_FNV_DDRIO_COMP_REG 0x050E49DC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN1_3_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN1_3_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B09E4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN1_3_FNV_DDRIO_COMP_REG 0x050E49E4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN1_3_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N1_3_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B09E8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N1_3_FNV_DDRIO_COMP_REG 0x050E49E8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N1_3_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N1_3_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B09EC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N1_3_FNV_DDRIO_COMP_REG 0x050E49EC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N1_3_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N1_3_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B09F0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N1_3_FNV_DDRIO_COMP_REG 0x050E49F0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N1_3_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N1_3_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B09F4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N1_3_FNV_DDRIO_COMP_REG 0x050E49F4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N1_3_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN1_3_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B09F8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN1_3_FNV_DDRIO_COMP_REG 0x050E49F8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN1_3_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N0RANK0_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_4_FNV_DDRIO_COMP_REG 0x050E4A00
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset, [br] 
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK1_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_4_FNV_DDRIO_COMP_REG 0x050E4A04
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank1. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK2_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_4_FNV_DDRIO_COMP_REG 0x050E4A08
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank2. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK3_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_4_FNV_DDRIO_COMP_REG 0x050E4A0C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank3. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK4_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_4_FNV_DDRIO_COMP_REG 0x050E4A10
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank4. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK5_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_4_FNV_DDRIO_COMP_REG 0x050E4A14
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank5. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK6_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_4_FNV_DDRIO_COMP_REG 0x050E4A18
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank6. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK7_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_4_FNV_DDRIO_COMP_REG 0x050E4A1C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank7. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK0_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_4_FNV_DDRIO_COMP_REG 0x050E4A20
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK1_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_4_FNV_DDRIO_COMP_REG 0x050E4A24
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK2_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_4_FNV_DDRIO_COMP_REG 0x050E4A28
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK3_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_4_FNV_DDRIO_COMP_REG 0x050E4A2C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK4_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_4_FNV_DDRIO_COMP_REG 0x050E4A30
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK5_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_4_FNV_DDRIO_COMP_REG 0x050E4A34
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK6_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_4_FNV_DDRIO_COMP_REG 0x050E4A38
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK7_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_4_FNV_DDRIO_COMP_REG 0x050E4A3C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK0_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_4_FNV_DDRIO_COMP_REG 0x050E4A40
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the four DQ Clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK1_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_4_FNV_DDRIO_COMP_REG 0x050E4A44
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK2_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_4_FNV_DDRIO_COMP_REG 0x050E4A48
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK3_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_4_FNV_DDRIO_COMP_REG 0x050E4A4C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK4_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_4_FNV_DDRIO_COMP_REG 0x050E4A50
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK5_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_4_FNV_DDRIO_COMP_REG 0x050E4A54
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 3;
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK6_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_4_FNV_DDRIO_COMP_REG 0x050E4A58
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK7_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_4_FNV_DDRIO_COMP_REG 0x050E4A5C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK0_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_4_FNV_DDRIO_COMP_REG 0x050E4A60
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte. 0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK1_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_4_FNV_DDRIO_COMP_REG 0x050E4A64
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK2_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_4_FNV_DDRIO_COMP_REG 0x050E4A68
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK3_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_4_FNV_DDRIO_COMP_REG 0x050E4A6C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK4_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_4_FNV_DDRIO_COMP_REG 0x050E4A70
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK5_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_4_FNV_DDRIO_COMP_REG 0x050E4A74
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK6_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_4_FNV_DDRIO_COMP_REG 0x050E4A78
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK7_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_4_FNV_DDRIO_COMP_REG 0x050E4A7C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK0_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_4_FNV_DDRIO_COMP_REG 0x050E4A80
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       selects which skewed DQSP (to sample even bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSP 
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       selects which skewed DQSN (to sample odd bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSN 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK1_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_4_FNV_DDRIO_COMP_REG 0x050E4A84
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK2_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_4_FNV_DDRIO_COMP_REG 0x050E4A88
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK3_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_4_FNV_DDRIO_COMP_REG 0x050E4A8C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK4_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_4_FNV_DDRIO_COMP_REG 0x050E4A90
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK5_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_4_FNV_DDRIO_COMP_REG 0x050E4A94
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK6_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_4_FNV_DDRIO_COMP_REG 0x050E4A98
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK7_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0A9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_4_FNV_DDRIO_COMP_REG 0x050E4A9C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_4_FNV_DDRIO_COMP_STRUCT;


/* TXXTALKN0_4_FNV_DDRIO_COMP_REG supported on:                               */
/*       EKV (0x401B0AA0)                                                     */
/* Register default value:              0x00000000                            */
#define TXXTALKN0_4_FNV_DDRIO_COMP_REG 0x050E4AA0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * TX Crosstalk Cancellation Per Lane Write CoEfficents. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 twototwologicdelayrank0 : 4;
    /* twototwologicdelayrank0 - Bits[3:0], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 0
     */
    UINT32 twototwologicdelayrank1 : 4;
    /* twototwologicdelayrank1 - Bits[7:4], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 1
     */
    UINT32 twototwologicdelayrank2 : 4;
    /* twototwologicdelayrank2 - Bits[11:8], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 2
     */
    UINT32 twototwologicdelayrank3 : 4;
    /* twototwologicdelayrank3 - Bits[15:12], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 3
     */
    UINT32 twototwologicdelayrank4 : 4;
    /* twototwologicdelayrank4 - Bits[19:16], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 4
     */
    UINT32 twototwologicdelayrank5 : 4;
    /* twototwologicdelayrank5 - Bits[23:20], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 5
     */
    UINT32 twototwologicdelayrank6 : 4;
    /* twototwologicdelayrank6 - Bits[27:24], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 6
     */
    UINT32 twototwologicdelayrank7 : 4;
    /* twototwologicdelayrank7 - Bits[31:28], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 7
     */
  } Bits;
  UINT32 Data;
} TXXTALKN0_4_FNV_DDRIO_COMP_STRUCT;


/* RXVREFCTRLN0_4_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0AA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_4_FNV_DDRIO_COMP_REG 0x050E4AA4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_4_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN0_4_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B0AA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_4_FNV_DDRIO_COMP_REG 0x050E4AA8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage[br]
       [br]
               DataTrainFeedback Description:[br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  --------------------------[br]
               Cross Over Cal     0      0        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      0        Tx Dq Phase Detection[br]
               Cross Over Cal     2      0        Rec En Phase Detection[br]
               RcvEn              8:0    0        Byte detection[br]
       [br]
               Wr Leveling        8:0    0        Byte detection[br]
               Senseamp offset    3:0    0        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_4_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN0_4_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B0AC8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN0_4_FNV_DDRIO_COMP_REG 0x050E4AC8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN0_4_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N0_4_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0ACC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N0_4_FNV_DDRIO_COMP_REG 0x050E4ACC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N0_4_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN0_4_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0AD0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN0_4_FNV_DDRIO_COMP_REG 0x050E4AD0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN0_4_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N0_4_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0AD4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N0_4_FNV_DDRIO_COMP_REG 0x050E4AD4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N0_4_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N0_4_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0AD8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N0_4_FNV_DDRIO_COMP_REG 0x050E4AD8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N0_4_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN0_4_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B0ADC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN0_4_FNV_DDRIO_COMP_REG 0x050E4ADC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN0_4_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN0_4_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0AE4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN0_4_FNV_DDRIO_COMP_REG 0x050E4AE4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN0_4_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N0_4_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0AE8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N0_4_FNV_DDRIO_COMP_REG 0x050E4AE8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N0_4_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N0_4_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0AEC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N0_4_FNV_DDRIO_COMP_REG 0x050E4AEC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N0_4_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N0_4_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0AF0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N0_4_FNV_DDRIO_COMP_REG 0x050E4AF0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N0_4_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N0_4_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0AF4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N0_4_FNV_DDRIO_COMP_REG 0x050E4AF4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N0_4_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN0_4_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B0AF8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN0_4_FNV_DDRIO_COMP_REG 0x050E4AF8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN0_4_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N1RANK0_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_4_FNV_DDRIO_COMP_REG 0x050E4B00
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK1_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_4_FNV_DDRIO_COMP_REG 0x050E4B04
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK2_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_4_FNV_DDRIO_COMP_REG 0x050E4B08
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0.Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK3_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_4_FNV_DDRIO_COMP_REG 0x050E4B0C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK4_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_4_FNV_DDRIO_COMP_REG 0x050E4B10
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK5_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_4_FNV_DDRIO_COMP_REG 0x050E4B14
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK6_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_4_FNV_DDRIO_COMP_REG 0x050E4B18
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK7_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_4_FNV_DDRIO_COMP_REG 0x050E4B1C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK0_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_4_FNV_DDRIO_COMP_REG 0x050E4B20
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK1_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_4_FNV_DDRIO_COMP_REG 0x050E4B24
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK2_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_4_FNV_DDRIO_COMP_REG 0x050E4B28
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK3_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_4_FNV_DDRIO_COMP_REG 0x050E4B2C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK4_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_4_FNV_DDRIO_COMP_REG 0x050E4B30
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK5_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_4_FNV_DDRIO_COMP_REG 0x050E4B34
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK6_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_4_FNV_DDRIO_COMP_REG 0x050E4B38
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_4_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK7_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_4_FNV_DDRIO_COMP_REG 0x050E4B3C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK0_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_4_FNV_DDRIO_COMP_REG 0x050E4B40
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK1_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_4_FNV_DDRIO_COMP_REG 0x050E4B44
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK2_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_4_FNV_DDRIO_COMP_REG 0x050E4B48
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK3_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_4_FNV_DDRIO_COMP_REG 0x050E4B4C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK4_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_4_FNV_DDRIO_COMP_REG 0x050E4B50
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK5_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_4_FNV_DDRIO_COMP_REG 0x050E4B54
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled [br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK6_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_4_FNV_DDRIO_COMP_REG 0x050E4B58
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK7_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_4_FNV_DDRIO_COMP_REG 0x050E4B5C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK0_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_4_FNV_DDRIO_COMP_REG 0x050E4B60
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK1_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_4_FNV_DDRIO_COMP_REG 0x050E4B64
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK2_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_4_FNV_DDRIO_COMP_REG 0x050E4B68
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK3_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_4_FNV_DDRIO_COMP_REG 0x050E4B6C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK4_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_4_FNV_DDRIO_COMP_REG 0x050E4B70
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK5_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_4_FNV_DDRIO_COMP_REG 0x050E4B74
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK6_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_4_FNV_DDRIO_COMP_REG 0x050E4B78
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_4_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK7_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_4_FNV_DDRIO_COMP_REG 0x050E4B7C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK0_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_4_FNV_DDRIO_COMP_REG 0x050E4B80
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK1_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_4_FNV_DDRIO_COMP_REG 0x050E4B84
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK2_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_4_FNV_DDRIO_COMP_REG 0x050E4B88
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK3_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_4_FNV_DDRIO_COMP_REG 0x050E4B8C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK4_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_4_FNV_DDRIO_COMP_REG 0x050E4B90
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK5_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_4_FNV_DDRIO_COMP_REG 0x050E4B94
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK6_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_4_FNV_DDRIO_COMP_REG 0x050E4B98
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_4_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK7_4_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0B9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_4_FNV_DDRIO_COMP_REG 0x050E4B9C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_4_FNV_DDRIO_COMP_STRUCT;




/* RXVREFCTRLN1_4_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0BA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_4_FNV_DDRIO_COMP_REG 0x050E4BA4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_4_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN1_4_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B0BA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_4_FNV_DDRIO_COMP_REG 0x050E4BA8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage [br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  ---------------[br]
               Cross Over Cal     0      1        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      1        Tx Dq Phase Detection[br]
               Cross Over Cal     2      1        Rec En Phase Detection[br]
               RcvEn              8:0    1        Byte detection[br]
               Wr Leveling        8:0    1        Byte detection[br]
               Senseamp offset    3:0    1        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_4_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN1_4_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B0BC8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN1_4_FNV_DDRIO_COMP_REG 0x050E4BC8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN1_4_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N1_4_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0BCC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N1_4_FNV_DDRIO_COMP_REG 0x050E4BCC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N1_4_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN1_4_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0BD0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN1_4_FNV_DDRIO_COMP_REG 0x050E4BD0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN1_4_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N1_4_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0BD4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N1_4_FNV_DDRIO_COMP_REG 0x050E4BD4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N1_4_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N1_4_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0BD8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N1_4_FNV_DDRIO_COMP_REG 0x050E4BD8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N1_4_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN1_4_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B0BDC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN1_4_FNV_DDRIO_COMP_REG 0x050E4BDC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN1_4_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN1_4_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0BE4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN1_4_FNV_DDRIO_COMP_REG 0x050E4BE4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN1_4_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N1_4_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0BE8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N1_4_FNV_DDRIO_COMP_REG 0x050E4BE8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N1_4_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N1_4_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0BEC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N1_4_FNV_DDRIO_COMP_REG 0x050E4BEC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N1_4_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N1_4_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0BF0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N1_4_FNV_DDRIO_COMP_REG 0x050E4BF0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N1_4_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N1_4_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0BF4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N1_4_FNV_DDRIO_COMP_REG 0x050E4BF4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N1_4_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN1_4_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B0BF8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN1_4_FNV_DDRIO_COMP_REG 0x050E4BF8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN1_4_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N0RANK0_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_5_FNV_DDRIO_COMP_REG 0x050E4C00
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset, [br] 
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK1_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_5_FNV_DDRIO_COMP_REG 0x050E4C04
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank1. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK2_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_5_FNV_DDRIO_COMP_REG 0x050E4C08
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank2. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK3_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_5_FNV_DDRIO_COMP_REG 0x050E4C0C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank3. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK4_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_5_FNV_DDRIO_COMP_REG 0x050E4C10
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank4. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK5_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_5_FNV_DDRIO_COMP_REG 0x050E4C14
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank5. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK6_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_5_FNV_DDRIO_COMP_REG 0x050E4C18
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank6. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK7_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_5_FNV_DDRIO_COMP_REG 0x050E4C1C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank7. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK0_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_5_FNV_DDRIO_COMP_REG 0x050E4C20
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK1_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_5_FNV_DDRIO_COMP_REG 0x050E4C24
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK2_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_5_FNV_DDRIO_COMP_REG 0x050E4C28
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK3_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_5_FNV_DDRIO_COMP_REG 0x050E4C2C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK4_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_5_FNV_DDRIO_COMP_REG 0x050E4C30
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK5_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_5_FNV_DDRIO_COMP_REG 0x050E4C34
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK6_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_5_FNV_DDRIO_COMP_REG 0x050E4C38
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK7_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_5_FNV_DDRIO_COMP_REG 0x050E4C3C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK0_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_5_FNV_DDRIO_COMP_REG 0x050E4C40
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the four DQ Clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK1_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_5_FNV_DDRIO_COMP_REG 0x050E4C44
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK2_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_5_FNV_DDRIO_COMP_REG 0x050E4C48
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK3_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_5_FNV_DDRIO_COMP_REG 0x050E4C4C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK4_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_5_FNV_DDRIO_COMP_REG 0x050E4C50
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK5_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_5_FNV_DDRIO_COMP_REG 0x050E4C54
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 3;
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK6_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_5_FNV_DDRIO_COMP_REG 0x050E4C58
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK7_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_5_FNV_DDRIO_COMP_REG 0x050E4C5C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK0_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_5_FNV_DDRIO_COMP_REG 0x050E4C60
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte. 0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK1_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_5_FNV_DDRIO_COMP_REG 0x050E4C64
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK2_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_5_FNV_DDRIO_COMP_REG 0x050E4C68
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK3_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_5_FNV_DDRIO_COMP_REG 0x050E4C6C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK4_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_5_FNV_DDRIO_COMP_REG 0x050E4C70
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK5_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_5_FNV_DDRIO_COMP_REG 0x050E4C74
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK6_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_5_FNV_DDRIO_COMP_REG 0x050E4C78
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK7_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_5_FNV_DDRIO_COMP_REG 0x050E4C7C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK0_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_5_FNV_DDRIO_COMP_REG 0x050E4C80
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       selects which skewed DQSP (to sample even bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSP 
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       selects which skewed DQSN (to sample odd bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSN 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK1_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_5_FNV_DDRIO_COMP_REG 0x050E4C84
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK2_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_5_FNV_DDRIO_COMP_REG 0x050E4C88
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK3_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_5_FNV_DDRIO_COMP_REG 0x050E4C8C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK4_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_5_FNV_DDRIO_COMP_REG 0x050E4C90
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK5_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_5_FNV_DDRIO_COMP_REG 0x050E4C94
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK6_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_5_FNV_DDRIO_COMP_REG 0x050E4C98
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK7_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0C9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_5_FNV_DDRIO_COMP_REG 0x050E4C9C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_5_FNV_DDRIO_COMP_STRUCT;


/* TXXTALKN0_5_FNV_DDRIO_COMP_REG supported on:                               */
/*       EKV (0x401B0CA0)                                                     */
/* Register default value:              0x00000000                            */
#define TXXTALKN0_5_FNV_DDRIO_COMP_REG 0x050E4CA0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * TX Crosstalk Cancellation Per Lane Write CoEfficents. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 twototwologicdelayrank0 : 4;
    /* twototwologicdelayrank0 - Bits[3:0], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 0
     */
    UINT32 twototwologicdelayrank1 : 4;
    /* twototwologicdelayrank1 - Bits[7:4], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 1
     */
    UINT32 twototwologicdelayrank2 : 4;
    /* twototwologicdelayrank2 - Bits[11:8], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 2
     */
    UINT32 twototwologicdelayrank3 : 4;
    /* twototwologicdelayrank3 - Bits[15:12], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 3
     */
    UINT32 twototwologicdelayrank4 : 4;
    /* twototwologicdelayrank4 - Bits[19:16], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 4
     */
    UINT32 twototwologicdelayrank5 : 4;
    /* twototwologicdelayrank5 - Bits[23:20], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 5
     */
    UINT32 twototwologicdelayrank6 : 4;
    /* twototwologicdelayrank6 - Bits[27:24], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 6
     */
    UINT32 twototwologicdelayrank7 : 4;
    /* twototwologicdelayrank7 - Bits[31:28], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 7
     */
  } Bits;
  UINT32 Data;
} TXXTALKN0_5_FNV_DDRIO_COMP_STRUCT;


/* RXVREFCTRLN0_5_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0CA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_5_FNV_DDRIO_COMP_REG 0x050E4CA4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_5_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN0_5_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B0CA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_5_FNV_DDRIO_COMP_REG 0x050E4CA8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage[br]
       [br]
               DataTrainFeedback Description:[br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  --------------------------[br]
               Cross Over Cal     0      0        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      0        Tx Dq Phase Detection[br]
               Cross Over Cal     2      0        Rec En Phase Detection[br]
               RcvEn              8:0    0        Byte detection[br]
       [br]
               Wr Leveling        8:0    0        Byte detection[br]
               Senseamp offset    3:0    0        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_5_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN0_5_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B0CC8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN0_5_FNV_DDRIO_COMP_REG 0x050E4CC8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN0_5_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N0_5_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0CCC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N0_5_FNV_DDRIO_COMP_REG 0x050E4CCC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N0_5_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN0_5_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0CD0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN0_5_FNV_DDRIO_COMP_REG 0x050E4CD0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN0_5_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N0_5_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0CD4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N0_5_FNV_DDRIO_COMP_REG 0x050E4CD4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N0_5_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N0_5_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0CD8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N0_5_FNV_DDRIO_COMP_REG 0x050E4CD8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N0_5_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN0_5_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B0CDC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN0_5_FNV_DDRIO_COMP_REG 0x050E4CDC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN0_5_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN0_5_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0CE4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN0_5_FNV_DDRIO_COMP_REG 0x050E4CE4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN0_5_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N0_5_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0CE8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N0_5_FNV_DDRIO_COMP_REG 0x050E4CE8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N0_5_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N0_5_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0CEC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N0_5_FNV_DDRIO_COMP_REG 0x050E4CEC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N0_5_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N0_5_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0CF0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N0_5_FNV_DDRIO_COMP_REG 0x050E4CF0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N0_5_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N0_5_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0CF4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N0_5_FNV_DDRIO_COMP_REG 0x050E4CF4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N0_5_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN0_5_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B0CF8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN0_5_FNV_DDRIO_COMP_REG 0x050E4CF8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN0_5_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N1RANK0_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_5_FNV_DDRIO_COMP_REG 0x050E4D00
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK1_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_5_FNV_DDRIO_COMP_REG 0x050E4D04
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK2_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_5_FNV_DDRIO_COMP_REG 0x050E4D08
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0.Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK3_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_5_FNV_DDRIO_COMP_REG 0x050E4D0C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK4_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_5_FNV_DDRIO_COMP_REG 0x050E4D10
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK5_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_5_FNV_DDRIO_COMP_REG 0x050E4D14
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK6_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_5_FNV_DDRIO_COMP_REG 0x050E4D18
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK7_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_5_FNV_DDRIO_COMP_REG 0x050E4D1C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK0_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_5_FNV_DDRIO_COMP_REG 0x050E4D20
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK1_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_5_FNV_DDRIO_COMP_REG 0x050E4D24
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK2_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_5_FNV_DDRIO_COMP_REG 0x050E4D28
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK3_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_5_FNV_DDRIO_COMP_REG 0x050E4D2C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK4_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_5_FNV_DDRIO_COMP_REG 0x050E4D30
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK5_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_5_FNV_DDRIO_COMP_REG 0x050E4D34
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK6_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_5_FNV_DDRIO_COMP_REG 0x050E4D38
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_5_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK7_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_5_FNV_DDRIO_COMP_REG 0x050E4D3C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK0_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_5_FNV_DDRIO_COMP_REG 0x050E4D40
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK1_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_5_FNV_DDRIO_COMP_REG 0x050E4D44
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK2_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_5_FNV_DDRIO_COMP_REG 0x050E4D48
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK3_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_5_FNV_DDRIO_COMP_REG 0x050E4D4C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK4_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_5_FNV_DDRIO_COMP_REG 0x050E4D50
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK5_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_5_FNV_DDRIO_COMP_REG 0x050E4D54
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled [br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK6_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_5_FNV_DDRIO_COMP_REG 0x050E4D58
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK7_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_5_FNV_DDRIO_COMP_REG 0x050E4D5C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK0_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_5_FNV_DDRIO_COMP_REG 0x050E4D60
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK1_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_5_FNV_DDRIO_COMP_REG 0x050E4D64
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK2_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_5_FNV_DDRIO_COMP_REG 0x050E4D68
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK3_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_5_FNV_DDRIO_COMP_REG 0x050E4D6C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK4_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_5_FNV_DDRIO_COMP_REG 0x050E4D70
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK5_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_5_FNV_DDRIO_COMP_REG 0x050E4D74
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK6_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_5_FNV_DDRIO_COMP_REG 0x050E4D78
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_5_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK7_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_5_FNV_DDRIO_COMP_REG 0x050E4D7C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK0_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_5_FNV_DDRIO_COMP_REG 0x050E4D80
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK1_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_5_FNV_DDRIO_COMP_REG 0x050E4D84
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK2_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_5_FNV_DDRIO_COMP_REG 0x050E4D88
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK3_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_5_FNV_DDRIO_COMP_REG 0x050E4D8C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK4_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_5_FNV_DDRIO_COMP_REG 0x050E4D90
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK5_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_5_FNV_DDRIO_COMP_REG 0x050E4D94
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK6_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_5_FNV_DDRIO_COMP_REG 0x050E4D98
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_5_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK7_5_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0D9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_5_FNV_DDRIO_COMP_REG 0x050E4D9C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_5_FNV_DDRIO_COMP_STRUCT;




/* RXVREFCTRLN1_5_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0DA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_5_FNV_DDRIO_COMP_REG 0x050E4DA4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_5_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN1_5_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B0DA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_5_FNV_DDRIO_COMP_REG 0x050E4DA8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage [br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  ---------------[br]
               Cross Over Cal     0      1        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      1        Tx Dq Phase Detection[br]
               Cross Over Cal     2      1        Rec En Phase Detection[br]
               RcvEn              8:0    1        Byte detection[br]
               Wr Leveling        8:0    1        Byte detection[br]
               Senseamp offset    3:0    1        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_5_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN1_5_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B0DC8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN1_5_FNV_DDRIO_COMP_REG 0x050E4DC8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN1_5_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N1_5_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0DCC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N1_5_FNV_DDRIO_COMP_REG 0x050E4DCC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N1_5_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN1_5_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0DD0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN1_5_FNV_DDRIO_COMP_REG 0x050E4DD0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN1_5_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N1_5_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0DD4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N1_5_FNV_DDRIO_COMP_REG 0x050E4DD4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N1_5_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N1_5_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0DD8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N1_5_FNV_DDRIO_COMP_REG 0x050E4DD8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N1_5_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN1_5_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B0DDC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN1_5_FNV_DDRIO_COMP_REG 0x050E4DDC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN1_5_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN1_5_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0DE4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN1_5_FNV_DDRIO_COMP_REG 0x050E4DE4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN1_5_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N1_5_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0DE8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N1_5_FNV_DDRIO_COMP_REG 0x050E4DE8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N1_5_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N1_5_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0DEC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N1_5_FNV_DDRIO_COMP_REG 0x050E4DEC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N1_5_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N1_5_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0DF0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N1_5_FNV_DDRIO_COMP_REG 0x050E4DF0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N1_5_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N1_5_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0DF4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N1_5_FNV_DDRIO_COMP_REG 0x050E4DF4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N1_5_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN1_5_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B0DF8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN1_5_FNV_DDRIO_COMP_REG 0x050E4DF8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN1_5_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N0RANK0_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK0_6_FNV_DDRIO_COMP_REG 0x050E4E00
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS (0: 1/16 UI 
       offset, [br] 
                 1: 3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI Offsets, 4: 9/16 UI 
       Offsets, 5,6,7: 11/16 UI Offsets.) 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK0_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK1_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK1_6_FNV_DDRIO_COMP_REG 0x050E4E04
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank1. Multicast read for CH012 or CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK1_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK2_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK2_6_FNV_DDRIO_COMP_REG 0x050E4E08
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank2. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK2_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK3_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK3_6_FNV_DDRIO_COMP_REG 0x050E4E0C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank3. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_N to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK3_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK4_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK4_6_FNV_DDRIO_COMP_REG 0x050E4E10
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank4. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK4_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK5_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK5_6_FNV_DDRIO_COMP_REG 0x050E4E14
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank5. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       readx4modeenb
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       mux select for crossover from ClkPiRef to CkPi4RcvEn, used in xover2to2 mode
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK5_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK6_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK6_6_FNV_DDRIO_COMP_REG 0x050E4E18
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank6. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       per nibble READ timing control, delay DQS_P to match the earlest arrival DQ, 
       0~1.5UI with step size ClkPi/64 
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK6_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N0RANK7_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N0RANK7_6_FNV_DDRIO_COMP_REG 0x050E4E1C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank7. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       CTLE current steering tuning (0=no eq, 7=max eq). It is decoded to[br]
                   CTLE resistor tuning: 00 - 3R (10.8Kohms), 01/10 -  R (3.6Kohms), 11 
       - R/3 (1.2Kohms)[br] 
                   CTLE capacitor tuning: 00 - 0C (not used), 01 - 1C (200ff), 10 - 2C 
       (400ff), 11 - 3C (600ff) 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N0RANK7_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK0_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK0_6_FNV_DDRIO_COMP_REG 0x050E4E20
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_P to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       per bit READ timing control,[br]
                   delay DQS_N to match each DQ, 0~.25UI with step size ClkPi/64 added 
       to nibble delay RxDqsPDelay 
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK0_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK1_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK1_6_FNV_DDRIO_COMP_REG 0x050E4E24
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK1_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK2_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK2_6_FNV_DDRIO_COMP_REG 0x050E4E28
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK2_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK3_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK3_6_FNV_DDRIO_COMP_REG 0x050E4E2C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK3_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK4_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK4_6_FNV_DDRIO_COMP_REG 0x050E4E30
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK4_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK5_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK5_6_FNV_DDRIO_COMP_REG 0x050E4E34
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK5_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK6_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK6_6_FNV_DDRIO_COMP_REG 0x050E4E38
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK6_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N0RANK7_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N0RANK7_6_FNV_DDRIO_COMP_REG 0x050E4E3C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N0RANK7_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK0_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK0_6_FNV_DDRIO_COMP_REG 0x050E4E40
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the four DQ Clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK0_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK1_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK1_6_FNV_DDRIO_COMP_REG 0x050E4E44
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK1_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK2_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK2_6_FNV_DDRIO_COMP_REG 0x050E4E48
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK2_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK3_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK3_6_FNV_DDRIO_COMP_REG 0x050E4E4C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK3_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK4_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK4_6_FNV_DDRIO_COMP_REG 0x050E4E50
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK4_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK5_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK5_6_FNV_DDRIO_COMP_REG 0x050E4E54
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 3;
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK5_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK6_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK6_6_FNV_DDRIO_COMP_REG 0x050E4E58
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK6_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N0RANK7_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N0RANK7_6_FNV_DDRIO_COMP_REG 0x050E4E5C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       Select one of the four DQ clk
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N0RANK7_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK0_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK0_6_FNV_DDRIO_COMP_REG 0x050E4E60
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte. 0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK0_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK1_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK1_6_FNV_DDRIO_COMP_REG 0x050E4E64
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK1_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK2_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK2_6_FNV_DDRIO_COMP_REG 0x050E4E68
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK2_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK3_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK3_6_FNV_DDRIO_COMP_REG 0x050E4E6C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK3_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK4_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK4_6_FNV_DDRIO_COMP_REG 0x050E4E70
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK4_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK5_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK5_6_FNV_DDRIO_COMP_REG 0x050E4E74
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK5_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK6_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK6_6_FNV_DDRIO_COMP_REG 0x050E4E78
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK6_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N0RANK7_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N0RANK7_6_FNV_DDRIO_COMP_REG 0x050E4E7C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N0RANK7_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK0_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK0_6_FNV_DDRIO_COMP_REG 0x050E4E80
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       selects which skewed DQSP (to sample even bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSP 
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       selects which skewed DQSN (to sample odd bits) is used in the RX FIFO. For 
       proper operation, always pick latest DQSN 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK0_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK1_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK1_6_FNV_DDRIO_COMP_REG 0x050E4E84
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK1_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK2_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK2_6_FNV_DDRIO_COMP_REG 0x050E4E88
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK2_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK3_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK3_6_FNV_DDRIO_COMP_REG 0x050E4E8C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK3_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK4_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK4_6_FNV_DDRIO_COMP_REG 0x050E4E90
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       [0]=0 selects the raw output from the nibble DQS amplifier; [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK4_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK5_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK5_6_FNV_DDRIO_COMP_REG 0x050E4E94
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK5_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK6_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK6_6_FNV_DDRIO_COMP_REG 0x050E4E98
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK6_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN0RANK7_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0E9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN0RANK7_6_FNV_DDRIO_COMP_REG 0x050E4E9C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       select the phase1 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN0RANK7_6_FNV_DDRIO_COMP_STRUCT;


/* TXXTALKN0_6_FNV_DDRIO_COMP_REG supported on:                               */
/*       EKV (0x401B0EA0)                                                     */
/* Register default value:              0x00000000                            */
#define TXXTALKN0_6_FNV_DDRIO_COMP_REG 0x050E4EA0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * TX Crosstalk Cancellation Per Lane Write CoEfficents. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 twototwologicdelayrank0 : 4;
    /* twototwologicdelayrank0 - Bits[3:0], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 0
     */
    UINT32 twototwologicdelayrank1 : 4;
    /* twototwologicdelayrank1 - Bits[7:4], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 1
     */
    UINT32 twototwologicdelayrank2 : 4;
    /* twototwologicdelayrank2 - Bits[11:8], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 2
     */
    UINT32 twototwologicdelayrank3 : 4;
    /* twototwologicdelayrank3 - Bits[15:12], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 3
     */
    UINT32 twototwologicdelayrank4 : 4;
    /* twototwologicdelayrank4 - Bits[19:16], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for Rank 4
     */
    UINT32 twototwologicdelayrank5 : 4;
    /* twototwologicdelayrank5 - Bits[23:20], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 5
     */
    UINT32 twototwologicdelayrank6 : 4;
    /* twototwologicdelayrank6 - Bits[27:24], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 6
     */
    UINT32 twototwologicdelayrank7 : 4;
    /* twototwologicdelayrank7 - Bits[31:28], RW, default = 4'b0000 
       This may need to be set for bits 3:0 in the nibble for rank 7
     */
  } Bits;
  UINT32 Data;
} TXXTALKN0_6_FNV_DDRIO_COMP_STRUCT;


/* RXVREFCTRLN0_6_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0EA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN0_6_FNV_DDRIO_COMP_REG 0x050E4EA4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       enables fine grain Vref control, shift down the Vref voltage by ~0.5 stepsize
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN0_6_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN0_6_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B0EA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN0_6_FNV_DDRIO_COMP_REG 0x050E4EA8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage[br]
       [br]
               DataTrainFeedback Description:[br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  --------------------------[br]
               Cross Over Cal     0      0        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      0        Tx Dq Phase Detection[br]
               Cross Over Cal     2      0        Rec En Phase Detection[br]
               RcvEn              8:0    0        Byte detection[br]
       [br]
               Wr Leveling        8:0    0        Byte detection[br]
               Senseamp offset    3:0    0        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN0_6_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN0_6_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B0EC8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN0_6_FNV_DDRIO_COMP_REG 0x050E4EC8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN0_6_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N0_6_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0ECC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N0_6_FNV_DDRIO_COMP_REG 0x050E4ECC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N0_6_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN0_6_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0ED0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN0_6_FNV_DDRIO_COMP_REG 0x050E4ED0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN0_6_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N0_6_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0ED4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N0_6_FNV_DDRIO_COMP_REG 0x050E4ED4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N0_6_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N0_6_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0ED8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N0_6_FNV_DDRIO_COMP_REG 0x050E4ED8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N0_6_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN0_6_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B0EDC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN0_6_FNV_DDRIO_COMP_REG 0x050E4EDC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN0_6_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN0_6_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0EE4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN0_6_FNV_DDRIO_COMP_REG 0x050E4EE4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN0_6_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N0_6_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0EE8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N0_6_FNV_DDRIO_COMP_REG 0x050E4EE8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N0_6_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N0_6_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0EEC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N0_6_FNV_DDRIO_COMP_REG 0x050E4EEC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N0_6_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N0_6_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0EF0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N0_6_FNV_DDRIO_COMP_REG 0x050E4EF0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N0_6_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N0_6_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0EF4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N0_6_FNV_DDRIO_COMP_REG 0x050E4EF4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N0_6_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN0_6_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B0EF8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN0_6_FNV_DDRIO_COMP_REG 0x050E4EF8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN0_6_FNV_DDRIO_COMP_STRUCT;




/* RXGROUP0N1RANK0_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F00)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK0_6_FNV_DDRIO_COMP_REG 0x050E4F00
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK0_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK1_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F04)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK1_6_FNV_DDRIO_COMP_REG 0x050E4F04
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK1_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK2_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F08)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK2_6_FNV_DDRIO_COMP_REG 0x050E4F08
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0.Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK2_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK3_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F0C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK3_6_FNV_DDRIO_COMP_REG 0x050E4F0C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK3_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK4_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F10)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK4_6_FNV_DDRIO_COMP_REG 0x050E4F10
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK4_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK5_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F14)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK5_6_FNV_DDRIO_COMP_REG 0x050E4F14
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK5_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK6_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F18)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK6_6_FNV_DDRIO_COMP_REG 0x050E4F18
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK6_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP0N1RANK7_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F1C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP0N1RANK7_6_FNV_DDRIO_COMP_REG 0x050E4F1C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data RX training values for Rank0. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rcvendelay : 9;
    /* rcvendelay - Bits[8:0], RW, default = 9'b0 
       RcvEn timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 readx8modeen : 1;
    /* readx8modeen - Bits[9:9], RW, default = 1'b0 
       ReadX8ModeEn
     */
    UINT32 rxdqspdelay : 7;
    /* rxdqspdelay - Bits[16:10], RW, default = 7'b0 
       common DQS_P delay control, per nibble
     */
    UINT32 rxdqsndelay : 7;
    /* rxdqsndelay - Bits[23:17], RW, default = 7'b0 
       common DQS_N delay control, per nibble
     */
    UINT32 rxdqdelay : 3;
    /* rxdqdelay - Bits[26:24], RW, default = 3'b0 
       Rx DQ delay, per nibble, used in case if DQ is too early than DQS
     */
    UINT32 rxeq : 3;
    /* rxeq - Bits[29:27], RW, default = 3'b0 
       Rx Equalization code:  {4:3} controls the cap tuning 0: (not used), 1: 200ff, 2: 
       400ff, 3: 600ff, [br] 
                            controls the resistor tuning (0: 3R, 1: 1R, 2: 1R, 3: R/3).
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} RXGROUP0N1RANK7_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK0_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F20)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK0_6_FNV_DDRIO_COMP_REG 0x050E4F20
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK0_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK1_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F24)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK1_6_FNV_DDRIO_COMP_REG 0x050E4F24
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK1_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK2_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F28)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK2_6_FNV_DDRIO_COMP_REG 0x050E4F28
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK2_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK3_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F2C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK3_6_FNV_DDRIO_COMP_REG 0x050E4F2C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK3_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK4_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F30)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK4_6_FNV_DDRIO_COMP_REG 0x050E4F30
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK4_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK5_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F34)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK5_6_FNV_DDRIO_COMP_REG 0x050E4F34
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK5_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK6_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F38)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK6_6_FNV_DDRIO_COMP_REG 0x050E4F38
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK6_6_FNV_DDRIO_COMP_STRUCT;


/* RXGROUP1N1RANK7_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F3C)                                                     */
/* Register default value:              0x00000000                            */
#define RXGROUP1N1RANK7_6_FNV_DDRIO_COMP_REG 0x050E4F3C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 rxdqspdelay0 : 4;
    /* rxdqspdelay0 - Bits[3:0], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay1 : 4;
    /* rxdqspdelay1 - Bits[7:4], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay2 : 4;
    /* rxdqspdelay2 - Bits[11:8], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqspdelay3 : 4;
    /* rxdqspdelay3 - Bits[15:12], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay0 : 4;
    /* rxdqsndelay0 - Bits[19:16], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay1 : 4;
    /* rxdqsndelay1 - Bits[23:20], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay2 : 4;
    /* rxdqsndelay2 - Bits[27:24], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
    UINT32 rxdqsndelay3 : 4;
    /* rxdqsndelay3 - Bits[31:28], RW, default = 4'b0 
       Read timing offset DQS to match a DQ bit.  +tQCLK/4 with step size of tQCK/64
     */
  } Bits;
  UINT32 Data;
} RXGROUP1N1RANK7_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK0_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F40)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK0_6_FNV_DDRIO_COMP_REG 0x050E4F40
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK0_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK1_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F44)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK1_6_FNV_DDRIO_COMP_REG 0x050E4F44
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the four clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK1_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK2_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F48)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK2_6_FNV_DDRIO_COMP_REG 0x050E4F48
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK2_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK3_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F4C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK3_6_FNV_DDRIO_COMP_REG 0x050E4F4C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK3_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK4_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F50)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK4_6_FNV_DDRIO_COMP_REG 0x050E4F50
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       select one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK4_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK5_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F54)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK5_6_FNV_DDRIO_COMP_REG 0x050E4F54
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled [br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK5_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK6_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F58)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK6_6_FNV_DDRIO_COMP_REG 0x050E4F58
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       xelect for crossover from PiRef to PiN for bit 1
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK6_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP0N1RANK7_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F5C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP0N1RANK7_6_FNV_DDRIO_COMP_REG 0x050E4F5C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing and Voltage control for writing one data byte on Rank. Multicast read for 
 * CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqdelay : 9;
    /* txdqdelay - Bits[8:0], RW, default = 9'b0 
       Write DQ timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqsdelay : 9;
    /* txdqsdelay - Bits[17:9], RW, default = 9'b0 
       Write DQS timing control.  Unsigned number from 0 to 8 tQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpiclksel : 2;
    /* txdqpiclksel - Bits[19:18], RW, default = 2'b0 
       one of the 4 clocks
     */
    UINT32 rsvd_20 : 2;
    UINT32 txdqsxsel : 1;
    /* txdqsxsel - Bits[22:22], RW, default = 1'b0 
       xelect for crossover from Qclk to CkPi4Dqs
     */
    UINT32 txeq : 6;
    /* txeq - Bits[28:23], RW, default = 6'b0 
       Write Equalization codes.  5 bit control, but only 24 of them are 
       meaningful.[br] 
                   The decoding is 1-1 matched, means 0 is 0 legs enabled for 
       deemphasized, 1 is 1 leg enabled[br] 
                   for deemphasized, and so on.[br]
                   BDX-change. Increased the width by 1bit for TXEQ tracking
     */
    UINT32 x8writeen : 1;
    /* x8writeen - Bits[29:29], RW, default = 1'b0 
       Rsvd
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} TXGROUP0N1RANK7_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK0_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F60)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK0_6_FNV_DDRIO_COMP_REG 0x050E4F60
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK0_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK1_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F64)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK1_6_FNV_DDRIO_COMP_REG 0x050E4F64
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK1_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK2_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F68)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK2_6_FNV_DDRIO_COMP_REG 0x050E4F68
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK2_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK3_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F6C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK3_6_FNV_DDRIO_COMP_REG 0x050E4F6C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK3_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK4_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F70)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK4_6_FNV_DDRIO_COMP_REG 0x050E4F70
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK4_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK5_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F74)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK5_6_FNV_DDRIO_COMP_REG 0x050E4F74
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK5_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK6_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F78)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK6_6_FNV_DDRIO_COMP_REG 0x050E4F78
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank. Multicast read for CH012 
 * and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK6_6_FNV_DDRIO_COMP_STRUCT;


/* TXGROUP1N1RANK7_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F7C)                                                     */
/* Register default value:              0x00000000                            */
#define TXGROUP1N1RANK7_6_FNV_DDRIO_COMP_REG 0x050E4F7C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Timing control for each lane of the data byte on Rank
 */
typedef union {
  struct {
    UINT32 txdqpicode0 : 6;
    /* txdqpicode0 - Bits[5:0], RW, default = 6'b0 
       Write timing offset for bit[0] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode1 : 6;
    /* txdqpicode1 - Bits[11:6], RW, default = 6'b0 
       Write timing offset for bit[1] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode2 : 6;
    /* txdqpicode2 - Bits[17:12], RW, default = 6'b0 
       Write timing offset for bit[2] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 txdqpicode3 : 6;
    /* txdqpicode3 - Bits[23:18], RW, default = 6'b0 
       Write timing offset for bit[3] of the DQ byte.  0 to toQCK with step size of 
       tQCK/64 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} TXGROUP1N1RANK7_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK0_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F80)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK0_6_FNV_DDRIO_COMP_REG 0x050E4F80
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK0_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK1_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F84)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK1_6_FNV_DDRIO_COMP_REG 0x050E4F84
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK1_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK2_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F88)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK2_6_FNV_DDRIO_COMP_REG 0x050E4F88
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK2_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK3_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F8C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK3_6_FNV_DDRIO_COMP_REG 0x050E4F8C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK3_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK4_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F90)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK4_6_FNV_DDRIO_COMP_REG 0x050E4F90
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK4_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK5_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F94)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK5_6_FNV_DDRIO_COMP_REG 0x050E4F94
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK5_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK6_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F98)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK6_6_FNV_DDRIO_COMP_REG 0x050E4F98
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK6_6_FNV_DDRIO_COMP_STRUCT;


/* RXOFFSETN1RANK7_6_FNV_DDRIO_COMP_REG supported on:                         */
/*       EKV (0x401B0F9C)                                                     */
/* Register default value:              0x00000000                            */
#define RXOFFSETN1RANK7_6_FNV_DDRIO_COMP_REG 0x050E4F9C
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Read Per Lane Amplifier Voltage Offset. Multicast read for CH012 and CH345 
 * versions are not supported. 
 */
typedef union {
  struct {
    UINT32 saoffset0 : 5;
    /* saoffset0 - Bits[4:0], RW, default = 5'b0 
       Amplifier voltage offset for bit[0] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset1 : 5;
    /* saoffset1 - Bits[9:5], RW, default = 5'b0 
       Amplifier voltage offset for bit[1] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset2 : 5;
    /* saoffset2 - Bits[14:10], RW, default = 5'b0 
       Amplifier voltage offset for bit[2] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 saoffset3 : 5;
    /* saoffset3 - Bits[19:15], RW, default = 5'b0 
       Amplifier voltage offset for bit[3] of the DQ byte. {0: Most negative offset,... 
       8: 0 offset, ... 63: Most postive offset} 
     */
    UINT32 rxdqspsel : 2;
    /* rxdqspsel - Bits[21:20], RW, default = 2'b0 
       x4/x8 DQS mux select[br]
                   [0]=1 selects the raw output from the nibble0 DQS amplifier in x8 
       mode; [br] 
                   [0]=0 select nibble1 amplifier output in x4 mode; [br]
                   [1] is not used.
     */
    UINT32 rxdqsnsel : 2;
    /* rxdqsnsel - Bits[23:22], RW, default = 2'b0 
       select the phase2 dqs clock skewed with max delay to drive rxFIFO write
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} RXOFFSETN1RANK7_6_FNV_DDRIO_COMP_STRUCT;




/* RXVREFCTRLN1_6_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0FA4)                                                     */
/* Register default value:              0x00000000                            */
#define RXVREFCTRLN1_6_FNV_DDRIO_COMP_REG 0x050E4FA4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * RxVrefCtrl. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 vrefperbit0 : 7;
    /* vrefperbit0 - Bits[6:0], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben0 : 1;
    /* halflsben0 - Bits[7:7], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit1 : 7;
    /* vrefperbit1 - Bits[14:8], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben1 : 1;
    /* halflsben1 - Bits[15:15], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit2 : 7;
    /* vrefperbit2 - Bits[22:16], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben2 : 1;
    /* halflsben2 - Bits[23:23], RW, default = 1'b0 
       Rsvd
     */
    UINT32 vrefperbit3 : 7;
    /* vrefperbit3 - Bits[30:24], RW, default = 7'b0 
       Per bit Rx Vref Control
     */
    UINT32 halflsben3 : 1;
    /* halflsben3 - Bits[31:31], RW, default = 1'b0 
       shift down the Vref voltage by ~0.5 stepsize
     */
  } Bits;
  UINT32 Data;
} RXVREFCTRLN1_6_FNV_DDRIO_COMP_STRUCT;


/* DATATRAINFEEDBACKN1_6_FNV_DDRIO_COMP_REG supported on:                     */
/*       EKV (0x401B0FA8)                                                     */
/* Register default value:              0x00000000                            */
#define DATATRAINFEEDBACKN1_6_FNV_DDRIO_COMP_REG 0x050E4FA8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Training Feedback Results. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 datatrainfeedback : 9;
    /* datatrainfeedback - Bits[8:0], RW, default = 9'b0 
       Data Training Feedback Storage [br]
                Training Step    Bits    Nibble    Description[br]
               --------------    ----    -------  ---------------[br]
               Cross Over Cal     0      1        Tx Dqs Phase Detection[br]
               Cross Over Cal     1      1        Tx Dq Phase Detection[br]
               Cross Over Cal     2      1        Rec En Phase Detection[br]
               RcvEn              8:0    1        Byte detection[br]
               Wr Leveling        8:0    1        Byte detection[br]
               Senseamp offset    3:0    1        Dq Senseamp offset Detection
     */
    UINT32 rsvd_9 : 23;
  } Bits;
  UINT32 Data;
} DATATRAINFEEDBACKN1_6_FNV_DDRIO_COMP_STRUCT;


/* DDRCRFSMCALN1_6_FNV_DDRIO_COMP_REG supported on:                           */
/*       EKV (0x401B0FC8)                                                     */
/* Register default value:              0x00000000                            */
#define DDRCRFSMCALN1_6_FNV_DDRIO_COMP_REG 0x050E4FC8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel 
 * out intrinsic offset in analogue receivers and Xover training ,it aligns all the 
 * local dll to the global qclk 
 */
typedef union {
  struct {
    UINT32 saoffset0fsm : 5;
    /* saoffset0fsm - Bits[4:0], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of first receiver is done(read 
       only) 
     */
    UINT32 saoffset1fsm : 5;
    /* saoffset1fsm - Bits[9:5], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of second receiver is done(read 
       only) 
     */
    UINT32 saoffset2fsm : 5;
    /* saoffset2fsm - Bits[14:10], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of third receiver is done(read 
       only) 
     */
    UINT32 saoffset3fsm : 5;
    /* saoffset3fsm - Bits[19:15], ROV, default = 5'b0 
       Loads the value from fsm to Cr when caliberation of fourth receiver is done(read 
       only) 
     */
    UINT32 fsmcalcomplete : 1;
    /* fsmcalcomplete - Bits[20:20], ROV, default = 1'b0 
        when the caliberation is done
     */
    UINT32 refpiclkdelayfsm : 6;
    /* refpiclkdelayfsm - Bits[26:21], ROV, default = 6'b0 
       Load FSM with a code at which , the transition is detected.
     */
    UINT32 fsmcaldone : 1;
    /* fsmcaldone - Bits[27:27], ROV, default = 1'b0 
       when the caliberation of voc or x-over is done
     */
    UINT32 fsmtimersel : 1;
    /* fsmtimersel - Bits[28:28], RW, default = 1'b0 
       Timer is set for either 8 cycles or 16 cycles
     */
    UINT32 fsmpatternsel : 1;
    /* fsmpatternsel - Bits[29:29], RW, default = 1'b0 
        It selects whther the pattern of three bit or two bit is selected when the 
       transition happen from 1-->0 for pdout and receiver , to avoid glitch 
     */
    UINT32 fsmvoccal : 1;
    /* fsmvoccal - Bits[30:30], RW, default = 1'b0 
        This bit tells , wether the xover or voc caliberation will be done, if its zero 
       x-over caliberation is done and vice-versa 
     */
    UINT32 fsmcalen : 1;
    /* fsmcalen - Bits[31:31], RW, default = 1'b0 
       FsmCalEn starts the voc-Xover Fsm
     */
  } Bits;
  UINT32 Data;
} DDRCRFSMCALN1_6_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL4N1_6_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0FCC)                                                     */
/* Register default value:              0x801F0000                            */
#define DATACONTROL4N1_6_FNV_DDRIO_COMP_REG 0x050E4FCC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    UINT32 vsshiorvrefctl1 : 8;
    /* vsshiorvrefctl1 - Bits[8:1], RW, default = 8'b0 
        VssHi control bits[br]
               Field Description: [br]
       [br]
                Field             Bits    Description[br]
               -------            ----    ---------------------------------[br]
       	 disoverflow        24     Disable overflow logic from BDW[br]
         fast panic enable  25     Bypass 2 flops in panic path for faster panic 
       response[br] 
         vsshivccd2by3cfgen 26     Forces the driver DAC to get supply from 2/3 
       vccd[br] 
         vsshivccd2by3cfg   27:29  Current trim setting for 2/3 vccd mode, 001 fast, 
       011 typical, 111 slow silicon [br] 
       	 ddrvssh2ndcompen   30     Enable second comparator (ZBB mode)[br]
         comp high bwen     31     Improve comparator performance to support low 
       digital voltage range 
     */
    UINT32 dqtxeqsel : 1;
    /* dqtxeqsel - Bits[9:9], RW, default = 1'b0 
       DQ TxEq setting selection to achieve constant EQ
     */
    UINT32 rsvd_10 : 2;
    UINT32 vrefpwrsave : 1;
    /* vrefpwrsave - Bits[12:12], RW, default = 1'h0 
                If set to 0 (default), Vref generators selected through RxVrefSel[3:0] 
       are always on.[br] 
                If set to 1, Vref generators are switched off while in Self Refresh.
     */
    UINT32 vreftonblbus : 4;
    /* vreftonblbus - Bits[16:13], RW, default = 4'b1000 
       Per-bit Enable connection to share Vref Bus
     */
    UINT32 rxvrefsel : 4;
    /* rxvrefsel - Bits[20:17], RW, default = 4'b1111 
       Per Bit Verf generator Enable
     */
    UINT32 refpiclkdelay : 6;
    /* refpiclkdelay - Bits[26:21], RW, default = 6'b000000 
       RefPiClkDelay
     */
    UINT32 fnvcrsdlbypassen : 1;
    /* fnvcrsdlbypassen - Bits[27:27], RW, default = 1'b0 
       FNV Slave Delay Line Bypass Enable
     */
    UINT32 fnvcrdllbypassen : 1;
    /* fnvcrdllbypassen - Bits[28:28], RW, default = 1'b0 
       FNV DLL Bypass Enable
     */
    UINT32 fnvcrvisaen : 1;
    /* fnvcrvisaen - Bits[29:29], RW, default = 1'b0 
       FNV Visa Fub Enable - data fub used for VISA if asserted
     */
    UINT32 writecrcenable : 1;
    /* writecrcenable - Bits[30:30], RW, default = 1'h0 
       Enable write crc mode
     */
    UINT32 rsvd_31 : 1;
  } Bits;
  UINT32 Data;
} DATACONTROL4N1_6_FNV_DDRIO_COMP_STRUCT;


/* ATTACK1SELN1_6_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0FD0)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK1SELN1_6_FNV_DDRIO_COMP_REG 0x050E4FD0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr1d0 : 3;
    /* attackr1d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[0] in a byte
     */
    UINT32 attackr1d1 : 3;
    /* attackr1d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[1] in a byte
     */
    UINT32 attackr1d2 : 3;
    /* attackr1d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[2] in a byte
     */
    UINT32 attackr1d3 : 3;
    /* attackr1d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[3] in a byte
     */
    UINT32 attackr1d4 : 3;
    /* attackr1d4 - Bits[14:12], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[4] in a byte
     */
    UINT32 attackr1d5 : 3;
    /* attackr1d5 - Bits[17:15], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[5] in a byte
     */
    UINT32 attackr1d6 : 3;
    /* attackr1d6 - Bits[20:18], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[6] in a byte
     */
    UINT32 attackr1d7 : 3;
    /* attackr1d7 - Bits[23:21], RW, default = 3'b0 
       xtalk aggressor1 select for dq bit[7] in a byte
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} ATTACK1SELN1_6_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA0N1_6_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0FD4)                                                     */
/* Register default value:              0x00028000                            */
#define COMPDATA0N1_6_FNV_DDRIO_COMP_REG 0x050E4FD4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompdrvup : 6;
    /* rcompdrvup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp DrvUp Comp Value can be overriden via message channel if periodical 
       retrain is disable 
     */
    UINT32 spare0 : 3;
    /* spare0 - Bits[8:6], RWV, default = 3'b0 
       Spare
     */
    UINT32 rcompdrvdown : 6;
    /* rcompdrvdown - Bits[14:9], RWV, default = 6'b0 
       Data Rcomp DrvDown Comp Value
     */
    UINT32 vtcomp : 5;
    /* vtcomp - Bits[19:15], RWV, default = 5'b00101 
       VT Comp Values
     */
    UINT32 tcocomp : 7;
    /* tcocomp - Bits[26:20], RWV, default = 7'b0 
       Data TCO Comp Value.
     */
    UINT32 slewratecomp : 5;
    /* slewratecomp - Bits[31:27], RWV, default = 5'b0 
       Data Slew Rate Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA0N1_6_FNV_DDRIO_COMP_STRUCT;


/* COMPDATA1N1_6_FNV_DDRIO_COMP_REG supported on:                             */
/*       EKV (0x401B0FD8)                                                     */
/* Register default value:              0x04010000                            */
#define COMPDATA1N1_6_FNV_DDRIO_COMP_REG 0x050E4FD8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data Comp Values. Multicast read for CH012 and CH345 versions are not supported.
 */
typedef union {
  struct {
    UINT32 rcompodtup : 6;
    /* rcompodtup - Bits[5:0], RWV, default = 6'b0 
       Data Rcomp OdtUp Comp Value
     */
    UINT32 rcompodtdown : 6;
    /* rcompodtdown - Bits[11:6], RWV, default = 6'b0 
       Data Rcomp Odt-Down Comp Value
     */
    UINT32 panicdrvdn : 10;
    /* panicdrvdn - Bits[21:12], RWV, default = 10'b0000010000 
       Panic DrvDn RComp Value.
     */
    UINT32 panicdrvup : 10;
    /* panicdrvup - Bits[31:22], RWV, default = 10'b0000010000 
       Panic DrvUp RComp Comp Value.
     */
  } Bits;
  UINT32 Data;
} COMPDATA1N1_6_FNV_DDRIO_COMP_STRUCT;


/* DATAOFFSETTRAINN1_6_FNV_DDRIO_COMP_REG supported on:                       */
/*       EKV (0x401B0FDC)                                                     */
/* Register default value:              0x00000000                            */
#define DATAOFFSETTRAINN1_6_FNV_DDRIO_COMP_REG 0x050E4FDC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rcvenoffset : 6;
    /* rcvenoffset - Bits[5:0], RW, default = 6'b0 
       Offset added to Trained RxRcvEn Value.
     */
    UINT32 rxdqsoffset : 7;
    /* rxdqsoffset - Bits[12:6], RW, default = 7'b0 
       Offset added to Trained Rx DQS Value.
     */
    UINT32 txdqoffset : 6;
    /* txdqoffset - Bits[18:13], RW, default = 6'b00 
       Offset added to Trained Tx DQ Value.
     */
    UINT32 txdqsoffset : 6;
    /* txdqsoffset - Bits[24:19], RW, default = 6'b000000 
       Ooffset added to Trained Tx DQS Value.
     */
    UINT32 vrefoffset : 7;
    /* vrefoffset - Bits[31:25], RW, default = 7'b0000000 
       2s Compliment offset added to Trained Vref Value.  Positive number increases 
       Vref, and each step is Vdd/384. 
     */
  } Bits;
  UINT32 Data;
} DATAOFFSETTRAINN1_6_FNV_DDRIO_COMP_STRUCT;




/* ATTACK0SELN1_6_FNV_DDRIO_COMP_REG supported on:                            */
/*       EKV (0x401B0FE4)                                                     */
/* Register default value:              0x00000000                            */
#define ATTACK0SELN1_6_FNV_DDRIO_COMP_REG 0x050E4FE4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Select 2 aggressors out 3 neighbors in a nibble. Multicast read for CH012 and 
 * CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 attackr0d0 : 3;
    /* attackr0d0 - Bits[2:0], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[0] in a byte
     */
    UINT32 attackr0d1 : 3;
    /* attackr0d1 - Bits[5:3], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[1] in a byte
     */
    UINT32 attackr0d2 : 3;
    /* attackr0d2 - Bits[8:6], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[2] in a byte
     */
    UINT32 attackr0d3 : 3;
    /* attackr0d3 - Bits[11:9], RW, default = 3'b0 
       xtalk aggressor0 select for dq bit[3] in a byte
     */
    UINT32 txddjcen : 4;
    /* txddjcen - Bits[15:12], RW, default = 4'b000 
       TxddjcEn
     */
    UINT32 dfeenable : 1;
    /* dfeenable - Bits[16:16], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfedlysel : 1;
    /* dfedlysel - Bits[17:17], RW, default = 1'b0 
       DfeEnable
     */
    UINT32 dfecode : 4;
    /* dfecode - Bits[21:18], RW, default = 4'b0000 
       xtalk aggressor0 select for dq bit[7] in a byte
     */
    UINT32 rsvd_22 : 10;
  } Bits;
  UINT32 Data;
} ATTACK0SELN1_6_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL0N1_6_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0FE8)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL0N1_6_FNV_DDRIO_COMP_REG 0x050E4FE8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxtrainingmode : 1;
    /* rxtrainingmode - Bits[0:0], RW, default = 1'b0 
       Enables Read DqDqs Training Mode
     */
    UINT32 wltrainingmode : 1;
    /* wltrainingmode - Bits[1:1], RW, default = 1'b0 
       Enables Write Leveling Training Mode
     */
    UINT32 rltrainingmode : 1;
    /* rltrainingmode - Bits[2:2], RW, default = 1'b0 
       Enables Read Leveling Training Mode.
     */
    UINT32 senseamptrainingmode : 1;
    /* senseamptrainingmode - Bits[3:3], RW, default = 1'b0 
       Enables SenseAmp offset cancellation training mode.
     */
    UINT32 txon : 1;
    /* txon - Bits[4:4], RW, default = 1'b0 
       When set, forces DQ/DQS drive enable to active.  Used in power measurements and 
       IO loopback mode 
     */
    UINT32 rfon : 1;
    /* rfon - Bits[5:5], RW, default = 1'b0 
       Power-down Disable:  Forces register file read, overriding the rank power down 
       logic. 
     */
    UINT32 rxpion : 1;
    /* rxpion - Bits[6:6], RW, default = 1'b0 
       Power-down Disable:  Forces RxDqs PI clocks on.
     */
    UINT32 txpion : 1;
    /* txpion - Bits[7:7], RW, default = 1'b0 
       Power-down Disable:  Forces TxDq and TxDqs PI clocks on.
     */
    UINT32 internalclockson : 1;
    /* internalclockson - Bits[8:8], RW, default = 1'b0 
                 Forces on master DLL and all PI enables ON, despite both channel in 
       SelfRefresh, etc. low power states. 
     */
    UINT32 saoffsettraintxon : 1;
    /* saoffsettraintxon - Bits[9:9], RW, default = 1'b0 
       SaOffsetTrainTxon
     */
    UINT32 txdisable : 1;
    /* txdisable - Bits[10:10], RW, default = 1'b0 
       Power-down:  All write commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 rxdisable : 1;
    /* rxdisable - Bits[11:11], RW, default = 1'b0 
       Power-down:  All read commands are ignored for this data-byte.  Used in 
       single-channel MCI mode. 
     */
    UINT32 txlong : 1;
    /* txlong - Bits[12:12], RW, default = 1'b0 
       Sets the duration of the first transmitted DQ bit of the burst. 0=1UI, 1=2UI.
     */
    UINT32 rsvd_13 : 5;
    UINT32 driversegmentenable : 1;
    /* driversegmentenable - Bits[18:18], RW, default = 1'b0 
       Controls which segements of the driver are enabled:  {0: All, 1: Only ODT}.
     */
    UINT32 rsvd_19 : 1;
    UINT32 readrfrd : 1;
    /* readrfrd - Bits[20:20], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a read command to Rank = ReadRFRank 
     */
    UINT32 readrfwr : 1;
    /* readrfwr - Bits[21:21], RWV, default = 1'b0 
       Self clearing command bit. When set, it will download the three 32 bit lines 
       from the RegFile associated with a write command to Rank = ReadRFRank 
     */
    UINT32 readrfrank : 3;
    /* readrfrank - Bits[24:22], RWV, default = 3'b000 
       Specifies the rank that ReadRFRd or ReadRFWr will manually download the CR 
       values from 
     */
    UINT32 forceodton : 1;
    /* forceodton - Bits[25:25], RW, default = 1'b0 
       ODT is forced-on.
     */
    UINT32 odtsampoff : 1;
    /* odtsampoff - Bits[26:26], RW, default = 1'b0 
       ODT and Senseamp are forced-off.
     */
    UINT32 disableodtstatic : 1;
    /* disableodtstatic - Bits[27:27], RW, default = 1'b0 
       not used
     */
    UINT32 ddrcrforceodton : 1;
    /* ddrcrforceodton - Bits[28:28], RW, default = 1'b0 
       force ODT to the transmitter on, regardless of state of DriveEnable
     */
    UINT32 spare : 1;
    /* spare - Bits[29:29], RW, default = 1'b0 
       spare
     */
    UINT32 xovercal : 1;
    /* xovercal - Bits[30:30], RW, default = 1'b0 
       Enables Xover Calibration Training Mode
     */
    UINT32 longpreambleenable : 1;
    /* longpreambleenable - Bits[31:31], RW, default = 1'b0 
       Enables long preamble for DDR4 devices
     */
  } Bits;
  UINT32 Data;
} DATACONTROL0N1_6_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL1N1_6_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0FEC)                                                     */
/* Register default value:              0x00000000                            */
#define DATACONTROL1N1_6_FNV_DDRIO_COMP_REG 0x050E4FEC
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 xtalkpienable : 1;
    /* xtalkpienable - Bits[0:0], RW, default = 1'b0 
       enable phase shift based crosstalk cancellation.
     */
    UINT32 xtalkpisign : 1;
    /* xtalkpisign - Bits[1:1], RW, default = 1'b0 
       select if 0: capacitive coupling; or 1: inductive coupling; xtalk dominant
     */
    UINT32 xtalkpidelta : 3;
    /* xtalkpidelta - Bits[4:2], RW, default = 3'b0 
       delta phase shift in one aggressor is in effect
     */
    UINT32 xtalkpideltarank5 : 2;
    /* xtalkpideltarank5 - Bits[6:5], RW, default = 2'b0 
       XtalkPiDeltaRank5
     */
    UINT32 rsvd_7 : 3;
    UINT32 rxbiasctl : 3;
    /* rxbiasctl - Bits[12:10], RW, default = 3'b0 
       Controls the Current and BW of the Receiver: {0: 0.34Idll, 1: 0.66Idll, 2: 
       0.88Idll, 3: Idll, 4: 1.33Idll, 5: 1.66Idll[br] 
       , 6: 2.00Idll, 7: 2.33Idll}
     */
    UINT32 odtdelay : 4;
    /* odtdelay - Bits[16:13], RW, default = 4'b0000 
       Controls ODT turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 odtduration : 3;
    /* odtduration - Bits[19:17], RW, default = 3'b000 
       Controls the ODT ON duration from (Code, Duration) = (0x0, 11 tQCK) to (0x7, 18 
       tQCK) 
     */
    UINT32 senseampdelay : 4;
    /* senseampdelay - Bits[23:20], RW, default = 4'b0000 
       Controls Senseamp turn-on delay.   To turn on N tQCK before RcvEn, program to 
       RcvEn[8:6]  N + 4. 
     */
    UINT32 senseampduration : 3;
    /* senseampduration - Bits[26:24], RW, default = 3'b000 
       Controls the SenseAmp ON duration from (Code, Duration) = (0x0, 11 tQCK) to 
       (0x7, 18 tQCK) 
     */
    UINT32 burstendodtdelay : 3;
    /* burstendodtdelay - Bits[29:27], RW, default = 3'b000 
       Cycles after the burst, when the current pulse should turn on by enabling OdtEn 
       for 1 cycle 
     */
    UINT32 rsvd_30 : 2;
  } Bits;
  UINT32 Data;
} DATACONTROL1N1_6_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL2N1_6_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0FF0)                                                     */
/* Register default value:              0x07800000                            */
#define DATACONTROL2N1_6_FNV_DDRIO_COMP_REG 0x050E4FF0
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * Data offsets to training values. Multicast read for CH012 and CH345 versions are 
 * not supported. 
 */
typedef union {
  struct {
    UINT32 rxvocselqnnnh : 5;
    /* rxvocselqnnnh - Bits[4:0], RW, default = 5'b0 
       Enables SenseAmp offset cancellation training mode
     */
    UINT32 forcebiason : 1;
    /* forcebiason - Bits[5:5], RW, default = 1'b0 
       Force on the internal Vref and Rx bias circuit, regardless of any other power 
       downs 
     */
    UINT32 forcerxon : 1;
    /* forcerxon - Bits[6:6], RW, default = 1'b0 
       Force on the RxAmp only (as opposed to OdtSampOn, which turns on both ODT and 
       the amplifier).[br] 
               Use for overclocking support where we may not be able to hit the fast 
       exit latency 
     */
    UINT32 ddr4extend : 1;
    /* ddr4extend - Bits[7:7], RW, default = 1'b0 
       Enable finer vref resolution in ddr4
     */
    UINT32 cttermination : 1;
    /* cttermination - Bits[8:8], RW, default = 1'h0 
       DDRCOMP_CR_DDRCRCOMPOVR CTTermination
     */
    UINT32 imodecfg : 1;
    /* imodecfg - Bits[9:9], RW, default = 1'h0 
       Imode Select, 0: Swing Boost Mode; 1: (not supported) Xtalk Cancellation Mode
     */
    UINT32 imodeenable : 1;
    /* imodeenable - Bits[10:10], RW, default = 1'h0 
       Enable Imode EQ per byte lane. [br]
                 0: Imode completely off [br]
                 1: Imode enabled (Xtalk cancellation OR swing boost selected by 
       ImodeCfg 
     */
    UINT32 enearlywriterankqnnnh : 1;
    /* enearlywriterankqnnnh - Bits[11:11], RW, default = 1'h0 
       Spare
     */
    UINT32 picodepipeqnnnh : 1;
    /* picodepipeqnnnh - Bits[12:12], RW, default = 1'h0 
       Spare
     */
    UINT32 spare : 2;
    /* spare - Bits[14:13], RW, default = 2'h0 
       Spare
     */
    UINT32 imodebiasen : 1;
    /* imodebiasen - Bits[15:15], RW, default = 1'h0 
       tbd
     */
    UINT32 rsvd_16 : 2;
    UINT32 imodeeqcode : 4;
    /* imodeeqcode - Bits[21:18], RW, default = 4'h0 
       Binary Imode Coefficient, sets Imode current strength.[br]
                 (used for either Xtalk cancellation or swing boost)[br]
                 Code   Imode Current (approx)[br]
                 ------------------[br]
                 0000        0[br]
                 0001        1[br]
                 0010        2[br]
                   *[br]
                   *[br]
                   *[br]
                 1111        3
     */
    UINT32 imodescompovrd : 1;
    /* imodescompovrd - Bits[22:22], RW, default = 1'h0 
       Imode Scomp Override Enable
     */
    UINT32 rxdqssaoffset : 5;
    /* rxdqssaoffset - Bits[27:23], RW, default = 5'b01111 
       strobe Rx Amp offset control
     */
    UINT32 rsvd_28 : 4;
  } Bits;
  UINT32 Data;
} DATACONTROL2N1_6_FNV_DDRIO_COMP_STRUCT;


/* DATACONTROL3N1_6_FNV_DDRIO_COMP_REG supported on:                          */
/*       EKV (0x401B0FF4)                                                     */
/* Register default value:              0x2198DFCF                            */
#define DATACONTROL3N1_6_FNV_DDRIO_COMP_REG 0x050E4FF4
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * static configurations of tx and rx. Multicast read for CH012 and CH345 versions 
 * are not supported. 
 */
typedef union {
  struct {
    UINT32 drvstaticlegcfg : 2;
    /* drvstaticlegcfg - Bits[1:0], RW, default = 2'b11 
       binary default setting for static legs in DRV mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 odtstaticlegcfg : 2;
    /* odtstaticlegcfg - Bits[3:2], RW, default = 2'b11 
       binary default setting for static legs in ODT mode[br]
                  0    0       0 legs (EQ disabled)[br]
                  0    1       3 legs (EQ max 3 legs)[br]
                  1    0       6 legs (EQ max 6 legs)[br]
                  1    1      12 legs (EQ max 12 legs)[br]
                 In most cases, we would set this to be 11, but for some configurations 
       that require a higher [br] 
                 Ron value, we need to reduce the number of static legs enabled so that 
       fast corner can hit [br] 
                 the higher Ron target value.
     */
    UINT32 lvlshft_holden : 1;
    /* lvlshft_holden - Bits[4:4], RW, default = 1'b0 
       level shift hold enable[br]
                            Holds the HV control values and power down mode the level 
       shifters.[br] 
                            Apply '1' after training.  Slow timing - not advised for 
       fast enabling 
     */
    UINT32 rsvd_5 : 1;
    UINT32 odtsegmentenable : 3;
    /* odtsegmentenable - Bits[8:6], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.  [br]
                            After that, a shift register will determine the enabled 
       segments 
     */
    UINT32 datasegmentenable : 3;
    /* datasegmentenable - Bits[11:9], RW, default = 3'b111 
       This will tell which  segments are enabled out of reset.
     */
    UINT32 longodtr2w : 1;
    /* longodtr2w - Bits[12:12], RW, default = 1'b1 
       When set, it will extends ODT by 1 qclk on read to write turnarounds. hsd 230773
     */
    UINT32 spare2 : 1;
    /* spare2 - Bits[13:13], RW, default = 1'b0 
       Spare2
     */
    UINT32 imodebiasvrefen : 1;
    /* imodebiasvrefen - Bits[14:14], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasrxbiastrim : 3;
    /* imodebiasrxbiastrim - Bits[17:15], RW, default = 3'b001 
       imodebias control. Also used for rxbiasana
     */
    UINT32 spare : 1;
    /* spare - Bits[18:18], RW, default = 1'b0 
       Spare
     */
    UINT32 imodebiasdfxddr4legup : 1;
    /* imodebiasdfxddr4legup - Bits[19:19], RW, default = 1'b1 
       imodebias control
     */
    UINT32 imodebiasdfxlegdn : 1;
    /* imodebiasdfxlegdn - Bits[20:20], RW, default = 1'b1 
       imodebias control
     */
    UINT32 ddrcrctlecapen : 2;
    /* ddrcrctlecapen - Bits[22:21], RW, default = 2'b00 
       ctle capacitor setting
     */
    UINT32 ddrcrctleresen : 2;
    /* ddrcrctleresen - Bits[24:23], RW, default = 2'b11 
       ctle resistor setting
     */
    UINT32 pcasbiasclosedloopen : 1;
    /* pcasbiasclosedloopen - Bits[25:25], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiassel : 1;
    /* rxbiassel - Bits[26:26], RW, default = 1'b0 
       RxBias CR
     */
    UINT32 rxbiasfoldedlegtrim : 2;
    /* rxbiasfoldedlegtrim - Bits[28:27], RW, default = 2'b00 
       RxBias CR
     */
    UINT32 rxbiasgcncomp : 2;
    /* rxbiasgcncomp - Bits[30:29], RW, default = 2'b01 
       RxBias CR
     */
    UINT32 postambleenable : 1;
    /* postambleenable - Bits[31:31], RW, default = 1'h0 
       Spare
     */
  } Bits;
  UINT32 Data;
} DATACONTROL3N1_6_FNV_DDRIO_COMP_STRUCT;


/* VSSHIORVREFCONTROLN1_6_FNV_DDRIO_COMP_REG supported on:                    */
/*       EKV (0x401B0FF8)                                                     */
/* Register default value:              0x004D8238                            */
#define VSSHIORVREFCONTROLN1_6_FNV_DDRIO_COMP_REG 0x050E4FF8
/* Struct format extracted from XML file EKV\1.22.0.EKV.xml.
 * VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, 
 * only. Multicast read for CH012 and CH345 versions are not supported. 
 */
typedef union {
  struct {
    UINT32 vsshiorvrefctl : 24;
    /* vsshiorvrefctl - Bits[23:0], RW, default = 24'h4d8238 
         Channel 0 fubs : VssHi adjust setting. Channel1 fubs: DIMM VREF adjust 
       settings.[br] 
       [br]
               VssHi Field Description: [br]
       [br]
                Field          Bits    Description[br]
               -------         ----    
       ---------------------------------------------------------------------------------------------------------------------------------------------------------------[br] 
               SelCode          23     Selects the code to output:  {0: Code, 1: 
       TCode}[br] 
               GainBoost        22     Enable gain boost is panic mode by updating 
       code/tcode   [br] 
               PanicVoltage  21:18  Unsigned integer controlling the voltage error on 
       VssHi that will trigger the panic driver.  Step size of VccDDQ/192 (0 to 
       117mV)[br] 
               CloseLoop        17     Enables the VssHi close loop tracking [br]
               PanicEn          16     Enables the VssHi Panic Driver[br]
               BWError          15:14  Limits the loop gain (ie: difference between 
       code and tcode) to +/- 2^(SlowBWError)[br] 
               OpenLoop         13     Operates VssHi in open loop mode with the target 
       Vref code directly driving the output DAC with no feedback involved[br] 
               SampleDivider    12:10  Controls the loop bandwidth by dividing down the 
       input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3: Qclk/8, 4: Qclk/16, 5: Qclk/32, 
       6: Qclk/64, 7: Qclk/128}[br] 
               LoBWDivider      9:8    For the slow integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               HiBWDivider      7:6    For the fast integrator, selects the net number 
       of samples in a given direction to trip the filter.  {0: 4 samples, 1: 16 
       samples, 2: 32 samples, 3: 64 samples}[br] 
               Target           5:0    Unsigned integer controlling the target VssHi 
       voltage.  Step size of VccDDQ/192 and starting value of VccDDQ*20/192 
     */
    UINT32 rsvd_24 : 8;
  } Bits;
  UINT32 Data;
} VSSHIORVREFCONTROLN1_6_FNV_DDRIO_COMP_STRUCT;




#endif /* FNV_DDRIO_COMP_h */
