//
// This file contains 'Framework Code' and is licensed as such
// under the terms of your license agreement with Intel or your
// vendor.  This file may not be modified, except as allowed by
// additional terms of your license agreement.
//
// **************************************************************************
// *                                                                        *
// *      Intel Restricted Secret                                           *
// *                                                                        *
// *      Reference Code                                                    *
// *                                                                        *
// *      Copyright (c) 2007-2016, Intel Corporation.                       *
// *                                                                        *
// *      This software and associated documentation (if any) is furnished  *
// *      under a license and may only be used or copied in accordance      *
// *      with the terms of the license. Except as permitted by such        *
// *      license, no part of this software or documentation may be         *
// *      reproduced, stored in a retrieval system, or transmitted in any   *
// *      form or by any means without the express written consent of       *
// *      Intel Corporation.                                                *
// *                                                                        *
// *      This program has been developed by Intel Corporation.             *
// *      Licensee has Intel's permission to incorporate this source code   *
// *      into their product, royalty free.  This source code may NOT be    *
// *      redistributed to anyone without Intel's written permission.       *
// *                                                                        *
// *      Intel specifically disclaims all warranties, express or           *
// *      implied, and all liability, including consequential and other     *
// *      indirect damages, for the use of this code, including liability   *
// *      for infringement of any proprietary rights, and including the     *
// *      warranties of merchantability and fitness for a particular        *
// *      purpose.  Intel does not assume any responsibility for any        *
// *      errors which may appear in this code nor any responsibility to    *
// *      update it.                                                        *
// *                                                                        *
// **************************************************************************
// **************************************************************************
// *                                                                        *
// *  PURPOSE:                                                              *
// *                                                                        *
// *      This file contains Silicon register definitions.                  *
// *                                                                        *
// **************************************************************************
//
/* Date Stamp: 9/13/2016 */

#ifndef IIO_PERFMON_h
#define IIO_PERFMON_h

#include "DataTypes.h"

/* Device and Function specifications:                                        */
/* For all target CPUs:                                                       */
/* IIO_PERFMON_DEV 5                                                          */
/* IIO_PERFMON_FUN 6                                                          */

/* VID_IIO_PERFMON_REG supported on:                                          */
/*       SKX_A0 (0x2012E000)                                                  */
/*       SKX (0x2012E000)                                                     */
/* Register default value:              0x8086                                */
#define VID_IIO_PERFMON_REG 0x11052000
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x000
 */
typedef union {
  struct {
    UINT16 vendor_identification_number : 16;
    /* vendor_identification_number - Bits[15:0], RO, default = 16'b1000000010000110 
       The value is assigned by PCI-SIG to Intel.
     */
  } Bits;
  UINT16 Data;
} VID_IIO_PERFMON_STRUCT;


/* DID_IIO_PERFMON_REG supported on:                                          */
/*       SKX_A0 (0x2012E002)                                                  */
/*       SKX (0x2012E002)                                                     */
/* Register default value:              0x2037                                */
#define DID_IIO_PERFMON_REG 0x11052002
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x002
 */
typedef union {
  struct {
    UINT16 device_identification_number : 16;
    /* device_identification_number - Bits[15:0], RO, default = 16'b0010000000110111 
       //TODO_HSXA0_SYNC
       Device ID values vary from function to function. Bits 15:8 are equal to 0x0E for 
       Ivytown. The following list is a breakdown of the function groups.0x0E00 - 
       0x0E1F : PCI Express and DMI ports 
       0x0E20 - 0x0E3F : IO Features (CBDMA, APIC, VT, RAS, LT)
       0x0E40 - 0x0E5F : Performance Monitors
       0x0E60 - 0x0E7F : DFX
       0x0E80 - 0x0E9F : Quick Path Interface
       0x0EA0 - 0x0EBF : Home Agent/Memory Controller
       0x0EC0 - 0x0EDF : Power Management
       0x0EE0 - 0x0EFF : Cbo/Ring
       //TODO_HSXA0_SYNC
       //SKX:Oct 18 2012: Post HSX sync values should be as below
       Device ID values vary from function to function. Bits 15:8 are equal to 0x2F for 
       the processor. The following list is a breakdown of the function groups. 
       0x2F00 - 0x2F1F : PCI Express and DMI ports
       0x2F20 - 0x2F3F : IO Features (CBDMA, APIC, VT, RAS, Intel TXT)
       0x2F40 - 0x2F5F : Performance Monitors
       0x2F60 - 0x2F7F : DFX
       0x2F80 - 0x2F9F : Intel Quick Path Interface
       0x2FA0 - 0x2FBF : Home Agent/Memory Controller
       0x2FC0 - 0x2FDF : Power Management
       0x2FE0 - 0x2FFF : Cbo/Ring
       
     */
  } Bits;
  UINT16 Data;
} DID_IIO_PERFMON_STRUCT;


/* PCICMD_IIO_PERFMON_REG supported on:                                       */
/*       SKX_A0 (0x2012E004)                                                  */
/*       SKX (0x2012E004)                                                     */
/* Register default value:              0x0000                                */
#define PCICMD_IIO_PERFMON_REG 0x11052004
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x004
 */
typedef union {
  struct {
    UINT16 io_space_enable : 1;
    /* io_space_enable - Bits[0:0], RO, default = 1'b0 
       Hardwired to 0 since these devices don't decode any IO BARs
     */
    UINT16 memory_space_enable : 1;
    /* memory_space_enable - Bits[1:1], RO, default = 1'b0 
       Hardwired to 0 since these devices don't decode any memory BARs
     */
    UINT16 bus_master_enable : 1;
    /* bus_master_enable - Bits[2:2], RO, default = 1'b0 
       Hardwired to 0 since these devices don't generate any transactions
     */
    UINT16 special_cycle_enable : 1;
    /* special_cycle_enable - Bits[3:3], RO, default = 1'b0 
       Not applicable. Hardwired to 0.
     */
    UINT16 memory_write_and_invalidate_enable : 1;
    /* memory_write_and_invalidate_enable - Bits[4:4], RO, default = 1'b0 
       Not applicable to internal devices. Hardwired to 0.
     */
    UINT16 vga_palette_snoop_enable : 1;
    /* vga_palette_snoop_enable - Bits[5:5], RO, default = 1'b0 
       Not applicable to internal devices. Hardwired to 0.
     */
    UINT16 parity_error_response : 1;
    /* parity_error_response - Bits[6:6], RO, default = 1'b0 
       This bit has no impact on error reporting from these devices
     */
    UINT16 idsel_stepping_wait_cycle_control : 1;
    /* idsel_stepping_wait_cycle_control - Bits[7:7], RO, default = 1'b0 
       Not applicable to internal devices. Hardwired to 0.
     */
    UINT16 serr_enable : 1;
    /* serr_enable - Bits[8:8], RO, default = 1'b0 
       This bit has no impact on error reporting from these devices
     */
    UINT16 fast_back_to_back_enable : 1;
    /* fast_back_to_back_enable - Bits[9:9], RO, default = 1'b0 
       Not applicable to PCI Express and is hardwired to 0
     */
    UINT16 intx_disable : 1;
    /* intx_disable - Bits[10:10], RO, default = 1'b0 
       N/A for these devices
     */
    UINT16 rsvd : 5;
    /* rsvd - Bits[15:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} PCICMD_IIO_PERFMON_STRUCT;


/* PCISTS_IIO_PERFMON_REG supported on:                                       */
/*       SKX_A0 (0x2012E006)                                                  */
/*       SKX (0x2012E006)                                                     */
/* Register default value:              0x0010                                */
#define PCISTS_IIO_PERFMON_REG 0x11052006
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x006
 */
typedef union {
  struct {
    UINT16 rsvd_0 : 3;
    /* rsvd_0 - Bits[2:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 intx_status : 1;
    /* intx_status - Bits[3:3], RO, default = 1'b0 
       Hardwired to 0
     */
    UINT16 capabilities_list : 1;
    /* capabilities_list - Bits[4:4], RO, default = 1'b1 
       This bit indicates the presence of a capabilities list structure
     */
    UINT16 pci66mhz_capable : 1;
    /* pci66mhz_capable - Bits[5:5], RO, default = 1'b0 
       Not applicable to PCI Express. Hardwired to 0.
     */
    UINT16 rsvd_6 : 1;
    /* rsvd_6 - Bits[6:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 fast_back_to_back : 1;
    /* fast_back_to_back - Bits[7:7], RO, default = 1'b0 
       Not applicable to PCI Express. Hardwired to 0.
     */
    UINT16 master_data_parity_error : 1;
    /* master_data_parity_error - Bits[8:8], RO, default = 1'b0 
       Hardwired to 0
     */
    UINT16 devsel_timing : 2;
    /* devsel_timing - Bits[10:9], RO, default = 2'b00 
       Not applicable to PCI Express. Hardwired to 0.
     */
    UINT16 signaled_target_abort : 1;
    /* signaled_target_abort - Bits[11:11], RO, default = 1'b0 
       Hardwired to 0
     */
    UINT16 received_target_abort : 1;
    /* received_target_abort - Bits[12:12], RO, default = 1'b0 
       Hardwired to 0
     */
    UINT16 received_master_abort : 1;
    /* received_master_abort - Bits[13:13], RO, default = 1'b0 
       Hardwired to 0
     */
    UINT16 signaled_system_error : 1;
    /* signaled_system_error - Bits[14:14], RO, default = 1'b0 
       Hardwired to 0
     */
    UINT16 detected_parity_error : 1;
    /* detected_parity_error - Bits[15:15], RO, default = 1'b0 
       This bit is set when the device receives a packet on the primary side with an 
       uncorrectable data error (including a packet with poison bit set) or an 
       uncorrectable address/control parity error. The setting of this bit is 
       regardless of the Parity Error Response bit (PERRE) in the PCICMD register. 
       R2PCIe will never set this bit. 
     */
  } Bits;
  UINT16 Data;
} PCISTS_IIO_PERFMON_STRUCT;


/* RID_IIO_PERFMON_REG supported on:                                          */
/*       SKX_A0 (0x1012E008)                                                  */
/*       SKX (0x1012E008)                                                     */
/* Register default value:              0x00                                  */
#define RID_IIO_PERFMON_REG 0x11051008
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * Revision ID
 */
typedef union {
  struct {
    UINT8 revision_id : 8;
    /* revision_id - Bits[7:0], RO, default = 8'h0 
       
       	  Revision ID.
       	
     */
  } Bits;
  UINT8 Data;
} RID_IIO_PERFMON_STRUCT;


/* CCR_N0_IIO_PERFMON_REG supported on:                                       */
/*       SKX_A0 (0x1012E009)                                                  */
/*       SKX (0x1012E009)                                                     */
/* Register default value:              0x00                                  */
#define CCR_N0_IIO_PERFMON_REG 0x11051009
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * Class Code Register
 */
typedef union {
  struct {
    UINT8 interface : 8;
    /* interface - Bits[7:0], RO, default = 8'h0 
       
       	  Base revision.
       	
     */
  } Bits;
  UINT8 Data;
} CCR_N0_IIO_PERFMON_STRUCT;


/* CCR_N1_IIO_PERFMON_REG supported on:                                       */
/*       SKX_A0 (0x2012E00A)                                                  */
/*       SKX (0x2012E00A)                                                     */
/* Register default value:              0x1101                                */
#define CCR_N1_IIO_PERFMON_REG 0x1105200A
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * Class Code Register
 */
typedef union {
  struct {
    UINT16 sub_class : 8;
    /* sub_class - Bits[7:0], RO, default = 8'h1 
       
       	  Base revision.
       	
     */
    UINT16 base_class : 8;
    /* base_class - Bits[15:8], RO, default = 8'h11 
       
       	  Base revision.
       	
     */
  } Bits;
  UINT16 Data;
} CCR_N1_IIO_PERFMON_STRUCT;


/* CLSR_IIO_PERFMON_REG supported on:                                         */
/*       SKX_A0 (0x1012E00C)                                                  */
/*       SKX (0x1012E00C)                                                     */
/* Register default value:              0x00                                  */
#define CLSR_IIO_PERFMON_REG 0x1105100C
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x00c
 */
typedef union {
  struct {
    UINT8 cacheline_size : 8;
    /* cacheline_size - Bits[7:0], RW, default = 8'b00000000 
       This register is set as RW for compatibility reasons only. Cacheline size for 
       processor is always 64B. 
     */
  } Bits;
  UINT8 Data;
} CLSR_IIO_PERFMON_STRUCT;


/* HDR_IIO_PERFMON_REG supported on:                                          */
/*       SKX_A0 (0x1012E00E)                                                  */
/*       SKX (0x1012E00E)                                                     */
/* Register default value:              0x80                                  */
#define HDR_IIO_PERFMON_REG 0x1105100E
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x00e
 */
typedef union {
  struct {
    UINT8 configuration_layout : 7;
    /* configuration_layout - Bits[6:0], RO, default = 7'b0000000 
       This field identifies the format of the configuration header layout. It is Type 
       0 for all these devices. The default is 00h, indicating a 'endpoint device'. 
     */
    UINT8 multi_function_device : 1;
    /* multi_function_device - Bits[7:7], RO, default = 1'b1 
       This bit defaults to 1b since all these devices are multi-function
     */
  } Bits;
  UINT8 Data;
} HDR_IIO_PERFMON_STRUCT;


/* SVID_IIO_PERFMON_REG supported on:                                         */
/*       SKX_A0 (0x2012E02C)                                                  */
/*       SKX (0x2012E02C)                                                     */
/* Register default value:              0x0000                                */
#define SVID_IIO_PERFMON_REG 0x1105202C
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x02c
 */
typedef union {
  struct {
    UINT16 subsystem_vendor_identification_number : 16;
    /* subsystem_vendor_identification_number - Bits[15:0], RW_O, default = 16'b0000000000000000 
       The default value specifies Intel but can be set to any value once after reset.
     */
  } Bits;
  UINT16 Data;
} SVID_IIO_PERFMON_STRUCT;


/* SDID_IIO_PERFMON_REG supported on:                                         */
/*       SKX_A0 (0x2012E02E)                                                  */
/*       SKX (0x2012E02E)                                                     */
/* Register default value:              0x0000                                */
#define SDID_IIO_PERFMON_REG 0x1105202E
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x02e
 */
typedef union {
  struct {
    UINT16 subsystem_device_identification_number : 16;
    /* subsystem_device_identification_number - Bits[15:0], RW_O, default = 16'b0000000000000000 
       Assigned by the subsystem vendor to uniquely identify the subsystem
     */
  } Bits;
  UINT16 Data;
} SDID_IIO_PERFMON_STRUCT;


/* CAPPTR_IIO_PERFMON_REG supported on:                                       */
/*       SKX_A0 (0x1012E034)                                                  */
/*       SKX (0x1012E034)                                                     */
/* Register default value:              0x40                                  */
#define CAPPTR_IIO_PERFMON_REG 0x11051034
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x034
 */
typedef union {
  struct {
    UINT8 capability_pointer : 8;
    /* capability_pointer - Bits[7:0], RO, default = 8'b01000000 
       Points to the first capability structure for the device which is the PCIe 
       capability. 
     */
  } Bits;
  UINT8 Data;
} CAPPTR_IIO_PERFMON_STRUCT;


/* INTL_IIO_PERFMON_REG supported on:                                         */
/*       SKX_A0 (0x1012E03C)                                                  */
/*       SKX (0x1012E03C)                                                     */
/* Register default value:              0x00                                  */
#define INTL_IIO_PERFMON_REG 0x1105103C
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x03c
 */
typedef union {
  struct {
    UINT8 interrupt_line : 8;
    /* interrupt_line - Bits[7:0], RO, default = 8'b00000000 
       N/A for these devices
     */
  } Bits;
  UINT8 Data;
} INTL_IIO_PERFMON_STRUCT;


/* INTPIN_IIO_PERFMON_REG supported on:                                       */
/*       SKX_A0 (0x1012E03D)                                                  */
/*       SKX (0x1012E03D)                                                     */
/* Register default value:              0x00                                  */
#define INTPIN_IIO_PERFMON_REG 0x1105103D
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x03d
 */
typedef union {
  struct {
    UINT8 interrupt_pin : 8;
    /* interrupt_pin - Bits[7:0], RO, default = 8'b00000000 
       N/A since these devices do not generate any interrupt on their own
     */
  } Bits;
  UINT8 Data;
} INTPIN_IIO_PERFMON_STRUCT;


/* MINGNT_IIO_PERFMON_REG supported on:                                       */
/*       SKX_A0 (0x1012E03E)                                                  */
/*       SKX (0x1012E03E)                                                     */
/* Register default value:              0x00                                  */
#define MINGNT_IIO_PERFMON_REG 0x1105103E
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x03e
 */
typedef union {
  struct {
    UINT8 mgv : 8;
    /* mgv - Bits[7:0], RO, default = 8'b00000000 
       The Device does not burst as a PCI compliant master.
     */
  } Bits;
  UINT8 Data;
} MINGNT_IIO_PERFMON_STRUCT;


/* MAXLAT_IIO_PERFMON_REG supported on:                                       */
/*       SKX_A0 (0x1012E03F)                                                  */
/*       SKX (0x1012E03F)                                                     */
/* Register default value:              0x00                                  */
#define MAXLAT_IIO_PERFMON_REG 0x1105103F
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x03f
 */
typedef union {
  struct {
    UINT8 mlv : 8;
    /* mlv - Bits[7:0], RO, default = 8'b00000000 
       The Device has no specific requirements for how often it needs to access the PCI 
       bus. 
     */
  } Bits;
  UINT8 Data;
} MAXLAT_IIO_PERFMON_STRUCT;


/* PXPCAPID_IIO_PERFMON_REG supported on:                                     */
/*       SKX_A0 (0x1012E040)                                                  */
/*       SKX (0x1012E040)                                                     */
/* Register default value:              0x10                                  */
#define PXPCAPID_IIO_PERFMON_REG 0x11051040
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x040
 */
typedef union {
  struct {
    UINT8 capability_id : 8;
    /* capability_id - Bits[7:0], RO, default = 8'b00010000 
       Provides the PCI Express capability ID assigned by PCI-SIG.
     */
  } Bits;
  UINT8 Data;
} PXPCAPID_IIO_PERFMON_STRUCT;


/* PXPNXTPTR_IIO_PERFMON_REG supported on:                                    */
/*       SKX_A0 (0x1012E041)                                                  */
/*       SKX (0x1012E041)                                                     */
/* Register default value:              0x00                                  */
#define PXPNXTPTR_IIO_PERFMON_REG 0x11051041
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x041
 */
typedef union {
  struct {
    UINT8 next_ptr : 8;
    /* next_ptr - Bits[7:0], RO, default = 8'b00000000 
       This field is set to the PCI PM capability.
     */
  } Bits;
  UINT8 Data;
} PXPNXTPTR_IIO_PERFMON_STRUCT;


/* PXPCAP_IIO_PERFMON_REG supported on:                                       */
/*       SKX_A0 (0x2012E042)                                                  */
/*       SKX (0x2012E042)                                                     */
/* Register default value:              0x0092                                */
#define PXPCAP_IIO_PERFMON_REG 0x11052042
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x042
 */
typedef union {
  struct {
    UINT16 capability_version : 4;
    /* capability_version - Bits[3:0], RO, default = 4'b0010 
       This field identifies the version of the PCI Express capability structure. Set 
       to 2h for PCI Express and DMA devices for compliance with the extended base 
       registers. 
     */
    UINT16 device_port_type : 4;
    /* device_port_type - Bits[7:4], RO, default = 4'b1001 
       This field identifies the type of device. It is set to for the DMA to indicate 
       root complex integrated endpoint device. 
     */
    UINT16 slot_implemented_n_a : 1;
    /* slot_implemented_n_a - Bits[8:8], RO, default = 1'b0  */
    UINT16 interrupt_message_number_n_a : 5;
    /* interrupt_message_number_n_a - Bits[13:9], RO, default = 5'b00000  */
    UINT16 rsvd : 2;
    /* rsvd - Bits[15:14], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} PXPCAP_IIO_PERFMON_STRUCT;


/* IRP_PMONFILTER_N0_IIO_PERFMON_REG supported on:                            */
/*       SKX_A0 (0x4012E080)                                                  */
/*       SKX (0x4012E080)                                                     */
/* Register default value:              0x00000000                            */
#define IRP_PMONFILTER_N0_IIO_PERFMON_REG 0x11054080
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * Special filtering controls for IRP perfmons
 */
typedef union {
  struct {
    UINT32 orderingq : 5;
    /* orderingq - Bits[4:0], RW, default = 5'b00000 
       Select a specific source ordering queue to monitor. Certain events allow us to 
       filter based on a given source. For example, we can count the number of reads 
       out of a given source, or the number of outstanding writes in the write cache 
       for a given source. This is to be used in conjunction with the "ORDERING_QUEUE" 
       filter selection for events that support it. Only a single ordering queue filter 
       can be setup at a given time, and this is used across the two IRPs and for all 
       the counters. 
     */
    UINT32 p2p_tgt : 6;
    /* p2p_tgt - Bits[10:5], RW, default = 6'b00000 
       Select a particular p2p target to count. the 6 bits are compared against 
       txn_ncdest[5:0] from the p2p block, so program according to that format. 
     */
    UINT32 rsvd : 21;
    /* rsvd - Bits[31:11], n/a, default = n/a 
       This field was split. It's value spans this field and the field of similar name 
       in the next/preceding struct. 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} IRP_PMONFILTER_N0_IIO_PERFMON_STRUCT;




/* PXPENHCAP_IIO_PERFMON_REG supported on:                                    */
/*       SKX_A0 (0x4012E100)                                                  */
/*       SKX (0x4012E100)                                                     */
/* Register default value:              0x00000000                            */
#define PXPENHCAP_IIO_PERFMON_REG 0x11054100
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * This field points to the next Capability in extended configuration space.
 */
typedef union {
  struct {
    UINT32 capability_id : 16;
    /* capability_id - Bits[15:0], RO, default = 16'b0000000000000000 
       Indicates there are no capability structures in the enhanced configuration 
       space. 
     */
    UINT32 capability_version : 4;
    /* capability_version - Bits[19:16], RO, default = 4'b0000 
       Indicates there are no capability structures in the enhanced configuration 
       space. 
     */
    UINT32 next_capability_offset : 12;
    /* next_capability_offset - Bits[31:20], RO, default = 12'b000000000000  */
  } Bits;
  UINT32 Data;
} PXPENHCAP_IIO_PERFMON_STRUCT;


/* PERFSTAT_IIO_PERFMON_REG supported on:                                     */
/*       SKX_A0 (0x4012E104)                                                  */
/*       SKX (0x4012E104)                                                     */
/* Register default value:              0x00000000                            */
#define PERFSTAT_IIO_PERFMON_REG 0x11054104
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x104
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 4;
    /* rsvd_0 - Bits[3:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 xp3mp0stat : 1;
    /* xp3mp0stat - Bits[4:4], RW1C, default = 1'b0 
       1
     */
    UINT32 xp3mp1stat : 1;
    /* xp3mp1stat - Bits[5:5], RW1C, default = 1'b0 
       1
     */
    UINT32 xp7mp0stat : 1;
    /* xp7mp0stat - Bits[6:6], RW1C, default = 1'b0 
       1
     */
    UINT32 xp7mp1stat : 1;
    /* xp7mp1stat - Bits[7:7], RW1C, default = 1'b0 
       1
     */
    UINT32 rsvd_8 : 6;
    /* rsvd_8 - Bits[13:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 vtdpm0stat : 1;
    /* vtdpm0stat - Bits[14:14], RW1C, default = 1'b0  */
    UINT32 vtdpm1stat : 1;
    /* vtdpm1stat - Bits[15:15], RW1C, default = 1'b0  */
    UINT32 rsvd_16 : 16;
    /* rsvd_16 - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PERFSTAT_IIO_PERFMON_STRUCT;


/* PERFCON_IIO_PERFMON_REG supported on:                                      */
/*       SKX_A0 (0x4012E108)                                                  */
/*       SKX (0x4012E108)                                                     */
/* Register default value:              0x00000000                            */
#define PERFCON_IIO_PERFMON_REG 0x11054108
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * The PERFCON register is a global register used to clear all of the counters.
 */
typedef union {
  struct {
    UINT32 grst : 1;
    /* grst - Bits[0:0], RW, default = 1'b0 
       Setting this bit to a logic 1 will reset the following bit fields in all PerfMon 
       blocks 
       throughout the component.
       xxxPMDx.CNT,
       xxxPMR.OVS,
       xxxPMR.CMPSTAT,
       xxxPMCx.PMCx registers,
       and count mode state latch selected by xxxPMR.CNTMD = 01.
       Where xxx is the cluster prefix name.
       Note: Software must clear this bit after setting it, otherwise the PerfMons
       remain in a reset state.
     */
    UINT32 gce : 1;
    /* gce - Bits[1:1], RW, default = 1'b0 
       This bit is AND'ed with the PMR.CENS mux enable selection.
       0: Disable all counters.
       1: Enable local selection of CENS.
     */
    UINT32 rsvd : 30;
    /* rsvd - Bits[31:2], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PERFCON_IIO_PERFMON_STRUCT;






























/* VISACTLADDR_IIO_PERFMON_REG supported on:                                  */
/*       SKX_A0 (0x4012E400)                                                  */
/*       SKX (0x4012E400)                                                     */
/* Register default value:              0x00000000                            */
#define VISACTLADDR_IIO_PERFMON_REG 0x11054400
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * generated by critter 05_6_0x400
 */
typedef union {
  struct {
    UINT32 visa_addr : 32;
    /* visa_addr - Bits[31:0], RW_L, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} VISACTLADDR_IIO_PERFMON_STRUCT;


/* VISA_RING_SEL_IIO_PERFMON_REG supported on:                                */
/*       SKX_A0 (0x4012E404)                                                  */
/*       SKX (0x4012E404)                                                     */
/* Register default value:              0x00000000                            */
#define VISA_RING_SEL_IIO_PERFMON_REG 0x11054404
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 * Selects between slow and fast Visa rings on a per lane basis.
 */
typedef union {
  struct {
    UINT32 visa_ring_sel : 9;
    /* visa_ring_sel - Bits[8:0], RW_L, default = 9'b0  */
    UINT32 rsvd : 23;
    /* rsvd - Bits[31:9], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} VISA_RING_SEL_IIO_PERFMON_STRUCT;


/* RPPIOERR_DBG_CTL_IIO_PERFMON_REG supported on:                             */
/*       SKX_A0 (0x4012EC00)                                                  */
/*       SKX (0x4012EC00)                                                     */
/* Register default value:              0x00000000                            */
#define RPPIOERR_DBG_CTL_IIO_PERFMON_REG 0x11054C00
/* Struct format extracted from XML file SKX\1.5.6.CFG.xml.
 *  This register is for addendum change for HSX ECO b255818. We control and 
 * capture the event of error response granted both link at same cycle. 
 */
typedef union {
  struct {
    UINT32 sel_link0 : 1;
    /* sel_link0 - Bits[0:0], RW_L, default = 1'b0 
       select link0 header to report if we get both link0 and link1 error at same 
       cycle. 
     */
    UINT32 det_2ln_errs : 1;
    /* det_2ln_errs - Bits[1:1], RW1C, default = 1'b0 
       detected errors from 2 links at same cycle. Write 1'b0 to clear.
     */
    UINT32 rsvd : 30;
    /* rsvd - Bits[31:2], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RPPIOERR_DBG_CTL_IIO_PERFMON_STRUCT;


#endif /* IIO_PERFMON_h */
