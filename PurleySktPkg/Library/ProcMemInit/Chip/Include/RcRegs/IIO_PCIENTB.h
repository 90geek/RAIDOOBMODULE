//
// This file contains 'Framework Code' and is licensed as such
// under the terms of your license agreement with Intel or your
// vendor.  This file may not be modified, except as allowed by
// additional terms of your license agreement.
//
// **************************************************************************
// *                                                                        *
// *      Intel Restricted Secret                                           *
// *                                                                        *
// *      Reference Code                                                    *
// *                                                                        *
// *      Copyright (c) 2007-2016, Intel Corporation.                       *
// *                                                                        *
// *      This software and associated documentation (if any) is furnished  *
// *      under a license and may only be used or copied in accordance      *
// *      with the terms of the license. Except as permitted by such        *
// *      license, no part of this software or documentation may be         *
// *      reproduced, stored in a retrieval system, or transmitted in any   *
// *      form or by any means without the express written consent of       *
// *      Intel Corporation.                                                *
// *                                                                        *
// *      This program has been developed by Intel Corporation.             *
// *      Licensee has Intel's permission to incorporate this source code   *
// *      into their product, royalty free.  This source code may NOT be    *
// *      redistributed to anyone without Intel's written permission.       *
// *                                                                        *
// *      Intel specifically disclaims all warranties, express or           *
// *      implied, and all liability, including consequential and other     *
// *      indirect damages, for the use of this code, including liability   *
// *      for infringement of any proprietary rights, and including the     *
// *      warranties of merchantability and fitness for a particular        *
// *      purpose.  Intel does not assume any responsibility for any        *
// *      errors which may appear in this code nor any responsibility to    *
// *      update it.                                                        *
// *                                                                        *
// **************************************************************************
// **************************************************************************
// *                                                                        *
// *  PURPOSE:                                                              *
// *                                                                        *
// *      This file contains Silicon register definitions.                  *
// *                                                                        *
// **************************************************************************
//
/* Date Stamp: 9/13/2016 */

#ifndef IIO_PCIENTB_h
#define IIO_PCIENTB_h

#include "DataTypes.h"

/* Device and Function specifications:                                        */
/* For all target CPUs:                                                       */
/* IIO_PCIENTB_DEV 0                                                          */
/* IIO_PCIENTB_FUN 0                                                          */

/* VID_IIO_PCIENTB_REG supported on:                                          */
/*       SKX_A0 (0x20100000)                                                  */
/*       SKX (0x20100000)                                                     */
/* Register default value:              0x8086                                */
#define VID_IIO_PCIENTB_REG 0x0F002000
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x000
 */
typedef union {
  struct {
    UINT16 vendor_identification_number : 16;
    /* vendor_identification_number - Bits[15:0], RO, default = 16'b1000000010000110 
       The value is assigned by PCI-SIG to Intel.
     */
  } Bits;
  UINT16 Data;
} VID_IIO_PCIENTB_STRUCT;


/* DID_IIO_PCIENTB_REG supported on:                                          */
/*       SKX_A0 (0x20100002)                                                  */
/*       SKX (0x20100002)                                                     */
/* Register default value:              0x2020                                */
#define DID_IIO_PCIENTB_REG 0x0F002002
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x002
 */
typedef union {
  struct {
    UINT16 device_identification_number : 16;
    /* device_identification_number - Bits[15:0], RO_V, default = 16'b0010000000100000 
       //TODO_HSXA0_SYNC
       Device ID values vary from function to function. Bits 15:8 are equal to 0x0E for 
       Ivytown. The following list is a breakdown of the function groups.0x0E00 - 
       0x0E1F : PCI Express and DMI ports 
       0x0E20 - 0x0E3F : IO Features (CBDMA, APIC, VT, RAS, LT)
       0x0E40 - 0x0E5F : Performance Monitors
       0x0E60 - 0x0E7F : DFX
       0x0E80 - 0x0E9F : Quick Path Interface
       0x0EA0 - 0x0EBF : Home Agent/Memory Controller
       0x0EC0 - 0x0EDF : Power Management
       0x0EE0 - 0x0EFF : Cbo/Ring
       //TODO_HSXA0_SYNC
       //SKX:Oct 18 2012: Post HSX sync values should be as below
       Device ID values vary from function to function. Bits 15:8 are equal to 0x2F for 
       the processor. The following list is a breakdown of the function groups. 
       0x2F00 - 0x2F1F : PCI Express and DMI ports
       0x2F20 - 0x2F3F : IO Features (CBDMA, APIC, VT, RAS, Intel TXT)
       0x2F40 - 0x2F5F : Performance Monitors
       0x2F60 - 0x2F7F : DFX
       0x2F80 - 0x2F9F : Intel Quick Path Interface
       0x2FA0 - 0x2FBF : Home Agent/Memory Controller
       0x2FC0 - 0x2FDF : Power Management
       0x2FE0 - 0x2FFF : Cbo/Ring
       Hardware sets this field based on the operating mode of this dev/fn:
       DMI => 0x2020
       PCIe => 0x2030
       Hardware sets this field based on the operating mode of this dev/fn:
       PCIe => 0x2030
       NTB-NTB => 0x201C
       NTB-RP => 0x201B
       
     */
  } Bits;
  UINT16 Data;
} DID_IIO_PCIENTB_STRUCT;


/* PCICMD_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x20100004)                                                  */
/*       SKX (0x20100004)                                                     */
/* Register default value:              0x0000                                */
#define PCICMD_IIO_PCIENTB_REG 0x0F002004
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x004
 */
typedef union {
  struct {
    UINT16 iose : 1;
    /* iose - Bits[0:0], RW_L, default = 1'b0 
       1
     */
    UINT16 mse : 1;
    /* mse - Bits[1:1], RW, default = 1'b0 
       1
     */
    UINT16 bme : 1;
    /* bme - Bits[2:2], RW, default = 1'b0 
       1
     */
    UINT16 sce : 1;
    /* sce - Bits[3:3], RO, default = 1'b0  */
    UINT16 mwie : 1;
    /* mwie - Bits[4:4], RO, default = 1'b0  */
    UINT16 vga_palette_snoop_enable : 1;
    /* vga_palette_snoop_enable - Bits[5:5], RO, default = 1'b0  */
    UINT16 perre : 1;
    /* perre - Bits[6:6], RW, default = 1'b0  */
    UINT16 idsel_stepping_wait_cycle_control : 1;
    /* idsel_stepping_wait_cycle_control - Bits[7:7], RO, default = 1'b0  */
    UINT16 serre : 1;
    /* serre - Bits[8:8], RW, default = 1'b0  */
    UINT16 fast_back_to_back_enable : 1;
    /* fast_back_to_back_enable - Bits[9:9], RO, default = 1'b0  */
    UINT16 interrupt_disable : 1;
    /* interrupt_disable - Bits[10:10], RW, default = 1'b0 
       1
     */
    UINT16 rsvd : 5;
    /* rsvd - Bits[15:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} PCICMD_IIO_PCIENTB_STRUCT;


/* PCISTS_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x20100006)                                                  */
/*       SKX (0x20100006)                                                     */
/* Register default value:              0x0010                                */
#define PCISTS_IIO_PCIENTB_REG 0x0F002006
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x006
 */
typedef union {
  struct {
    UINT16 rsvd_0 : 3;
    /* rsvd_0 - Bits[2:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 intx_status : 1;
    /* intx_status - Bits[3:3], RO_V, default = 1'b0 
       Hardwired to 0
     */
    UINT16 capabilities_list : 1;
    /* capabilities_list - Bits[4:4], RO, default = 1'b1  */
    UINT16 pci66mhz_capable : 1;
    /* pci66mhz_capable - Bits[5:5], RO, default = 1'b0  */
    UINT16 rsvd_6 : 1;
    /* rsvd_6 - Bits[6:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 fast_back_to_back : 1;
    /* fast_back_to_back - Bits[7:7], RO, default = 1'b0  */
    UINT16 mdpe : 1;
    /* mdpe - Bits[8:8], RW1C, default = 1'b0  */
    UINT16 devsel_timing : 2;
    /* devsel_timing - Bits[10:9], RO, default = 2'b00  */
    UINT16 sta : 1;
    /* sta - Bits[11:11], RW1C, default = 1'b0  */
    UINT16 rta : 1;
    /* rta - Bits[12:12], RW1C, default = 1'b0  */
    UINT16 rma : 1;
    /* rma - Bits[13:13], RW1C, default = 1'b0  */
    UINT16 sse : 1;
    /* sse - Bits[14:14], RW1C, default = 1'b0  */
    UINT16 dpe : 1;
    /* dpe - Bits[15:15], RW1C, default = 1'b0  */
  } Bits;
  UINT16 Data;
} PCISTS_IIO_PCIENTB_STRUCT;


/* CLSR_IIO_PCIENTB_REG supported on:                                         */
/*       SKX_A0 (0x1010000C)                                                  */
/*       SKX (0x1010000C)                                                     */
/* Register default value:              0x00                                  */
#define CLSR_IIO_PCIENTB_REG 0x0F00100C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x00c
 */
typedef union {
  struct {
    UINT8 cacheline_size : 8;
    /* cacheline_size - Bits[7:0], RW, default = 8'b00000000 
       This register is set as RW for compatibility reasons only.
     */
  } Bits;
  UINT8 Data;
} CLSR_IIO_PCIENTB_STRUCT;


/* PLAT_IIO_PCIENTB_REG supported on:                                         */
/*       SKX_A0 (0x1010000D)                                                  */
/*       SKX (0x1010000D)                                                     */
/* Register default value:              0x00                                  */
#define PLAT_IIO_PCIENTB_REG 0x0F00100D
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x00d
 */
typedef union {
  struct {
    UINT8 primary_latency_timer : 8;
    /* primary_latency_timer - Bits[7:0], RO, default = 8'b00000000 
       Not applicable to PCI-Express. Hardwired to 00h.
     */
  } Bits;
  UINT8 Data;
} PLAT_IIO_PCIENTB_STRUCT;


/* HDR_IIO_PCIENTB_REG supported on:                                          */
/*       SKX_A0 (0x1010000E)                                                  */
/*       SKX (0x1010000E)                                                     */
/* Register default value:              0x00                                  */
#define HDR_IIO_PCIENTB_REG 0x0F00100E
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x00e
 */
typedef union {
  struct {
    UINT8 cl : 7;
    /* cl - Bits[6:0], RO, default = 7'b0000000 
       1
     */
    UINT8 mfd : 1;
    /* mfd - Bits[7:7], RO, default = 1'b0 
       1
     */
  } Bits;
  UINT8 Data;
} HDR_IIO_PCIENTB_STRUCT;


/* BIST_IIO_PCIENTB_REG supported on:                                         */
/*       SKX_A0 (0x1010000F)                                                  */
/*       SKX (0x1010000F)                                                     */
/* Register default value:              0x00                                  */
#define BIST_IIO_PCIENTB_REG 0x0F00100F
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x00f
 */
typedef union {
  struct {
    UINT8 bist_tests : 8;
    /* bist_tests - Bits[7:0], RO, default = 8'b00000000  */
  } Bits;
  UINT8 Data;
} BIST_IIO_PCIENTB_STRUCT;


/* PB01BASE_0_IIO_PCIENTB_REG supported on:                                   */
/*       SKX_A0 (0x40100010)                                                  */
/*       SKX (0x40100010)                                                     */
/* Register default value:              0x0000000C                            */
#define PB01BASE_0_IIO_PCIENTB_REG 0x0F004010
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x010
 */
typedef union {
  struct {
    UINT32 memory_space_indicator : 1;
    /* memory_space_indicator - Bits[0:0], RO, default = 1'b0  */
    UINT32 type : 2;
    /* type - Bits[2:1], RO, default = 2'b10  */
    UINT32 prefetchable : 1;
    /* prefetchable - Bits[3:3], RO, default = 1'b1  */
    UINT32 rsvd_tgio_pb01base_15_4 : 12;
    /* rsvd_tgio_pb01base_15_4 - Bits[15:4], RO, default = 12'b000000000000  */
    UINT32 primary_bar_0_1_base : 16;
    /* primary_bar_0_1_base - Bits[31:16], RW, default = 16'b0000000000000000  */
  } Bits;
  UINT32 Data;
} PB01BASE_0_IIO_PCIENTB_STRUCT;


/* PB01BASE_1_IIO_PCIENTB_REG supported on:                                   */
/*       SKX_A0 (0x40100014)                                                  */
/*       SKX (0x40100014)                                                     */
/* Register default value:              0x00000000                            */
#define PB01BASE_1_IIO_PCIENTB_REG 0x0F004014
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x014
 */
typedef union {
  struct {
    UINT32 primary_bar_0_1_base : 32;
    /* primary_bar_0_1_base - Bits[31:0], RW, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} PB01BASE_1_IIO_PCIENTB_STRUCT;


/* PB23BASE_0_IIO_PCIENTB_REG supported on:                                   */
/*       SKX_A0 (0x40100018)                                                  */
/*       SKX (0x40100018)                                                     */
/* Register default value:              0x0000000C                            */
#define PB23BASE_0_IIO_PCIENTB_REG 0x0F004018
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x018
 */
typedef union {
  struct {
    UINT32 memory_space_indicator : 1;
    /* memory_space_indicator - Bits[0:0], RO, default = 1'b0  */
    UINT32 type : 2;
    /* type - Bits[2:1], RO, default = 2'b10  */
    UINT32 prefetchable : 1;
    /* prefetchable - Bits[3:3], RO, default = 1'b1  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[11:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 primary_bar_2_3_base : 20;
    /* primary_bar_2_3_base - Bits[31:12], RW_R, default = 20'b00000000000000000000  */
  } Bits;
  UINT32 Data;
} PB23BASE_0_IIO_PCIENTB_STRUCT;


/* PB23BASE_1_IIO_PCIENTB_REG supported on:                                   */
/*       SKX_A0 (0x4010001C)                                                  */
/*       SKX (0x4010001C)                                                     */
/* Register default value:              0x00000000                            */
#define PB23BASE_1_IIO_PCIENTB_REG 0x0F00401C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x01c
 */
typedef union {
  struct {
    UINT32 primary_bar_2_3_base : 32;
    /* primary_bar_2_3_base - Bits[31:0], RW_R, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} PB23BASE_1_IIO_PCIENTB_STRUCT;


/* PB45BASE_0_IIO_PCIENTB_REG supported on:                                   */
/*       SKX_A0 (0x40100020)                                                  */
/*       SKX (0x40100020)                                                     */
/* Register default value:              0x0000000C                            */
#define PB45BASE_0_IIO_PCIENTB_REG 0x0F004020
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x020
 */
typedef union {
  struct {
    UINT32 memory_space_indicator : 1;
    /* memory_space_indicator - Bits[0:0], RO, default = 1'b0  */
    UINT32 type : 2;
    /* type - Bits[2:1], RO, default = 2'b10  */
    UINT32 prefetchable : 1;
    /* prefetchable - Bits[3:3], RO, default = 1'b1  */
    UINT32 rsvd : 8;
    /* rsvd - Bits[11:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 primary_bar_4_5_base : 20;
    /* primary_bar_4_5_base - Bits[31:12], RW_R, default = 20'b00000000000000000000  */
  } Bits;
  UINT32 Data;
} PB45BASE_0_IIO_PCIENTB_STRUCT;


/* PB45BASE_1_IIO_PCIENTB_REG supported on:                                   */
/*       SKX_A0 (0x40100024)                                                  */
/*       SKX (0x40100024)                                                     */
/* Register default value:              0x00000000                            */
#define PB45BASE_1_IIO_PCIENTB_REG 0x0F004024
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x024
 */
typedef union {
  struct {
    UINT32 primary_bar_4_5_base : 32;
    /* primary_bar_4_5_base - Bits[31:0], RW_R, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} PB45BASE_1_IIO_PCIENTB_STRUCT;


/* SVID_IIO_PCIENTB_REG supported on:                                         */
/*       SKX_A0 (0x2010002C)                                                  */
/*       SKX (0x2010002C)                                                     */
/* Register default value:              0x8086                                */
#define SVID_IIO_PCIENTB_REG 0x0F00202C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x02c
 */
typedef union {
  struct {
    UINT16 subsystem_vendor_id : 16;
    /* subsystem_vendor_id - Bits[15:0], RW_O, default = 16'b1000000010000110  */
  } Bits;
  UINT16 Data;
} SVID_IIO_PCIENTB_STRUCT;


/* SDID_IIO_PCIENTB_REG supported on:                                         */
/*       SKX_A0 (0x2010002E)                                                  */
/*       SKX (0x2010002E)                                                     */
/* Register default value:              0x0000                                */
#define SDID_IIO_PCIENTB_REG 0x0F00202E
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x02e
 */
typedef union {
  struct {
    UINT16 subsystem_device_id : 16;
    /* subsystem_device_id - Bits[15:0], RW_O, default = 16'b0000000000000000  */
  } Bits;
  UINT16 Data;
} SDID_IIO_PCIENTB_STRUCT;


/* CAPPTR_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x10100034)                                                  */
/*       SKX (0x10100034)                                                     */
/* Register default value:              0x80                                  */
#define CAPPTR_IIO_PCIENTB_REG 0x0F001034
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x034
 */
typedef union {
  struct {
    UINT8 capability_pointer : 8;
    /* capability_pointer - Bits[7:0], RW_O, default = 8'b10000000 
       Points to the first capability structure for the device which is the PCIe 
       capability. 
     */
  } Bits;
  UINT8 Data;
} CAPPTR_IIO_PCIENTB_STRUCT;


/* INTL_IIO_PCIENTB_REG supported on:                                         */
/*       SKX_A0 (0x1010003C)                                                  */
/*       SKX (0x1010003C)                                                     */
/* Register default value:              0x00                                  */
#define INTL_IIO_PCIENTB_REG 0x0F00103C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x03c
 */
typedef union {
  struct {
    UINT8 interrupt_line : 8;
    /* interrupt_line - Bits[7:0], RW, default = 8'b00000000 
       N/A for these devices
     */
  } Bits;
  UINT8 Data;
} INTL_IIO_PCIENTB_STRUCT;


/* INTPIN_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x1010003D)                                                  */
/*       SKX (0x1010003D)                                                     */
/* Register default value:              0x01                                  */
#define INTPIN_IIO_PCIENTB_REG 0x0F00103D
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x03d
 */
typedef union {
  struct {
    UINT8 intp : 8;
    /* intp - Bits[7:0], RW_O, default = 8'b00000001 
       N/A since these devices do not generate any interrupt on their own
     */
  } Bits;
  UINT8 Data;
} INTPIN_IIO_PCIENTB_STRUCT;


/* MINGNT_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x1010003E)                                                  */
/*       SKX (0x1010003E)                                                     */
/* Register default value:              0x00                                  */
#define MINGNT_IIO_PCIENTB_REG 0x0F00103E
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x03e
 */
typedef union {
  struct {
    UINT8 minimum_grant : 8;
    /* minimum_grant - Bits[7:0], RO, default = 8'b00000000  */
  } Bits;
  UINT8 Data;
} MINGNT_IIO_PCIENTB_STRUCT;


/* MAXLAT_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x1010003F)                                                  */
/*       SKX (0x1010003F)                                                     */
/* Register default value:              0x00                                  */
#define MAXLAT_IIO_PCIENTB_REG 0x0F00103F
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x03f
 */
typedef union {
  struct {
    UINT8 maximum_latency : 8;
    /* maximum_latency - Bits[7:0], RO, default = 8'b00000000  */
  } Bits;
  UINT8 Data;
} MAXLAT_IIO_PCIENTB_STRUCT;


/* DMIRCBAR_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x40100050)                                                  */
/*       SKX (0x40100050)                                                     */
/* Register default value:              0x00000000                            */
#define DMIRCBAR_IIO_PCIENTB_REG 0x0F004050
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x050
 */
typedef union {
  struct {
    UINT32 dmircbaren : 1;
    /* dmircbaren - Bits[0:0], RW_LB, default = 1'b0 
       0: DMIRCBAR is disabled and does not claim any memory
       1: DMIRCBAR memory mapped accesses are claimed and decoded
       Notes:
       Accesses to registers pointed to by the DMIRCBAR, via message channel or JTAG 
       mini-port are not gated by this enable bit i.e. accesses these registers are 
       honored regardless of the setting of this bit. 
       BIOS sets this bit only when it wishes to update the registers in the DMIRCBAR. 
       It must clear this bit when it has finished changing values. This is required to 
       ensure that the registers cannot be changed during an LT lock. This bit is 
       protected by Intel TXT mode, but the registers in DMIRCBAR are not protected 
       except by this bit. 
     */
    UINT32 rsvd : 11;
    /* rsvd - Bits[11:1], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 dmircbar : 20;
    /* dmircbar - Bits[31:12], RW_LB, default = 20'b00000000000000000000 
       This field corresponds to bits 32 to 12 of the base address DMI Root Complex 
       register space. BIOS will program this register resulting in a base address for 
       a 4KB block of contiguous memory address space. This register ensures that a 
       naturally aligned 4KB space is allocated within the first 64GB of addressable 
       memory space. System Software uses this base address to program the DMI Root 
       Complex register set. 
       All the Bits in this register are locked in Intel TXT mode.
     */
  } Bits;
  UINT32 Data;
} DMIRCBAR_IIO_PCIENTB_STRUCT;
















/* MSIXCAPID_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x10100080)                                                  */
/*       SKX (0x10100080)                                                     */
/* Register default value:              0x11                                  */
#define MSIXCAPID_IIO_PCIENTB_REG 0x0F001080
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x080
 */
typedef union {
  struct {
    UINT8 capability_id : 8;
    /* capability_id - Bits[7:0], RO, default = 8'b00010001 
       Assigned by PCI-SIG for MSI-X (CB DMA).
     */
  } Bits;
  UINT8 Data;
} MSIXCAPID_IIO_PCIENTB_STRUCT;


/* MSIXNXTPTR_IIO_PCIENTB_REG supported on:                                   */
/*       SKX_A0 (0x10100081)                                                  */
/*       SKX (0x10100081)                                                     */
/* Register default value:              0x90                                  */
#define MSIXNXTPTR_IIO_PCIENTB_REG 0x0F001081
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x081
 */
typedef union {
  struct {
    UINT8 next_ptr : 8;
    /* next_ptr - Bits[7:0], RW_O, default = 8'b10010000 
       This field is set to 90h for the next capability list (PCI Express capability 
       structure) in the chain. 
     */
  } Bits;
  UINT8 Data;
} MSIXNXTPTR_IIO_PCIENTB_STRUCT;


/* MSIXMSGCTRL_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x20100082)                                                  */
/*       SKX (0x20100082)                                                     */
/* Register default value:              0x0020                                */
#define MSIXMSGCTRL_IIO_PCIENTB_REG 0x0F002082
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x082
 */
typedef union {
  struct {
    UINT16 table_size : 11;
    /* table_size - Bits[10:0], RO_V, default = 11'b00000100000 
       System software reads this field to determine the MSI-X Table Size N, which is 
       encoded as N-1. For example, a returned value of '00000000011' indicates a table 
       size of 4. 
       NTB table size is 4, encoded as a value of 003h
     */
    UINT16 rsvd : 3;
    /* rsvd - Bits[13:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 function_mask : 1;
    /* function_mask - Bits[14:14], RW, default = 1'b0 
       1: all the vectors associated with the NTB are masked, regardless of the per 
       vector mask bit state. 
       0: each vector's mask bit determines whether the vector is masked or not.
       Notes:
       Setting or clearing the MSI-X function mask bit has no effect on the state of 
       the per-vector Mask bit. 
     */
    UINT16 msi_x_enable : 1;
    /* msi_x_enable - Bits[15:15], RW, default = 1'b0 
       Software uses this bit to select between INTx or MSI or MSI-X method for 
       signalinginterrupts from the DMA 
       0: NTB is prohibited from using MSI-X to request service
       1: MSI-X method is chosen for NTB interrupts
       Notes:
       Software must disable INTx and MSI-X for this device when using MSI
     */
  } Bits;
  UINT16 Data;
} MSIXMSGCTRL_IIO_PCIENTB_STRUCT;


/* TABLEOFF_BIR_IIO_PCIENTB_REG supported on:                                 */
/*       SKX_A0 (0x40100084)                                                  */
/*       SKX (0x40100084)                                                     */
/* Register default value:              0x00002000                            */
#define TABLEOFF_BIR_IIO_PCIENTB_REG 0x0F004084
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x084
 */
typedef union {
  struct {
    UINT32 table_bir : 3;
    /* table_bir - Bits[2:0], RO, default = 3'b000 
       CB DMA BAR is at offset 10h in the DMA config space and hence this register is 
       0. 
     */
    UINT32 table_offset : 29;
    /* table_offset - Bits[31:3], RO, default = 29'b00000000000000000010000000000 
       MSI-X Table Structure is at offset 8K from the CB BAR address.
     */
  } Bits;
  UINT32 Data;
} TABLEOFF_BIR_IIO_PCIENTB_STRUCT;


/* PBAOFF_BIR_IIO_PCIENTB_REG supported on:                                   */
/*       SKX_A0 (0x40100088)                                                  */
/*       SKX (0x40100088)                                                     */
/* Register default value:              0x00003000                            */
#define PBAOFF_BIR_IIO_PCIENTB_REG 0x0F004088
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x088
 */
typedef union {
  struct {
    UINT32 pba_bir : 3;
    /* pba_bir - Bits[2:0], RO, default = 3'b000 
       1
     */
    UINT32 table_offset : 29;
    /* table_offset - Bits[31:3], RO, default = 29'b00000000000000000011000000000 
       MSI-X PBA Structure is at offset 12K from the CB BAR address.
     */
  } Bits;
  UINT32 Data;
} PBAOFF_BIR_IIO_PCIENTB_STRUCT;


/* PXPCAPID_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x10100090)                                                  */
/*       SKX (0x10100090)                                                     */
/* Register default value:              0x10                                  */
#define PXPCAPID_IIO_PCIENTB_REG 0x0F001090
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x090
 */
typedef union {
  struct {
    UINT8 capability_id : 8;
    /* capability_id - Bits[7:0], RO, default = 8'b00010000 
       Provides the PCI Express capability ID assigned by PCI-SIG.
     */
  } Bits;
  UINT8 Data;
} PXPCAPID_IIO_PCIENTB_STRUCT;


/* PXPNXTPTR_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x10100091)                                                  */
/*       SKX (0x10100091)                                                     */
/* Register default value:              0xE0                                  */
#define PXPNXTPTR_IIO_PCIENTB_REG 0x0F001091
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x091
 */
typedef union {
  struct {
    UINT8 next_ptr : 8;
    /* next_ptr - Bits[7:0], RO, default = 8'b11100000 
       This field is set to the PCI PM capability.
     */
  } Bits;
  UINT8 Data;
} PXPNXTPTR_IIO_PCIENTB_STRUCT;


/* PXPCAP_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x20100092)                                                  */
/*       SKX (0x20100092)                                                     */
/* Register default value:              0x0002                                */
#define PXPCAP_IIO_PCIENTB_REG 0x0F002092
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x092
 */
typedef union {
  struct {
    UINT16 capability_version : 4;
    /* capability_version - Bits[3:0], RW_O, default = 4'b0010 
       This field identifies the version of the PCI Express capability structure, which 
       is 2h as of now. This register field is left as RW-O to cover any unknowns with 
       Gen3. 
     */
    UINT16 device_port_type : 4;
    /* device_port_type - Bits[7:4], RO_V, default = 4'b0000 
       This field identifies the type of device. It is set to 0100 for all the Express 
       ports. 
     */
    UINT16 slot_implemented : 1;
    /* slot_implemented - Bits[8:8], RW_O, default = 1'b0 
       Applies only to the root ports.
       1: indicates that the PCI Express link associated with the port is connected to 
       a slot. 
       0: indicates no slot is connected to this port.
       Notes:
       This register bit is of type 'write once' and is set by BIOS.
     */
    UINT16 interrupt_message_number : 5;
    /* interrupt_message_number - Bits[13:9], RO, default = 5'b00000 
       Applies to root ports. This field indicates the interrupt message number that is 
       generated for Power Management/Hot Plug/Bandwidth-change events. When there are 
       more than one MSI interrupt Number allocated for the root port MSI interrupts, 
       this register field is required to contain the offset between the base Message 
       Data and the MSI Message that is generated when there are these change 
       interrupts. IIO assigns the first vector for these change events and so this 
       field is set to 0. 
     */
    UINT16 rsvd : 2;
    /* rsvd - Bits[15:14], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} PXPCAP_IIO_PCIENTB_STRUCT;


/* DEVCAP_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x40100094)                                                  */
/*       SKX (0x40100094)                                                     */
/* Register default value:              0x00008021                            */
#define DEVCAP_IIO_PCIENTB_REG 0x0F004094
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * The PCI Express Device Capabilities register identifies device specific 
 * information for the device. 
 */
typedef union {
  struct {
    UINT32 max_payload_size_supported : 3;
    /* max_payload_size_supported - Bits[2:0], RW_O, default = 3'b001 
       1
     */
    UINT32 phantom_functions_supported : 2;
    /* phantom_functions_supported - Bits[4:3], RO, default = 2'b00 
       CB DMA does not support phantom functions.
     */
    UINT32 extended_tag_field_supported : 1;
    /* extended_tag_field_supported - Bits[5:5], RW_O, default = 1'b1  */
    UINT32 endpoint_l0s_acceptable_latency : 3;
    /* endpoint_l0s_acceptable_latency - Bits[8:6], RO, default = 3'b000 
       N/A
     */
    UINT32 endpoint_l1_acceptable_latency : 3;
    /* endpoint_l1_acceptable_latency - Bits[11:9], RO, default = 3'b000 
       N/A
     */
    UINT32 attention_button_present : 1;
    /* attention_button_present - Bits[12:12], RO, default = 1'b0 
       Does not apply to CB DMA
     */
    UINT32 attention_indicator_present : 1;
    /* attention_indicator_present - Bits[13:13], RO, default = 1'b0 
       Does not apply to CB DMA
     */
    UINT32 power_indicator_present_on_device : 1;
    /* power_indicator_present_on_device - Bits[14:14], RO, default = 1'b0 
       Does not apply to CB DMA
     */
    UINT32 role_based_error_reporting : 1;
    /* role_based_error_reporting - Bits[15:15], RO, default = 1'b1 
       IIO is 1.1 compliant and so supports this feature
     */
    UINT32 rsvd_16 : 2;
    /* rsvd_16 - Bits[17:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 captured_slot_power_limit_value : 8;
    /* captured_slot_power_limit_value - Bits[25:18], RO, default = 8'b00000000 
       Does not apply to CB DMA
     */
    UINT32 captured_slot_power_limit_scale : 2;
    /* captured_slot_power_limit_scale - Bits[27:26], RO, default = 2'b00 
       Does not apply to CB DMA
     */
    UINT32 rsvd_28 : 4;
    /* rsvd_28 - Bits[31:28], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} DEVCAP_IIO_PCIENTB_STRUCT;


/* DEVCTRL_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x20100098)                                                  */
/*       SKX (0x20100098)                                                     */
/* Register default value:              0x0000                                */
#define DEVCTRL_IIO_PCIENTB_REG 0x0F002098
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x098
 */
typedef union {
  struct {
    UINT16 correctable_error_reporting_enable : 1;
    /* correctable_error_reporting_enable - Bits[0:0], RW, default = 1'b0  */
    UINT16 non_fatal_error_reporting_enable : 1;
    /* non_fatal_error_reporting_enable - Bits[1:1], RW, default = 1'b0  */
    UINT16 fatal_error_reporting_enable : 1;
    /* fatal_error_reporting_enable - Bits[2:2], RW, default = 1'b0  */
    UINT16 unsupported_request_reporting_enable : 1;
    /* unsupported_request_reporting_enable - Bits[3:3], RW, default = 1'b0  */
    UINT16 enable_relaxed_ordering : 1;
    /* enable_relaxed_ordering - Bits[4:4], RO, default = 1'b0  */
    UINT16 max_payload_size : 3;
    /* max_payload_size - Bits[7:5], RW_LV, default = 3'b000  */
    UINT16 extended_tag_field_enable : 1;
    /* extended_tag_field_enable - Bits[8:8], RW, default = 1'b0  */
    UINT16 phantom_functions_enable : 1;
    /* phantom_functions_enable - Bits[9:9], RO, default = 1'b0  */
    UINT16 auxiliary_power_management_enable : 1;
    /* auxiliary_power_management_enable - Bits[10:10], RO, default = 1'b0  */
    UINT16 enable_no_snoop : 1;
    /* enable_no_snoop - Bits[11:11], RO, default = 1'b0  */
    UINT16 max_read_request_size : 3;
    /* max_read_request_size - Bits[14:12], RO, default = 3'b000  */
    UINT16 rsvd : 1;
    /* rsvd - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} DEVCTRL_IIO_PCIENTB_STRUCT;


/* DEVSTS_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x2010009A)                                                  */
/*       SKX (0x2010009A)                                                     */
/* Register default value:              0x0000                                */
#define DEVSTS_IIO_PCIENTB_REG 0x0F00209A
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x09a
 */
typedef union {
  struct {
    UINT16 correctable_error_detected : 1;
    /* correctable_error_detected - Bits[0:0], RW1C, default = 1'b0  */
    UINT16 non_fatal_error_detected : 1;
    /* non_fatal_error_detected - Bits[1:1], RW1C, default = 1'b0  */
    UINT16 fatal_error_detected : 1;
    /* fatal_error_detected - Bits[2:2], RW1C, default = 1'b0  */
    UINT16 unsupported_request_detected : 1;
    /* unsupported_request_detected - Bits[3:3], RW1C, default = 1'b0  */
    UINT16 aux_power_detected : 1;
    /* aux_power_detected - Bits[4:4], RO, default = 1'b0  */
    UINT16 transactions_pending : 1;
    /* transactions_pending - Bits[5:5], RO, default = 1'b0  */
    UINT16 rsvd : 10;
    /* rsvd - Bits[15:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} DEVSTS_IIO_PCIENTB_STRUCT;


/* PBAR23SZ_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x101000D0)                                                  */
/*       SKX (0x101000D0)                                                     */
/* Register default value:              0x00                                  */
#define PBAR23SZ_IIO_PCIENTB_REG 0x0F0010D0
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register contains a value used to set the size of the memory window 
 * requested by the 64-bit BAR 2/3 pair for the Primary side of the NTB. 
 */
typedef union {
  struct {
    UINT8 primary_bar_2_3_size : 8;
    /* primary_bar_2_3_size - Bits[7:0], RW_L, default = 8'b00000000 
       1
     */
  } Bits;
  UINT8 Data;
} PBAR23SZ_IIO_PCIENTB_STRUCT;


/* PBAR45SZ_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x101000D1)                                                  */
/*       SKX (0x101000D1)                                                     */
/* Register default value:              0x00                                  */
#define PBAR45SZ_IIO_PCIENTB_REG 0x0F0010D1
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register contains a value used to set the size of the memory window 
 * requested by the 64-bit BAR 4/5 pair for the Primary side of the NTB. 
 * If BARs 4 and 5 are configured as 32b BARs (ppd.bar45_32bit=1), then this 
 * configures BAR4 only. 
 */
typedef union {
  struct {
    UINT8 primary_bar_4_5_size : 8;
    /* primary_bar_4_5_size - Bits[7:0], RW_L, default = 8'b00000000 
       1
     */
  } Bits;
  UINT8 Data;
} PBAR45SZ_IIO_PCIENTB_STRUCT;


/* SBAR23SZ_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x101000D2)                                                  */
/*       SKX (0x101000D2)                                                     */
/* Register default value:              0x00                                  */
#define SBAR23SZ_IIO_PCIENTB_REG 0x0F0010D2
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x0d2
 */
typedef union {
  struct {
    UINT8 secondary_bar_2_3_size : 8;
    /* secondary_bar_2_3_size - Bits[7:0], RW_L, default = 8'b00000000  */
  } Bits;
  UINT8 Data;
} SBAR23SZ_IIO_PCIENTB_STRUCT;


/* SBAR45SZ_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x101000D3)                                                  */
/*       SKX (0x101000D3)                                                     */
/* Register default value:              0x00                                  */
#define SBAR45SZ_IIO_PCIENTB_REG 0x0F0010D3
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x0d3
 */
typedef union {
  struct {
    UINT8 secondary_bar_4_5_size : 8;
    /* secondary_bar_4_5_size - Bits[7:0], RW_L, default = 8'b00000000  */
  } Bits;
  UINT8 Data;
} SBAR45SZ_IIO_PCIENTB_STRUCT;


/* PPD_IIO_PCIENTB_REG supported on:                                          */
/*       SKX_A0 (0x101000D4)                                                  */
/*       SKX (0x101000D4)                                                     */
/* Register default value:              0x00                                  */
#define PPD_IIO_PCIENTB_REG 0x0F0010D4
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register defines the behavior of the PCIE port which can be either a RP, 
 * NTB connected to another NTB or an NTB connected to a Root Complex. This 
 * register is used to set the value in the DID register on the Primary side of the 
 * NTB (located at offset 02h). This value is loaded by BIOS prior to running PCI 
 * enumeration. 
 */
typedef union {
  struct {
    UINT8 port_definition : 2;
    /* port_definition - Bits[1:0], RW_LV, default = 2'b00 
       Value indicating the value to be loaded into the DID register (offset 02h).
       00b - Transparent bridge
       01b - 2 NTBs connected back to back
       10b - NTB connected to a RP
       11b - Reserved
     */
    UINT8 crosslink_control : 2;
    /* crosslink_control - Bits[3:2], RW_LV, default = 2'b00 
       Directly forces the polarity of the NTB port to be either an Upstream Device 
       (USD) or Downstream Device (DSD). 
       11: Force NTB port to USD/DSP;
       10: Force NTB port to DSD/USP;
       Others: Reserved
       NOTE: Bits 03:02 of this register only have meaning when bits 01:00 of this same 
       register are programmed as '01'b (NTB/NTB). When configured as NTB/RP hardware 
       directly sets port to DSD/USP so this field is not required. 
     */
    UINT8 crosslink_configuration_status : 1;
    /* crosslink_configuration_status - Bits[4:4], RO_V, default = 1'b0 
       This bit is written by hardware and shows the result of the NTBCROSSLINK.
       0: NTB port is configured as DSD/USP
       1: NTB port is configured as USD/DSP
     */
    UINT8 ntb_primary_side_msi_x_single_message_vector : 1;
    /* ntb_primary_side_msi_x_single_message_vector - Bits[5:5], RW_LV, default = 1'b0 
       This bit when set, causes only a single MSI-X message to be generated if MSI-X 
       is enabled. This bit affects the default value of the MSI-X Table Size field. 
     */
    UINT8 bar45_32bit : 1;
    /* bar45_32bit - Bits[6:6], RW_LV, default = 1'b0 
       If set, BARs 4 and 5 are presented as two 32b non-prefetchable BARs.
       If clear, BARs 4 and 5 are presented as one 64b BAR.
     */
    UINT8 rsvd : 1;
    /* rsvd - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT8 Data;
} PPD_IIO_PCIENTB_STRUCT;


/* PMCAP_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x401000E0)                                                  */
/*       SKX (0x401000E0)                                                     */
/* Register default value:              0x00030001                            */
#define PMCAP_IIO_PCIENTB_REG 0x0F0040E0
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x0e0
 */
typedef union {
  struct {
    UINT32 capability_id : 8;
    /* capability_id - Bits[7:0], RO, default = 8'b00000001 
       Provides the PM capability ID assigned by PCI-SIG.
     */
    UINT32 next_capability_pointer : 8;
    /* next_capability_pointer - Bits[15:8], RO, default = 8'b00000000 
       This is the last capability in the chain and hence set to 0.
     */
    UINT32 version : 3;
    /* version - Bits[18:16], RO, default = 3'b011 
       This field is set to 3h (PM 1.2 compliant) as version number.
     */
    UINT32 pme_clock : 1;
    /* pme_clock - Bits[19:19], RO, default = 1'b0 
       This field is hardwired to 0h as it does not apply to PCI Express.
     */
    UINT32 rsvd : 1;
    /* rsvd - Bits[20:20], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 device_specific_initialization : 1;
    /* device_specific_initialization - Bits[21:21], RO, default = 1'b0  */
    UINT32 aux_current : 3;
    /* aux_current - Bits[24:22], RO, default = 3'b000  */
    UINT32 d1_support : 1;
    /* d1_support - Bits[25:25], RO, default = 1'b0 
       I/OxAPIC does not support power management state D1.
     */
    UINT32 d2_support : 1;
    /* d2_support - Bits[26:26], RO, default = 1'b0 
       I/OxAPIC does not support power management state D2.
     */
    UINT32 pme_support : 5;
    /* pme_support - Bits[31:27], RO_V, default = 5'b00000 
       Bits 31, 30 and 27 must be set to \q1\q for PCI-PCI bridge structures 
       representing ports on root complexes. 
     */
  } Bits;
  UINT32 Data;
} PMCAP_IIO_PCIENTB_STRUCT;


/* PMCSR_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x401000E4)                                                  */
/*       SKX (0x401000E4)                                                     */
/* Register default value:              0x00000008                            */
#define PMCSR_IIO_PCIENTB_REG 0x0F0040E4
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x0e4
 */
typedef union {
  struct {
    UINT32 power_state : 2;
    /* power_state - Bits[1:0], RW, default = 2'b00 
       This 2-bit field is used to determine the current power state of the function 
       and to set a new power state as well. 
       00: D0
       01: D1 (not supported by IOAPIC)
       10: D2 (not supported by IOAPIC)
       11: D3_hot
       If Software tries to write 01 or 10 to this field, the power state does not 
       change from the existing power state (which is either D0 or D3hot) and nor do 
       these bits1:0 change value. 
       When in D3hot state, I/OxAPIC will
       a) respond to only Type 0 configuration transactions targeted at the device's 
       configuration space, when in D3hot state 
       c) will not respond to memory (i.e. D3hot state is equivalent to MSE ), accesses 
       to MBAR region (note: ABAR region access still go through in D3hot state, if it 
       enabled) 
       d) will not generate any MSI writes
     */
    UINT32 rsvd_2 : 1;
    /* rsvd_2 - Bits[2:2], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 no_soft_reset : 1;
    /* no_soft_reset - Bits[3:3], RW_O, default = 1'b1 
       Indicates I/OxAPIC does not reset its registers when transitioning from D3hot to 
       D0. 
     */
    UINT32 rsvd_4 : 4;
    /* rsvd_4 - Bits[7:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 pme_enable : 1;
    /* pme_enable - Bits[8:8], RWS_L, default = 1'b0 
       Not relevant for I/OxAPIC
     */
    UINT32 data_select : 4;
    /* data_select - Bits[12:9], RO, default = 4'b0000 
       Not relevant for I/OxAPIC
     */
    UINT32 data_scale : 2;
    /* data_scale - Bits[14:13], RO, default = 2'b00 
       Not relevant for I/OxAPIC
     */
    UINT32 pme_status : 1;
    /* pme_status - Bits[15:15], RW1CS, default = 1'b0 
       Not relevant for I/OxAPIC
     */
    UINT32 rsvd_16 : 6;
    /* rsvd_16 - Bits[21:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 b2_b3_support : 1;
    /* b2_b3_support - Bits[22:22], RO, default = 1'b0 
       Not relevant for I/OxAPIC
     */
    UINT32 bus_power_clock_control_enable : 1;
    /* bus_power_clock_control_enable - Bits[23:23], RO, default = 1'b0 
       Not relevant for I/OxAPIC
     */
    UINT32 data : 8;
    /* data - Bits[31:24], RO, default = 8'b00000000 
       Not relevant for I/OxAPIC
     */
  } Bits;
  UINT32 Data;
} PMCSR_IIO_PCIENTB_STRUCT;


/* XPREUT_HDR_EXT_IIO_PCIENTB_REG supported on:                               */
/*       SKX_A0 (0x40100100)                                                  */
/*       SKX (0x40100100)                                                     */
/* Register default value:              0x1441000B                            */
#define XPREUT_HDR_EXT_IIO_PCIENTB_REG 0x0F004100
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x100
 */
typedef union {
  struct {
    UINT32 pciecapid : 16;
    /* pciecapid - Bits[15:0], RO, default = 16'b0000000000001011  */
    UINT32 pciecapversion : 4;
    /* pciecapversion - Bits[19:16], RO, default = 4'b0001  */
    UINT32 pcienextptr : 12;
    /* pcienextptr - Bits[31:20], RO_V, default = 12'b000101000100  */
  } Bits;
  UINT32 Data;
} XPREUT_HDR_EXT_IIO_PCIENTB_STRUCT;


/* XPREUT_HDR_CAP_IIO_PCIENTB_REG supported on:                               */
/*       SKX_A0 (0x40100104)                                                  */
/*       SKX (0x40100104)                                                     */
/* Register default value:              0x00C00002                            */
#define XPREUT_HDR_CAP_IIO_PCIENTB_REG 0x0F004104
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x104
 */
typedef union {
  struct {
    UINT32 vsecid : 16;
    /* vsecid - Bits[15:0], RO, default = 16'b0000000000000010  */
    UINT32 vsecidrev : 4;
    /* vsecidrev - Bits[19:16], RO, default = 4'b0000  */
    UINT32 vseclength : 12;
    /* vseclength - Bits[31:20], RO, default = 12'b000000001100  */
  } Bits;
  UINT32 Data;
} XPREUT_HDR_CAP_IIO_PCIENTB_STRUCT;


/* XPREUT_HDR_LEF_IIO_PCIENTB_REG supported on:                               */
/*       SKX_A0 (0x40100108)                                                  */
/*       SKX (0x40100108)                                                     */
/* Register default value:              0x00003807                            */
#define XPREUT_HDR_LEF_IIO_PCIENTB_REG 0x0F004108
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x108
 */
typedef union {
  struct {
    UINT32 leafreutengid : 8;
    /* leafreutengid - Bits[7:0], RO_V, default = 8'b00000111  */
    UINT32 leafreutdevnum : 8;
    /* leafreutdevnum - Bits[15:8], RO_V, default = 8'b00111000  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPREUT_HDR_LEF_IIO_PCIENTB_STRUCT;


/* ACSCAPHDR_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x40100110)                                                  */
/*       SKX (0x40100110)                                                     */
/* Register default value:              0x1481000D                            */
#define ACSCAPHDR_IIO_PCIENTB_REG 0x0F004110
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x110
 */
typedef union {
  struct {
    UINT32 pci_express_extended_cap_id : 16;
    /* pci_express_extended_cap_id - Bits[15:0], RO, default = 16'b0000000000001101  */
    UINT32 capability_version : 4;
    /* capability_version - Bits[19:16], RO, default = 4'b0001  */
    UINT32 next_capability_offset : 12;
    /* next_capability_offset - Bits[31:20], RO, default = 12'b000101001000  */
  } Bits;
  UINT32 Data;
} ACSCAPHDR_IIO_PCIENTB_STRUCT;


/* ACSCAP_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x20100114)                                                  */
/*       SKX (0x20100114)                                                     */
/* Register default value:              0x001F                                */
#define ACSCAP_IIO_PCIENTB_REG 0x0F002114
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x114
 */
typedef union {
  struct {
    UINT16 v : 1;
    /* v - Bits[0:0], RO_V, default = 1'b1  */
    UINT16 b : 1;
    /* b - Bits[1:1], RO_V, default = 1'b1  */
    UINT16 r : 1;
    /* r - Bits[2:2], RO_V, default = 1'b1 
       Applies only to root portsIndicates that the component implements ACS P2P 
       Request Redirect. 
     */
    UINT16 c : 1;
    /* c - Bits[3:3], RO_V, default = 1'b1 
       Applies only to root portsIndicates that the component implements ACS P2P 
       Completion Redirect. 
     */
    UINT16 u : 1;
    /* u - Bits[4:4], RO_V, default = 1'b1 
       Applies only to root portsIndicates that the component implements ACS Upstream 
       Forwarding. 
     */
    UINT16 e : 1;
    /* e - Bits[5:5], RO, default = 1'b0 
       Applies only to root portsIndicates that the component does not implement ACS 
       P2P Egress Control. 
     */
    UINT16 t : 1;
    /* t - Bits[6:6], RO, default = 1'b0 
       Applies only to root portsIndicates that the component does not implement ACS 
       Direct Translated P2P. 
     */
    UINT16 rsvd : 1;
    /* rsvd - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 egress_control_vector_size : 8;
    /* egress_control_vector_size - Bits[15:8], RO, default = 8'b00000000 
       N/A for IIO
     */
  } Bits;
  UINT16 Data;
} ACSCAP_IIO_PCIENTB_STRUCT;


/* ACSCTRL_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x20100116)                                                  */
/*       SKX (0x20100116)                                                     */
/* Register default value:              0x0000                                */
#define ACSCTRL_IIO_PCIENTB_REG 0x0F002116
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x116
 */
typedef union {
  struct {
    UINT16 v : 1;
    /* v - Bits[0:0], RW_L, default = 1'b0 
       Applies only to root portsWhen set, the component validates the Bus Number from 
       the Requester ID of upstream Requests against the secondary / subordinate Bus 
       Numbers. 
     */
    UINT16 b : 1;
    /* b - Bits[1:1], RW_L, default = 1'b0 
       Applies only to root portsWhen set, the component blocks all upstream Memory 
       Requests whose Address Translation (AT) field is not set to the default value. 
     */
    UINT16 r : 1;
    /* r - Bits[2:2], RW_L, default = 1'b0 
       When this bit is set, transactions arriving from a root port that target the 
       same port back down, will be forwarded. Normally such traffic would be aborted. 
       Applies only to root ports. 
     */
    UINT16 c : 1;
    /* c - Bits[3:3], RW_L, default = 1'b0 
       Applies only to root portsDetermines when the component redirects peer-to-peer 
       Completions upstream; applicable only to Read Completions whose Relaxed Ordering 
       Attribute is clear. 
     */
    UINT16 u : 1;
    /* u - Bits[4:4], RW_L, default = 1'b0 
       When this bit is set, transactions arriving from a root port that target the 
       same port back down, will be forwarded. Normally such traffic would be aborted. 
       Applies only to root ports. 
     */
    UINT16 e : 1;
    /* e - Bits[5:5], RO, default = 1'b0 
       Applies only to root portsThe component does not implement ACS P2P Egress 
       Control and hence this bit should not be used by SW. 
     */
    UINT16 t : 1;
    /* t - Bits[6:6], RO, default = 1'b0 
       Applies only to root portsThis is hardwired to 0b as the component does not 
       implement ACS Direct Translated P2P. 
     */
    UINT16 rsvd : 9;
    /* rsvd - Bits[15:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} ACSCTRL_IIO_PCIENTB_STRUCT;


/* APICBASE_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x20100140)                                                  */
/*       SKX (0x20100140)                                                     */
/* Register default value:              0x0000                                */
#define APICBASE_IIO_PCIENTB_REG 0x0F002140
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x140
 */
typedef union {
  struct {
    UINT16 en : 1;
    /* en - Bits[0:0], RW, default = 1'b0 
       enables the decode of the APIC window
     */
    UINT16 addr : 11;
    /* addr - Bits[11:1], RW, default = 11'b00000000000 
       Bits 31:20 are assumed to be 0xFECh. Bits 8:0 are a don't care for address 
       decode. Address decoding to the APIC range is done as APICBASE.ADDR[31:8] &lt;= 
       A[31:8] &lt;= APICLIMIT.ADDR[31:8]. 
       Outbound accesses to the APIC range are claimed by the root port and forwarded 
       to PCIe, if bit 0 is set, even if the MSE bit of the root port is clear or the 
       root port itself is in D3hot state. 
     */
    UINT16 rsvd : 4;
    /* rsvd - Bits[15:12], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} APICBASE_IIO_PCIENTB_STRUCT;


/* APICLIMIT_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x20100142)                                                  */
/*       SKX (0x20100142)                                                     */
/* Register default value:              0x0000                                */
#define APICLIMIT_IIO_PCIENTB_REG 0x0F002142
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x142
 */
typedef union {
  struct {
    UINT16 rsvd_0 : 1;
    /* rsvd_0 - Bits[0:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 addr : 11;
    /* addr - Bits[11:1], RW, default = 11'b00000000000 
       Applies only to root ports.
       Bits 31:20 are assumed to be 0xFECh. Bits 8:0 are a don't care for address 
       decode. Address decoding to the APIC range is done as APICBASE.ADDR[31:8] &lt;= 
       A[31:8] &lt;= APICLIMIT.ADDR[31:8]. 
       Outbound accesses to the APIC range are claimed by the root port and forwarded 
       to PCIe, if the range is enabled, even if the MSE bit of the root port is clear 
       or the root port itself is in D3hot state. 
     */
    UINT16 rsvd_12 : 4;
    /* rsvd_12 - Bits[15:12], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} APICLIMIT_IIO_PCIENTB_STRUCT;


/* VSECPHDR_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x40100144)                                                  */
/*       SKX (0x40100144)                                                     */
/* Register default value:              0x1D01000B                            */
#define VSECPHDR_IIO_PCIENTB_REG 0x0F004144
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x144
 */
typedef union {
  struct {
    UINT32 pci_express_extended_cap_id : 16;
    /* pci_express_extended_cap_id - Bits[15:0], RO, default = 16'b0000000000001011  */
    UINT32 capability_version : 4;
    /* capability_version - Bits[19:16], RO, default = 4'b0001  */
    UINT32 next_capability_offset : 12;
    /* next_capability_offset - Bits[31:20], RO, default = 12'b000111010000  */
  } Bits;
  UINT32 Data;
} VSECPHDR_IIO_PCIENTB_STRUCT;


/* VSHDR_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x40100148)                                                  */
/*       SKX (0x40100148)                                                     */
/* Register default value:              0x03C10004                            */
#define VSHDR_IIO_PCIENTB_REG 0x0F004148
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x148
 */
typedef union {
  struct {
    UINT32 vsec_id : 16;
    /* vsec_id - Bits[15:0], RO, default = 16'b0000000000000100  */
    UINT32 vsec_version : 4;
    /* vsec_version - Bits[19:16], RO, default = 4'b0001  */
    UINT32 vsec_length : 12;
    /* vsec_length - Bits[31:20], RO, default = 12'b000000111100  */
  } Bits;
  UINT32 Data;
} VSHDR_IIO_PCIENTB_STRUCT;


/* UNCERRSTS_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x4010014C)                                                  */
/*       SKX (0x4010014C)                                                     */
/* Register default value:              0x00000000                            */
#define UNCERRSTS_IIO_PCIENTB_REG 0x0F00414C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x14c
 */
typedef union {
  struct {
    UINT32 rsvd_uncerrsts_3_0 : 4;
    /* rsvd_uncerrsts_3_0 - Bits[3:0], RO, default = 4'b0000  */
    UINT32 data_link_protocol_error_status : 1;
    /* data_link_protocol_error_status - Bits[4:4], RW1CS, default = 1'b0  */
    UINT32 surprise_down_error_status : 1;
    /* surprise_down_error_status - Bits[5:5], RW1CS, default = 1'b0  */
    UINT32 rsvd_uncerrsts_11_6 : 6;
    /* rsvd_uncerrsts_11_6 - Bits[11:6], RO, default = 6'b000000  */
    UINT32 poisoned_tlp_status : 1;
    /* poisoned_tlp_status - Bits[12:12], RW1CS, default = 1'b0  */
    UINT32 flow_control_protocol_error_status : 1;
    /* flow_control_protocol_error_status - Bits[13:13], RW1CS, default = 1'b0  */
    UINT32 completion_time_out_status : 1;
    /* completion_time_out_status - Bits[14:14], RW1CS, default = 1'b0  */
    UINT32 completer_abort_status : 1;
    /* completer_abort_status - Bits[15:15], RW1CS, default = 1'b0  */
    UINT32 unexpected_completion_status : 1;
    /* unexpected_completion_status - Bits[16:16], RW1CS, default = 1'b0  */
    UINT32 receiver_buffer_overflow_status : 1;
    /* receiver_buffer_overflow_status - Bits[17:17], RW1CS, default = 1'b0  */
    UINT32 malformed_tlp_status : 1;
    /* malformed_tlp_status - Bits[18:18], RW1CS, default = 1'b0  */
    UINT32 ecrc_error_status : 1;
    /* ecrc_error_status - Bits[19:19], RW1CS, default = 1'b0  */
    UINT32 received_an_unsupported_request : 1;
    /* received_an_unsupported_request - Bits[20:20], RW1CS, default = 1'b0  */
    UINT32 acs_violation_status : 1;
    /* acs_violation_status - Bits[21:21], RW1CS, default = 1'b0  */
    UINT32 rsvd : 10;
    /* rsvd - Bits[31:22], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} UNCERRSTS_IIO_PCIENTB_STRUCT;


/* UNCERRMSK_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x40100150)                                                  */
/*       SKX (0x40100150)                                                     */
/* Register default value:              0x00000000                            */
#define UNCERRMSK_IIO_PCIENTB_REG 0x0F004150
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x150
 */
typedef union {
  struct {
    UINT32 rsvd_uncerrmsk_3_0 : 4;
    /* rsvd_uncerrmsk_3_0 - Bits[3:0], RO, default = 4'b0000  */
    UINT32 data_link_layer_protocol_error_mask : 1;
    /* data_link_layer_protocol_error_mask - Bits[4:4], RWS, default = 1'b0  */
    UINT32 surprise_down_error_mask : 1;
    /* surprise_down_error_mask - Bits[5:5], RWS, default = 1'b0  */
    UINT32 rsvd_uncerrmsk_11_6 : 6;
    /* rsvd_uncerrmsk_11_6 - Bits[11:6], RO, default = 6'b000000  */
    UINT32 poisoned_tlp_mask : 1;
    /* poisoned_tlp_mask - Bits[12:12], RWS, default = 1'b0  */
    UINT32 flow_control_protocol_error_mask : 1;
    /* flow_control_protocol_error_mask - Bits[13:13], RWS, default = 1'b0  */
    UINT32 completion_time_out_mask : 1;
    /* completion_time_out_mask - Bits[14:14], RWS, default = 1'b0  */
    UINT32 completer_abort_mask : 1;
    /* completer_abort_mask - Bits[15:15], RWS, default = 1'b0  */
    UINT32 unexpected_completion_mask : 1;
    /* unexpected_completion_mask - Bits[16:16], RWS, default = 1'b0  */
    UINT32 receiver_buffer_overflow_mask : 1;
    /* receiver_buffer_overflow_mask - Bits[17:17], RWS, default = 1'b0  */
    UINT32 malformed_tlp_mask : 1;
    /* malformed_tlp_mask - Bits[18:18], RWS, default = 1'b0  */
    UINT32 ecrc_error_mask : 1;
    /* ecrc_error_mask - Bits[19:19], RWS, default = 1'b0  */
    UINT32 unsupported_request_error_mask : 1;
    /* unsupported_request_error_mask - Bits[20:20], RWS, default = 1'b0  */
    UINT32 acs_violation_mask : 1;
    /* acs_violation_mask - Bits[21:21], RWS, default = 1'b0  */
    UINT32 rsvd : 10;
    /* rsvd - Bits[31:22], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} UNCERRMSK_IIO_PCIENTB_STRUCT;


/* UNCERRSEV_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x40100154)                                                  */
/*       SKX (0x40100154)                                                     */
/* Register default value:              0x00062030                            */
#define UNCERRSEV_IIO_PCIENTB_REG 0x0F004154
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x154
 */
typedef union {
  struct {
    UINT32 rsvd_uncerr_sev_3_0 : 4;
    /* rsvd_uncerr_sev_3_0 - Bits[3:0], RO, default = 4'b0000  */
    UINT32 data_link_protocol_error_severity : 1;
    /* data_link_protocol_error_severity - Bits[4:4], RWS, default = 1'b1  */
    UINT32 surprise_down_error_severity : 1;
    /* surprise_down_error_severity - Bits[5:5], RWS, default = 1'b1  */
    UINT32 rsvd_uncerr_sev_11_6 : 6;
    /* rsvd_uncerr_sev_11_6 - Bits[11:6], RO, default = 6'b000000  */
    UINT32 poisoned_tlp_severity : 1;
    /* poisoned_tlp_severity - Bits[12:12], RWS, default = 1'b0  */
    UINT32 flow_control_protocol_error_severity : 1;
    /* flow_control_protocol_error_severity - Bits[13:13], RWS, default = 1'b1  */
    UINT32 completion_time_out_severity : 1;
    /* completion_time_out_severity - Bits[14:14], RWS, default = 1'b0  */
    UINT32 completer_abort_severity : 1;
    /* completer_abort_severity - Bits[15:15], RWS, default = 1'b0  */
    UINT32 unexpected_completion_severity : 1;
    /* unexpected_completion_severity - Bits[16:16], RWS, default = 1'b0  */
    UINT32 receiver_buffer_overflow_severity : 1;
    /* receiver_buffer_overflow_severity - Bits[17:17], RWS, default = 1'b1  */
    UINT32 malformed_tlp_severity : 1;
    /* malformed_tlp_severity - Bits[18:18], RWS, default = 1'b1  */
    UINT32 ecrc_error_severity : 1;
    /* ecrc_error_severity - Bits[19:19], RWS, default = 1'b0  */
    UINT32 unsupported_request_error_severity : 1;
    /* unsupported_request_error_severity - Bits[20:20], RWS, default = 1'b0  */
    UINT32 acs_violation_severity : 1;
    /* acs_violation_severity - Bits[21:21], RWS, default = 1'b0  */
    UINT32 rsvd : 10;
    /* rsvd - Bits[31:22], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} UNCERRSEV_IIO_PCIENTB_STRUCT;


/* CORERRSTS_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x40100158)                                                  */
/*       SKX (0x40100158)                                                     */
/* Register default value:              0x00000000                            */
#define CORERRSTS_IIO_PCIENTB_REG 0x0F004158
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x158
 */
typedef union {
  struct {
    UINT32 receiver_error_status : 1;
    /* receiver_error_status - Bits[0:0], RW1CS, default = 1'b0  */
    UINT32 rsvd_1 : 5;
    /* rsvd_1 - Bits[5:1], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 bad_tlp_status : 1;
    /* bad_tlp_status - Bits[6:6], RW1CS, default = 1'b0  */
    UINT32 bad_dllp_status : 1;
    /* bad_dllp_status - Bits[7:7], RW1CS, default = 1'b0  */
    UINT32 replay_num_rollover_status : 1;
    /* replay_num_rollover_status - Bits[8:8], RW1CS, default = 1'b0  */
    UINT32 rsvd_9 : 3;
    /* rsvd_9 - Bits[11:9], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 replay_timer_time_out_status : 1;
    /* replay_timer_time_out_status - Bits[12:12], RW1CS, default = 1'b0  */
    UINT32 advisory_non_fatal_error_status : 1;
    /* advisory_non_fatal_error_status - Bits[13:13], RW1CS, default = 1'b0  */
    UINT32 rsvd_14 : 18;
    /* rsvd_14 - Bits[31:14], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CORERRSTS_IIO_PCIENTB_STRUCT;


/* CORERRMSK_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x4010015C)                                                  */
/*       SKX (0x4010015C)                                                     */
/* Register default value:              0x00002000                            */
#define CORERRMSK_IIO_PCIENTB_REG 0x0F00415C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x15c
 */
typedef union {
  struct {
    UINT32 receiver_error_mask : 1;
    /* receiver_error_mask - Bits[0:0], RWS, default = 1'b0  */
    UINT32 rsvd_corerrmsk_5_1 : 5;
    /* rsvd_corerrmsk_5_1 - Bits[5:1], RO, default = 5'b00000  */
    UINT32 bad_tlp_mask : 1;
    /* bad_tlp_mask - Bits[6:6], RWS, default = 1'b0  */
    UINT32 bad_dllp_mask : 1;
    /* bad_dllp_mask - Bits[7:7], RWS, default = 1'b0  */
    UINT32 replay_num_rollover_mask : 1;
    /* replay_num_rollover_mask - Bits[8:8], RWS, default = 1'b0  */
    UINT32 rsvd_corerrmsk_11_9 : 3;
    /* rsvd_corerrmsk_11_9 - Bits[11:9], RO, default = 3'b000  */
    UINT32 replay_timer_time_out_mask : 1;
    /* replay_timer_time_out_mask - Bits[12:12], RWS, default = 1'b0  */
    UINT32 advisory_non_fatal_error_mask : 1;
    /* advisory_non_fatal_error_mask - Bits[13:13], RWS, default = 1'b1  */
    UINT32 rsvd : 18;
    /* rsvd - Bits[31:14], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CORERRMSK_IIO_PCIENTB_STRUCT;


/* ERRCAP_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x40100160)                                                  */
/*       SKX (0x40100160)                                                     */
/* Register default value:              0x00000000                            */
#define ERRCAP_IIO_PCIENTB_REG 0x0F004160
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x160
 */
typedef union {
  struct {
    UINT32 first_error_pointer : 5;
    /* first_error_pointer - Bits[4:0], ROS_V, default = 5'b00000  */
    UINT32 ecrc_generation_capable : 1;
    /* ecrc_generation_capable - Bits[5:5], RW_O, default = 1'b0  */
    UINT32 ecrc_generation_enable : 1;
    /* ecrc_generation_enable - Bits[6:6], RWS_L, default = 1'b0  */
    UINT32 ecrc_check_capable : 1;
    /* ecrc_check_capable - Bits[7:7], RW_O, default = 1'b0  */
    UINT32 ecrc_check_enable : 1;
    /* ecrc_check_enable - Bits[8:8], RWS_L, default = 1'b0  */
    UINT32 rsvd : 23;
    /* rsvd - Bits[31:9], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} ERRCAP_IIO_PCIENTB_STRUCT;


/* HDRLOG0_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x40100164)                                                  */
/*       SKX (0x40100164)                                                     */
/* Register default value:              0x00000000                            */
#define HDRLOG0_IIO_PCIENTB_REG 0x0F004164
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x164
 */
typedef union {
  struct {
    UINT32 hdr : 32;
    /* hdr - Bits[31:0], ROS_V, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} HDRLOG0_IIO_PCIENTB_STRUCT;


/* HDRLOG1_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x40100168)                                                  */
/*       SKX (0x40100168)                                                     */
/* Register default value:              0x00000000                            */
#define HDRLOG1_IIO_PCIENTB_REG 0x0F004168
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x168
 */
typedef union {
  struct {
    UINT32 hdr : 32;
    /* hdr - Bits[31:0], ROS_V, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} HDRLOG1_IIO_PCIENTB_STRUCT;


/* HDRLOG2_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x4010016C)                                                  */
/*       SKX (0x4010016C)                                                     */
/* Register default value:              0x00000000                            */
#define HDRLOG2_IIO_PCIENTB_REG 0x0F00416C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x16c
 */
typedef union {
  struct {
    UINT32 hdr : 32;
    /* hdr - Bits[31:0], ROS_V, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} HDRLOG2_IIO_PCIENTB_STRUCT;


/* HDRLOG3_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x40100170)                                                  */
/*       SKX (0x40100170)                                                     */
/* Register default value:              0x00000000                            */
#define HDRLOG3_IIO_PCIENTB_REG 0x0F004170
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x170
 */
typedef union {
  struct {
    UINT32 hdr : 32;
    /* hdr - Bits[31:0], ROS_V, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} HDRLOG3_IIO_PCIENTB_STRUCT;


/* RPERRCMD_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x40100174)                                                  */
/*       SKX (0x40100174)                                                     */
/* Register default value:              0x00000000                            */
#define RPERRCMD_IIO_PCIENTB_REG 0x0F004174
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x174
 */
typedef union {
  struct {
    UINT32 correctable_error_reporting_enable : 1;
    /* correctable_error_reporting_enable - Bits[0:0], RW, default = 1'b0 
       Applies to root ports onlyEnable interrupt on correctable errors when set.
     */
    UINT32 non_fatal_error_reporting_enable : 1;
    /* non_fatal_error_reporting_enable - Bits[1:1], RW, default = 1'b0 
       Applies to root ports onlyEnable interrupt on a non-fatal error when set.
     */
    UINT32 fatal_error_reporting_enable : 1;
    /* fatal_error_reporting_enable - Bits[2:2], RW, default = 1'b0 
       Applies to root ports onlyEnable MSI/INTx interrupt on fatal errors when set.
     */
    UINT32 rsvd : 29;
    /* rsvd - Bits[31:3], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RPERRCMD_IIO_PCIENTB_STRUCT;


/* RPERRSTS_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x40100178)                                                  */
/*       SKX (0x40100178)                                                     */
/* Register default value:              0x00000000                            */
#define RPERRSTS_IIO_PCIENTB_REG 0x0F004178
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x178
 */
typedef union {
  struct {
    UINT32 correctable_error_received : 1;
    /* correctable_error_received - Bits[0:0], RW1CS, default = 1'b0  */
    UINT32 multiple_correctable_error_received : 1;
    /* multiple_correctable_error_received - Bits[1:1], RW1CS, default = 1'b0  */
    UINT32 error_fatal_nonfatal_received : 1;
    /* error_fatal_nonfatal_received - Bits[2:2], RW1CS, default = 1'b0  */
    UINT32 multiple_error_fatal_nonfatal_received : 1;
    /* multiple_error_fatal_nonfatal_received - Bits[3:3], RW1CS, default = 1'b0  */
    UINT32 first_uncorrectable_fatal : 1;
    /* first_uncorrectable_fatal - Bits[4:4], RW1CS, default = 1'b0  */
    UINT32 non_fatal_error_messages_received : 1;
    /* non_fatal_error_messages_received - Bits[5:5], RW1CS, default = 1'b0  */
    UINT32 fatal_error_messages_received : 1;
    /* fatal_error_messages_received - Bits[6:6], RW1CS, default = 1'b0  */
    UINT32 rsvd : 20;
    /* rsvd - Bits[26:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 advanced_error_interrupt_message_number : 5;
    /* advanced_error_interrupt_message_number - Bits[31:27], RO, default = 5'b00000  */
  } Bits;
  UINT32 Data;
} RPERRSTS_IIO_PCIENTB_STRUCT;


/* ERRSID_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x4010017C)                                                  */
/*       SKX (0x4010017C)                                                     */
/* Register default value:              0x00000000                            */
#define ERRSID_IIO_PCIENTB_REG 0x0F00417C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x17c
 */
typedef union {
  struct {
    UINT32 correctable_error_source_id : 16;
    /* correctable_error_source_id - Bits[15:0], ROS_V, default = 16'b0000000000000000  */
    UINT32 fatal_non_fatal_error_source_id : 16;
    /* fatal_non_fatal_error_source_id - Bits[31:16], ROS_V, default = 16'b0000000000000000  */
  } Bits;
  UINT32 Data;
} ERRSID_IIO_PCIENTB_STRUCT;


/* PERFCTRLSTS_0_IIO_PCIENTB_REG supported on:                                */
/*       SKX_A0 (0x40100180)                                                  */
/*       SKX (0x40100180)                                                     */
/* Register default value:              0x00183091                            */
#define PERFCTRLSTS_0_IIO_PCIENTB_REG 0x0F004180
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x180
 */
typedef union {
  struct {
    UINT32 read_stream_policy : 1;
    /* read_stream_policy - Bits[0:0], RW, default = 1'b1  */
    UINT32 read_passing_read_disable : 1;
    /* read_passing_read_disable - Bits[1:1], RW, default = 1'b0  */
    UINT32 nosnoopoprden : 1;
    /* nosnoopoprden - Bits[2:2], RW, default = 1'b0  */
    UINT32 nosnoopopwren : 1;
    /* nosnoopopwren - Bits[3:3], RW, default = 1'b0  */
    UINT32 read_stream_interleave_size : 1;
    /* read_stream_interleave_size - Bits[4:4], RW, default = 1'b1  */
    UINT32 forcenosnoop : 1;
    /* forcenosnoop - Bits[5:5], RW, default = 1'b0  */
    UINT32 rsvd_6 : 1;
    /* rsvd_6 - Bits[6:6], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 use_allocating_flow_wr : 1;
    /* use_allocating_flow_wr - Bits[7:7], RW, default = 1'b1  */
    UINT32 outstanding_requests_gen2 : 6;
    /* outstanding_requests_gen2 - Bits[13:8], RW, default = 6'b110000  */
    UINT32 rsvd_14 : 2;
    /* rsvd_14 - Bits[15:14], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 outstanding_requests_gen1 : 5;
    /* outstanding_requests_gen1 - Bits[20:16], RW, default = 5'b11000  */
    UINT32 rsvd_21 : 11;
    /* rsvd_21 - Bits[31:21], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PERFCTRLSTS_0_IIO_PCIENTB_STRUCT;


/* PERFCTRLSTS_1_IIO_PCIENTB_REG supported on:                                */
/*       SKX_A0 (0x40100184)                                                  */
/*       SKX (0x40100184)                                                     */
/* Register default value:              0x00001000                            */
#define PERFCTRLSTS_1_IIO_PCIENTB_REG 0x0F004184
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x184
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 3;
    /* rsvd_0 - Bits[2:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 max_read_completion_combine_size : 1;
    /* max_read_completion_combine_size - Bits[3:3], RW, default = 1'b0  */
    UINT32 rsvd_4 : 4;
    /* rsvd_4 - Bits[7:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 dca_reqid_override : 1;
    /* dca_reqid_override - Bits[8:8], RW, default = 1'b0  */
    UINT32 tphdis : 1;
    /* tphdis - Bits[9:9], RW, default = 1'b0  */
    UINT32 partial_cohrd_op : 1;
    /* partial_cohrd_op - Bits[10:10], RW_L, default = 1'b0  */
    UINT32 full_cohrd_op : 1;
    /* full_cohrd_op - Bits[11:11], RW_L, default = 1'b0  */
    UINT32 prioritize_tph : 1;
    /* prioritize_tph - Bits[12:12], RW, default = 1'b1 
       If you receive a Go-G (IODC flow) for a transaction with TPH as well, you can 
       use 
       this bit to decide which flow to use. If set, TPH gets preference and you send
       WbPushHint. If not set, IODC gets preference and you send CLCleanse.
     */
    UINT32 implicit_tph : 1;
    /* implicit_tph - Bits[13:13], RW, default = 1'b0 
       This CSR is for IODC flows for Hybrid Push mode. If set, it issues a WbPushMtoI 
       for an allocating write, if the TPH hint is not set, and we receive a Go-G (the 
       requested line is in remote socket). 
     */
    UINT32 implicit_nosnp : 1;
    /* implicit_nosnp - Bits[14:14], RW, default = 1'b0 
       This CSR is for IODC flows for Hybrid Alloc-Nonallocating mode. If set, it 
       issues a ClFlush for an allocating write, if the TPH hint is not set, and we 
       receive a Go-G (the requested line is in remote socket). 
     */
    UINT32 rsvd_15 : 17;
    /* rsvd_15 - Bits[31:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PERFCTRLSTS_1_IIO_PCIENTB_STRUCT;


/* MISCCTRLSTS_0_IIO_PCIENTB_REG supported on:                                */
/*       SKX_A0 (0x40100188)                                                  */
/*       SKX (0x40100188)                                                     */
/* Register default value:              0x60101000                            */
#define MISCCTRLSTS_0_IIO_PCIENTB_REG 0x0F004188
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x188
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 1;
    /* rsvd_0 - Bits[0:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 inbound_configuration_enable : 1;
    /* inbound_configuration_enable - Bits[1:1], RW_O, default = 1'b0  */
    UINT32 enable_acpi_mode_for_pm : 1;
    /* enable_acpi_mode_for_pm - Bits[2:2], RW, default = 1'b0  */
    UINT32 enable_acpi_mode_for_hotplug : 1;
    /* enable_acpi_mode_for_hotplug - Bits[3:3], RW, default = 1'b0  */
    UINT32 enable_system_error_only_for_aer : 1;
    /* enable_system_error_only_for_aer - Bits[4:4], RW, default = 1'b0  */
    UINT32 send_pme_turn_off_message : 1;
    /* send_pme_turn_off_message - Bits[5:5], RW_V, default = 1'b0  */
    UINT32 enable_timeout_for_receiving_pme_to_ack : 1;
    /* enable_timeout_for_receiving_pme_to_ack - Bits[6:6], RW, default = 1'b0  */
    UINT32 pme2acktoctrl : 2;
    /* pme2acktoctrl - Bits[8:7], RW, default = 2'b00  */
    UINT32 dispdspolling : 1;
    /* dispdspolling - Bits[9:9], RWS, default = 1'b0  */
    UINT32 rsvd_10 : 2;
    /* rsvd_10 - Bits[11:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 disable_ob_parity_check : 1;
    /* disable_ob_parity_check - Bits[12:12], RWS, default = 1'b1  */
    UINT32 tlp_on_any_lane : 1;
    /* tlp_on_any_lane - Bits[13:13], RWS, default = 1'b0  */
    UINT32 allow_one_np_os : 1;
    /* allow_one_np_os - Bits[14:14], RWS, default = 1'b0  */
    UINT32 dis_hdr_storage : 1;
    /* dis_hdr_storage - Bits[15:15], RWS, default = 1'b0  */
    UINT32 force_ep_biterr : 1;
    /* force_ep_biterr - Bits[16:16], RO, default = 1'b0  */
    UINT32 force_data_perr : 1;
    /* force_data_perr - Bits[17:17], RO, default = 1'b0  */
    UINT32 max_read_completion_combine_size : 1;
    /* max_read_completion_combine_size - Bits[18:18], RWS, default = 1'b0  */
    UINT32 rsvd_19 : 1;
    /* rsvd_19 - Bits[19:19], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 maltlp_32baddr64bhdr_en : 1;
    /* maltlp_32baddr64bhdr_en - Bits[20:20], RW, default = 1'b1  */
    UINT32 zero_ob_tc : 1;
    /* zero_ob_tc - Bits[21:21], RW_O, default = 1'b0  */
    UINT32 check_cpl_tc : 1;
    /* check_cpl_tc - Bits[22:22], RWS, default = 1'b0  */
    UINT32 phold_disable : 1;
    /* phold_disable - Bits[23:23], RW, default = 1'b0  */
    UINT32 peer2peer_memory_read_disable : 1;
    /* peer2peer_memory_read_disable - Bits[24:24], RW, default = 1'b0  */
    UINT32 rsvd_25 : 1;
    /* rsvd_25 - Bits[25:25], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 eoifd : 1;
    /* eoifd - Bits[26:26], RW_LV, default = 1'b0  */
    UINT32 system_interrupt_only_on_link_bw_management_status : 1;
    /* system_interrupt_only_on_link_bw_management_status - Bits[27:27], RWS, default = 1'b0  */
    UINT32 to_dis : 1;
    /* to_dis - Bits[28:28], RW, default = 1'b0  */
    UINT32 cfg_to_en : 1;
    /* cfg_to_en - Bits[29:29], RW, default = 1'b1  */
    UINT32 inbound_io_disable : 1;
    /* inbound_io_disable - Bits[30:30], RW_O, default = 1'b1  */
    UINT32 disable_l0s_on_transmitter : 1;
    /* disable_l0s_on_transmitter - Bits[31:31], RW, default = 1'b0 
       L0s is not supported on the processor.
     */
  } Bits;
  UINT32 Data;
} MISCCTRLSTS_0_IIO_PCIENTB_STRUCT;


/* MISCCTRLSTS_1_IIO_PCIENTB_REG supported on:                                */
/*       SKX_A0 (0x4010018C)                                                  */
/*       SKX (0x4010018C)                                                     */
/* Register default value:              0x00000000                            */
#define MISCCTRLSTS_1_IIO_PCIENTB_REG 0x0F00418C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x18c
 */
typedef union {
  struct {
    UINT32 acpi_pme_inten : 1;
    /* acpi_pme_inten - Bits[0:0], RW, default = 1'b0  */
    UINT32 override_system_error_on_pcie_correctable_error_enable : 1;
    /* override_system_error_on_pcie_correctable_error_enable - Bits[1:1], RW, default = 1'b0  */
    UINT32 override_system_error_on_pcie_non_fatal_error_enable : 1;
    /* override_system_error_on_pcie_non_fatal_error_enable - Bits[2:2], RW, default = 1'b0  */
    UINT32 override_system_error_on_pcie_fatal_error_enable : 1;
    /* override_system_error_on_pcie_fatal_error_enable - Bits[3:3], RW, default = 1'b0  */
    UINT32 formfactor : 1;
    /* formfactor - Bits[4:4], RWS, default = 1'b0  */
    UINT32 disable_mctp_broadcast_to_this_link : 1;
    /* disable_mctp_broadcast_to_this_link - Bits[5:5], RW_LB, default = 1'b0  */
    UINT32 problematic_port_for_lock_flows : 1;
    /* problematic_port_for_lock_flows - Bits[6:6], RW, default = 1'b0  */
    UINT32 rsvd_7 : 2;
    /* rsvd_7 - Bits[8:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 override_socketid_in_cplid : 1;
    /* override_socketid_in_cplid - Bits[9:9], RW, default = 1'b0  */
    UINT32 rsvd_10 : 6;
    /* rsvd_10 - Bits[15:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 received_pme_to_ack : 1;
    /* received_pme_to_ack - Bits[16:16], RW1C, default = 1'b0  */
    UINT32 locked_read_timed_out : 1;
    /* locked_read_timed_out - Bits[17:17], RW1CS, default = 1'b0  */
    UINT32 enable_sris : 1;
    /* enable_sris - Bits[18:18], RW, default = 1'b0  */
    UINT32 vcm_arb_in_vc1 : 1;
    /* vcm_arb_in_vc1 - Bits[19:19], RW, default = 1'b0  */
    UINT32 no_vcm_throttle_in_quiesce : 1;
    /* no_vcm_throttle_in_quiesce - Bits[20:20], RW, default = 1'b0  */
    UINT32 rsvd_21 : 11;
    /* rsvd_21 - Bits[31:21], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} MISCCTRLSTS_1_IIO_PCIENTB_STRUCT;


/* PCIE_IOU_BIF_CTRL_IIO_PCIENTB_REG supported on:                            */
/*       SKX_A0 (0x20100190)                                                  */
/*       SKX (0x20100190)                                                     */
/* Register default value:              0x0004                                */
#define PCIE_IOU_BIF_CTRL_IIO_PCIENTB_REG 0x0F002190
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU.  
 */
typedef union {
  struct {
    UINT16 iou_bifurcation_control : 3;
    /* iou_bifurcation_control - Bits[2:0], RWS_LB, default = 3'b100 
       To select a IOU bifurcation, software sets this field and then either
       a) sets bit 3 in this register to initiate training OR
       b) resets the entire Jaketown and on exit from that reset,
       Jaketown will bifurcate the ports per the setting in this field.
       For Device 1 Function 0:
       000: x4x4 (operate lanes 7:4 as x4, 3:0 as x4)
       001: x8
       others: Reserved
       For Device 2 Function 0:
       000: x4x4x4x4 (operate lanes 15:12 as x4, 11:8 as x4, 7:4 as x4 and 3:0 as x4)
       001: x4x4x8 (operate lanes 15:12 as x4, 11:8 as x4 and 7:0 as x8)
       010: x8x4x4 (operate lanes 15:8 as x8, 7:4 as x4 and 3:0 as x4)
       011: x8x8 (operate lanes 15:8 as x8, 7:0 as x8)
       100: x16
       others: Reserved
     */
    UINT16 iou_start_bifurcation : 1;
    /* iou_start_bifurcation - Bits[3:3], RW_LB, default = 1'b0 
       When software writes a 1 to this bit, IIO starts the port 0 bifurcation process. 
       After writing to this bit, software can poll the Data Link Layer link active bit 
       in the LNKSTS register to determine if a port is up and running. Once a port 
       bifurcation has been initiated by writing a 1 to this bit, software cannot 
       initiate any more write-1 to this bit (write of 0 is ok). 
       Notes:
       That this bit can be written to a 1 in the same write that changes values for 
       bits 2:0 in this register and in that case, the new value from the write to bits 
       2:0 take effect. 
       This bit always reads a 0b.
     */
    UINT16 rsvd : 12;
    /* rsvd - Bits[15:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} PCIE_IOU_BIF_CTRL_IIO_PCIENTB_STRUCT;






/* LNKCON_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x201001A0)                                                  */
/*       SKX (0x201001A0)                                                     */
/* Register default value:              0x0000                                */
#define LNKCON_IIO_PCIENTB_REG 0x0F0021A0
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * The PCI Express Link Control register controls the PCI Express Link specific 
 * parameters. The link control register needs some default values setup by the 
 * local host. This register is relocated to the enhanced configuration space 
 * region in while in NTB mode. In NTB/RP mode RP will program this register. In 
 * NTB/NTB mode local host BIOS will program this register 
 */
typedef union {
  struct {
    UINT16 rsvd_0 : 2;
    UINT16 rsvd_2 : 1;
    /* rsvd_2 - Bits[2:2], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 rsvd_3 : 1;
    UINT16 link_disable : 1;
    /* link_disable - Bits[4:4], RW, default = 1'b0  */
    UINT16 rsvd_5 : 11;
  } Bits;
  UINT16 Data;
} LNKCON_IIO_PCIENTB_STRUCT;


/* LNKSTS_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x201001A2)                                                  */
/*       SKX (0x201001A2)                                                     */
/* Register default value:              0x1001                                */
#define LNKSTS_IIO_PCIENTB_REG 0x0F0021A2
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x1a2
 */
typedef union {
  struct {
    UINT16 current_link_speed : 4;
    /* current_link_speed - Bits[3:0], RO_V, default = 4'b0001  */
    UINT16 negotiated_link_width : 6;
    /* negotiated_link_width - Bits[9:4], RO_V, default = 6'b000000  */
    UINT16 rsvd : 1;
    /* rsvd - Bits[10:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 link_training : 1;
    /* link_training - Bits[11:11], RO_V, default = 1'b0  */
    UINT16 slot_clock_configuration : 1;
    /* slot_clock_configuration - Bits[12:12], RW_O, default = 1'b1  */
    UINT16 data_link_layer_link_active : 1;
    /* data_link_layer_link_active - Bits[13:13], RO_V, default = 1'b0  */
    UINT16 link_bandwidth_management_status : 1;
    /* link_bandwidth_management_status - Bits[14:14], RW1C, default = 1'b0  */
    UINT16 link_autonomous_bandwidth_status : 1;
    /* link_autonomous_bandwidth_status - Bits[15:15], RW1C, default = 1'b0  */
  } Bits;
  UINT16 Data;
} LNKSTS_IIO_PCIENTB_STRUCT;
























/* ERRINJCAP_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x401001D0)                                                  */
/*       SKX (0x401001D0)                                                     */
/* Register default value:              0x2801000B                            */
#define ERRINJCAP_IIO_PCIENTB_REG 0x0F0041D0
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x1d0
 */
typedef union {
  struct {
    UINT32 extcapid : 16;
    /* extcapid - Bits[15:0], RO, default = 16'b0000000000001011  */
    UINT32 capver : 4;
    /* capver - Bits[19:16], RO, default = 4'b0001  */
    UINT32 nxtptr : 12;
    /* nxtptr - Bits[31:20], RO, default = 12'b001010000000  */
  } Bits;
  UINT32 Data;
} ERRINJCAP_IIO_PCIENTB_STRUCT;


/* ERRINJHDR_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x401001D4)                                                  */
/*       SKX (0x401001D4)                                                     */
/* Register default value:              0x00A10003                            */
#define ERRINJHDR_IIO_PCIENTB_REG 0x0F0041D4
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x1d4
 */
typedef union {
  struct {
    UINT32 vsecid : 16;
    /* vsecid - Bits[15:0], RO, default = 16'b0000000000000011  */
    UINT32 vsecrev : 4;
    /* vsecrev - Bits[19:16], RO, default = 4'b0001  */
    UINT32 vseclen : 12;
    /* vseclen - Bits[31:20], RO, default = 12'b000000001010  */
  } Bits;
  UINT32 Data;
} ERRINJHDR_IIO_PCIENTB_STRUCT;


/* ERRINJCON_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x201001D8)                                                  */
/*       SKX (0x201001D8)                                                     */
/* Register default value:              0x0000                                */
#define ERRINJCON_IIO_PCIENTB_REG 0x0F0021D8
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x1d8
 */
typedef union {
  struct {
    UINT16 errinjdis : 1;
    /* errinjdis - Bits[0:0], RW_O, default = 1'b0  */
    UINT16 cause_rcverr : 1;
    /* cause_rcverr - Bits[1:1], RW, default = 1'b0  */
    UINT16 cause_ctoerr : 1;
    /* cause_ctoerr - Bits[2:2], RW, default = 1'b0  */
    UINT16 rsvd : 13;
    /* rsvd - Bits[15:3], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} ERRINJCON_IIO_PCIENTB_STRUCT;


/* CTOCTRL_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x401001E0)                                                  */
/*       SKX (0x401001E0)                                                     */
/* Register default value:              0x00000000                            */
#define CTOCTRL_IIO_PCIENTB_REG 0x0F0041E0
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x1e0
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 8;
    /* rsvd_0 - Bits[7:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 xp_to_pcie_timeout_select : 2;
    /* xp_to_pcie_timeout_select - Bits[9:8], RW, default = 2'b00  */
    UINT32 rsvd_10 : 22;
    /* rsvd_10 - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} CTOCTRL_IIO_PCIENTB_STRUCT;


/* PCIE_LER_SS_CTRLSTS_IIO_PCIENTB_REG supported on:                          */
/*       SKX_A0 (0x401001E4)                                                  */
/*       SKX (0x401001E4)                                                     */
/* Register default value:              0x00000000                            */
#define PCIE_LER_SS_CTRLSTS_IIO_PCIENTB_REG 0x0F0041E4
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x1e4
 */
typedef union {
  struct {
    UINT32 ler_ss_enable : 1;
    /* ler_ss_enable - Bits[0:0], RWS, default = 1'b0  */
    UINT32 rsvd : 31;
    /* rsvd - Bits[31:1], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} PCIE_LER_SS_CTRLSTS_IIO_PCIENTB_STRUCT;


/* VPP_INDEX_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x401001F0)                                                  */
/*       SKX (0x401001F0)                                                     */
/* Register default value:              0x00000000                            */
#define VPP_INDEX_IIO_PCIENTB_REG 0x0F0041F0
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x1f0
 */
typedef union {
  struct {
    UINT32 index : 4;
    /* index - Bits[3:0], RW, default = 4'b0000 
       VPP Port SLOT Register Index
       This field specifies which of the 16 I/O Extender ports will be used for this 
       Root Port. There are 16 possible ports (8 possible I/O extenders with 2 ports 
       each). 
       
     */
    UINT32 rsvd_4 : 3;
    /* rsvd_4 - Bits[6:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 vpp_enable : 1;
    /* vpp_enable - Bits[7:7], RW, default = 1'b0 
       VPP Hotplug Enable
       Enables this port to send and receive messages to and from the VPP Port.
     */
    UINT32 rsvd_8 : 24;
    /* rsvd_8 - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} VPP_INDEX_IIO_PCIENTB_STRUCT;


/* XPCORERRSTS_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x40100200)                                                  */
/*       SKX (0x40100200)                                                     */
/* Register default value:              0x00000000                            */
#define XPCORERRSTS_IIO_PCIENTB_REG 0x0F004200
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x200
 */
typedef union {
  struct {
    UINT32 pci_link_bandwidth_changed_status : 1;
    /* pci_link_bandwidth_changed_status - Bits[0:0], RW1CS, default = 1'b0  */
    UINT32 msgd_gt_16dw : 1;
    /* msgd_gt_16dw - Bits[1:1], RW1CS, default = 1'b0  */
    UINT32 rsvd : 30;
    /* rsvd - Bits[31:2], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPCORERRSTS_IIO_PCIENTB_STRUCT;


/* XPCORERRMSK_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x40100204)                                                  */
/*       SKX (0x40100204)                                                     */
/* Register default value:              0x00000000                            */
#define XPCORERRMSK_IIO_PCIENTB_REG 0x0F004204
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x204
 */
typedef union {
  struct {
    UINT32 pci_link_bandwidth_changed_mask : 1;
    /* pci_link_bandwidth_changed_mask - Bits[0:0], RWS, default = 1'b0  */
    UINT32 msgd_gt_16dw_errmask : 1;
    /* msgd_gt_16dw_errmask - Bits[1:1], RWS, default = 1'b0  */
    UINT32 rsvd : 30;
    /* rsvd - Bits[31:2], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPCORERRMSK_IIO_PCIENTB_STRUCT;


/* XPUNCERRSTS_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x40100208)                                                  */
/*       SKX (0x40100208)                                                     */
/* Register default value:              0x00000000                            */
#define XPUNCERRSTS_IIO_PCIENTB_REG 0x0F004208
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x208
 */
typedef union {
  struct {
    UINT32 unused0 : 1;
    /* unused0 - Bits[0:0], RW1CS, default = 1'b0  */
    UINT32 outbound_switch_fifo_data_parity_error_detected : 1;
    /* outbound_switch_fifo_data_parity_error_detected - Bits[1:1], RW1CS, default = 1'b0  */
    UINT32 unused2 : 1;
    /* unused2 - Bits[2:2], RW1CS, default = 1'b0  */
    UINT32 sent_completion_with_completer_abort : 1;
    /* sent_completion_with_completer_abort - Bits[3:3], RW1CS, default = 1'b0  */
    UINT32 sent_completion_with_unsupported_request : 1;
    /* sent_completion_with_unsupported_request - Bits[4:4], RW1CS, default = 1'b0  */
    UINT32 received_pcie_completion_with_ca_status : 1;
    /* received_pcie_completion_with_ca_status - Bits[5:5], RW1CS, default = 1'b0  */
    UINT32 received_pcie_completion_with_ur_status : 1;
    /* received_pcie_completion_with_ur_status - Bits[6:6], RW1CS, default = 1'b0  */
    UINT32 unused7 : 1;
    /* unused7 - Bits[7:7], RW1CS, default = 1'b0  */
    UINT32 received_msi_writes_greater_than_a_dword_data : 1;
    /* received_msi_writes_greater_than_a_dword_data - Bits[8:8], RW1CS, default = 1'b0  */
    UINT32 outbound_poisoned_data : 1;
    /* outbound_poisoned_data - Bits[9:9], RW1CS, default = 1'b0  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPUNCERRSTS_IIO_PCIENTB_STRUCT;


/* XPUNCERRMSK_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x4010020C)                                                  */
/*       SKX (0x4010020C)                                                     */
/* Register default value:              0x00000000                            */
#define XPUNCERRMSK_IIO_PCIENTB_REG 0x0F00420C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x20c
 */
typedef union {
  struct {
    UINT32 unused0 : 1;
    /* unused0 - Bits[0:0], RWS, default = 1'b0  */
    UINT32 outbound_switch_fifo_data_parity_error_detected_mask : 1;
    /* outbound_switch_fifo_data_parity_error_detected_mask - Bits[1:1], RWS, default = 1'b0  */
    UINT32 unused2 : 1;
    /* unused2 - Bits[2:2], RWS, default = 1'b0  */
    UINT32 sent_completion_with_completer_abort_mask : 1;
    /* sent_completion_with_completer_abort_mask - Bits[3:3], RWS, default = 1'b0  */
    UINT32 sent_completion_with_unsupported_request_mask : 1;
    /* sent_completion_with_unsupported_request_mask - Bits[4:4], RWS, default = 1'b0  */
    UINT32 received_pcie_completion_with_ca_status_mask : 1;
    /* received_pcie_completion_with_ca_status_mask - Bits[5:5], RWS, default = 1'b0  */
    UINT32 received_pcie_completion_with_ur_status_mask : 1;
    /* received_pcie_completion_with_ur_status_mask - Bits[6:6], RWS, default = 1'b0  */
    UINT32 unused7 : 1;
    /* unused7 - Bits[7:7], RWS, default = 1'b0  */
    UINT32 received_msi_writes_greater_than_a_dword_data_mask : 1;
    /* received_msi_writes_greater_than_a_dword_data_mask - Bits[8:8], RWS, default = 1'b0  */
    UINT32 outbound_poisoned_data_mask : 1;
    /* outbound_poisoned_data_mask - Bits[9:9], RWS, default = 1'b0  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPUNCERRMSK_IIO_PCIENTB_STRUCT;


/* XPUNCERRSEV_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x40100210)                                                  */
/*       SKX (0x40100210)                                                     */
/* Register default value:              0x00000002                            */
#define XPUNCERRSEV_IIO_PCIENTB_REG 0x0F004210
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x210
 */
typedef union {
  struct {
    UINT32 unused0 : 1;
    /* unused0 - Bits[0:0], RWS, default = 1'b0  */
    UINT32 outbound_switch_fifo_data_parity_error_detected_severity : 1;
    /* outbound_switch_fifo_data_parity_error_detected_severity - Bits[1:1], RWS, default = 1'b1  */
    UINT32 unused2 : 1;
    /* unused2 - Bits[2:2], RWS, default = 1'b0  */
    UINT32 sent_completion_with_completer_abort_severity : 1;
    /* sent_completion_with_completer_abort_severity - Bits[3:3], RWS, default = 1'b0  */
    UINT32 sent_completion_with_unsupported_request_severity : 1;
    /* sent_completion_with_unsupported_request_severity - Bits[4:4], RWS, default = 1'b0  */
    UINT32 received_pcie_completion_with_ca_status_severity : 1;
    /* received_pcie_completion_with_ca_status_severity - Bits[5:5], RWS, default = 1'b0  */
    UINT32 received_pcie_completion_with_ur_status_severity : 1;
    /* received_pcie_completion_with_ur_status_severity - Bits[6:6], RWS, default = 1'b0  */
    UINT32 unused7 : 1;
    /* unused7 - Bits[7:7], RWS, default = 1'b0  */
    UINT32 received_msi_writes_greater_than_a_dword_data_severity : 1;
    /* received_msi_writes_greater_than_a_dword_data_severity - Bits[8:8], RWS, default = 1'b0  */
    UINT32 outbound_poisoned_data_severity : 1;
    /* outbound_poisoned_data_severity - Bits[9:9], RWS, default = 1'b0  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPUNCERRSEV_IIO_PCIENTB_STRUCT;


/* XPUNCERRPTR_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x10100214)                                                  */
/*       SKX (0x10100214)                                                     */
/* Register default value:              0x00                                  */
#define XPUNCERRPTR_IIO_PCIENTB_REG 0x0F001214
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x214
 */
typedef union {
  struct {
    UINT8 xp_uncorrectable_first_error_pointer : 5;
    /* xp_uncorrectable_first_error_pointer - Bits[4:0], ROS_V, default = 5'b00000  */
    UINT8 rsvd : 3;
    /* rsvd - Bits[7:5], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT8 Data;
} XPUNCERRPTR_IIO_PCIENTB_STRUCT;


/* UNCEDMASK_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x40100218)                                                  */
/*       SKX (0x40100218)                                                     */
/* Register default value:              0x00000000                            */
#define UNCEDMASK_IIO_PCIENTB_REG 0x0F004218
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x218
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 4;
    UINT32 data_link_layer_protocol_error_detect_mask : 1;
    /* data_link_layer_protocol_error_detect_mask - Bits[4:4], RWS, default = 1'b0  */
    UINT32 surprise_down_error_detect_mask : 1;
    /* surprise_down_error_detect_mask - Bits[5:5], RWS, default = 1'b0  */
    UINT32 rsvd_6 : 6;
    UINT32 poisoned_tlp_detect_mask : 1;
    /* poisoned_tlp_detect_mask - Bits[12:12], RWS, default = 1'b0  */
    UINT32 flow_control_protocol_error_detect_mask : 1;
    /* flow_control_protocol_error_detect_mask - Bits[13:13], RWS, default = 1'b0  */
    UINT32 completion_time_out_detect_mask : 1;
    /* completion_time_out_detect_mask - Bits[14:14], RWS, default = 1'b0  */
    UINT32 completer_abort_detect_mask : 1;
    /* completer_abort_detect_mask - Bits[15:15], RWS, default = 1'b0  */
    UINT32 unexpected_completion_detect_mask : 1;
    /* unexpected_completion_detect_mask - Bits[16:16], RWS, default = 1'b0  */
    UINT32 receiver_buffer_overflow_detect_mask : 1;
    /* receiver_buffer_overflow_detect_mask - Bits[17:17], RWS, default = 1'b0  */
    UINT32 malformed_tlp_detect_mask : 1;
    /* malformed_tlp_detect_mask - Bits[18:18], RWS, default = 1'b0  */
    UINT32 ecrc_error_detect_mask : 1;
    /* ecrc_error_detect_mask - Bits[19:19], RWS, default = 1'b0  */
    UINT32 received_an_unsupported_request_detect_mask : 1;
    /* received_an_unsupported_request_detect_mask - Bits[20:20], RWS, default = 1'b0  */
    UINT32 acs_violation_detect_mask : 1;
    /* acs_violation_detect_mask - Bits[21:21], RWS, default = 1'b0  */
    UINT32 rsvd : 10;
    /* rsvd - Bits[31:22], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} UNCEDMASK_IIO_PCIENTB_STRUCT;


/* COREDMASK_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x4010021C)                                                  */
/*       SKX (0x4010021C)                                                     */
/* Register default value:              0x00000000                            */
#define COREDMASK_IIO_PCIENTB_REG 0x0F00421C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x21c
 */
typedef union {
  struct {
    UINT32 receiver_error_detect_mask : 1;
    /* receiver_error_detect_mask - Bits[0:0], RWS, default = 1'b0  */
    UINT32 rsvd_1 : 5;
    UINT32 bad_tlp_detect_mask : 1;
    /* bad_tlp_detect_mask - Bits[6:6], RWS, default = 1'b0  */
    UINT32 bad_dllp_detect_mask : 1;
    /* bad_dllp_detect_mask - Bits[7:7], RWS, default = 1'b0  */
    UINT32 replay_num_rollover_detect_mask : 1;
    /* replay_num_rollover_detect_mask - Bits[8:8], RWS, default = 1'b0  */
    UINT32 rsvd_9 : 3;
    UINT32 replay_timer_time_out_detect_mask : 1;
    /* replay_timer_time_out_detect_mask - Bits[12:12], RWS, default = 1'b0  */
    UINT32 advisory_non_fatal_error_detect_mask : 1;
    /* advisory_non_fatal_error_detect_mask - Bits[13:13], RWS, default = 1'b0  */
    UINT32 rsvd : 18;
    /* rsvd - Bits[31:14], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} COREDMASK_IIO_PCIENTB_STRUCT;


/* RPEDMASK_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x40100220)                                                  */
/*       SKX (0x40100220)                                                     */
/* Register default value:              0x00000000                            */
#define RPEDMASK_IIO_PCIENTB_REG 0x0F004220
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x220
 */
typedef union {
  struct {
    UINT32 correctable_error_detected_status_mask : 1;
    /* correctable_error_detected_status_mask - Bits[0:0], RWS, default = 1'b0  */
    UINT32 non_fatal_error_detected_status_mask : 1;
    /* non_fatal_error_detected_status_mask - Bits[1:1], RWS, default = 1'b0  */
    UINT32 fatal_error_detected_status_mask : 1;
    /* fatal_error_detected_status_mask - Bits[2:2], RWS, default = 1'b0  */
    UINT32 rsvd : 29;
    /* rsvd - Bits[31:3], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RPEDMASK_IIO_PCIENTB_STRUCT;


/* XPUNCEDMASK_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x40100224)                                                  */
/*       SKX (0x40100224)                                                     */
/* Register default value:              0x00000000                            */
#define XPUNCEDMASK_IIO_PCIENTB_REG 0x0F004224
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x224
 */
typedef union {
  struct {
    UINT32 unused0 : 1;
    /* unused0 - Bits[0:0], RWS, default = 1'b0  */
    UINT32 outbound_switch_fifo_data_parity_error_detect_mask : 1;
    /* outbound_switch_fifo_data_parity_error_detect_mask - Bits[1:1], RWS, default = 1'b0  */
    UINT32 unused2 : 1;
    /* unused2 - Bits[2:2], RWS, default = 1'b0  */
    UINT32 sent_completion_with_completer_abort_detect_mask : 1;
    /* sent_completion_with_completer_abort_detect_mask - Bits[3:3], RWS, default = 1'b0  */
    UINT32 sent_completion_with_unsupported_request_detect_mask : 1;
    /* sent_completion_with_unsupported_request_detect_mask - Bits[4:4], RWS, default = 1'b0  */
    UINT32 received_pcie_completion_with_ca_detect_mask : 1;
    /* received_pcie_completion_with_ca_detect_mask - Bits[5:5], RWS, default = 1'b0  */
    UINT32 received_pcie_completion_with_ur_detect_mask : 1;
    /* received_pcie_completion_with_ur_detect_mask - Bits[6:6], RWS, default = 1'b0  */
    UINT32 unused7 : 1;
    /* unused7 - Bits[7:7], RWS, default = 1'b0  */
    UINT32 received_msi_writes_greater_than_a_dword_data_detect_mask : 1;
    /* received_msi_writes_greater_than_a_dword_data_detect_mask - Bits[8:8], RWS, default = 1'b0  */
    UINT32 outbound_poisoned_data_detect_mask : 1;
    /* outbound_poisoned_data_detect_mask - Bits[9:9], RWS, default = 1'b0  */
    UINT32 rsvd : 22;
    /* rsvd - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPUNCEDMASK_IIO_PCIENTB_STRUCT;


/* XPCOREDMASK_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x40100228)                                                  */
/*       SKX (0x40100228)                                                     */
/* Register default value:              0x00000000                            */
#define XPCOREDMASK_IIO_PCIENTB_REG 0x0F004228
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x228
 */
typedef union {
  struct {
    UINT32 pci_link_bandwidth_changed_detect_mask : 1;
    /* pci_link_bandwidth_changed_detect_mask - Bits[0:0], RWS, default = 1'b0  */
    UINT32 msgd_gt_16dw_detmask : 1;
    /* msgd_gt_16dw_detmask - Bits[1:1], RWS, default = 1'b0  */
    UINT32 rsvd : 30;
    /* rsvd - Bits[31:2], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPCOREDMASK_IIO_PCIENTB_STRUCT;


/* XPGLBERRSTS_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x20100230)                                                  */
/*       SKX (0x20100230)                                                     */
/* Register default value:              0x0000                                */
#define XPGLBERRSTS_IIO_PCIENTB_REG 0x0F002230
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x230
 */
typedef union {
  struct {
    UINT16 pcie_aer_fatal_error : 1;
    /* pcie_aer_fatal_error - Bits[0:0], RW1CS, default = 1'b0  */
    UINT16 pcie_aer_non_fatal_error : 1;
    /* pcie_aer_non_fatal_error - Bits[1:1], RW1CS, default = 1'b0  */
    UINT16 pcie_aer_correctable_error : 1;
    /* pcie_aer_correctable_error - Bits[2:2], RW1CS, default = 1'b0  */
    UINT16 rsvd : 13;
    /* rsvd - Bits[15:3], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} XPGLBERRSTS_IIO_PCIENTB_STRUCT;


/* XPGLBERRPTR_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x20100232)                                                  */
/*       SKX (0x20100232)                                                     */
/* Register default value:              0x0000                                */
#define XPGLBERRPTR_IIO_PCIENTB_REG 0x0F002232
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x232
 */
typedef union {
  struct {
    UINT16 xp_cluster_global_first_error_pointer : 3;
    /* xp_cluster_global_first_error_pointer - Bits[2:0], ROS_V, default = 3'b000  */
    UINT16 rsvd : 13;
    /* rsvd - Bits[15:3], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} XPGLBERRPTR_IIO_PCIENTB_STRUCT;


/* PXP2CAP_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x40100250)                                                  */
/*       SKX (0x40100250)                                                     */
/* Register default value:              0x28010019                            */
#define PXP2CAP_IIO_PCIENTB_REG 0x0F004250
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x250
 */
typedef union {
  struct {
    UINT32 id : 16;
    /* id - Bits[15:0], RW_O, default = 16'b0000000000011001 
       This field is a PCI SIG defined ID number that indicates the nature and format 
       of the Extended Capability. PCI Express Extended Capability ID for the Secondary 
       PCI Expresss Extended Capability is 0019h. 
     */
    UINT32 version : 4;
    /* version - Bits[19:16], RW_O, default = 4'b0001 
       This field is a PCI-SIG defined version number that indicates the version of the 
       Capability structure present. 
     */
    UINT32 nxtptr : 12;
    /* nxtptr - Bits[31:20], RO, default = 12'b001010000000 
       This field contains the offset to the next PCI Express Extended Capability 
       structure or 000h if no other items exist in the linked list of capabilities. 
     */
  } Bits;
  UINT32 Data;
} PXP2CAP_IIO_PCIENTB_STRUCT;


/* LNKCON3_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x40100254)                                                  */
/*       SKX (0x40100254)                                                     */
/* Register default value:              0x00000000                            */
#define LNKCON3_IIO_PCIENTB_REG 0x0F004254
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x254
 */
typedef union {
  struct {
    UINT32 perfeq : 1;
    /* perfeq - Bits[0:0], RW, default = 1'b0 
       When this register is 1b and a 1b is written to the 'Link Retrain' register with 
       'Target Link Speed' set to 8GT/s, the Upstream component must perform 
       Transmitter Equalization. 
     */
    UINT32 lnkeqreqinten : 1;
    /* lnkeqreqinten - Bits[1:1], RW, default = 1'b0 
       When Set, this bit enables the generation of interrupt to indicate that the Link 
       Equalization Request bit has been set. 
       Notes:
       Not implemented in A0
     */
    UINT32 rsvd : 30;
    /* rsvd - Bits[31:2], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LNKCON3_IIO_PCIENTB_STRUCT;


/* LNERRSTS_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x40100258)                                                  */
/*       SKX (0x40100258)                                                     */
/* Register default value:              0x00000000                            */
#define LNERRSTS_IIO_PCIENTB_REG 0x0F004258
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x258
 */
typedef union {
  struct {
    UINT32 lane : 16;
    /* lane - Bits[15:0], RW1CS, default = 16'b0000000000000000 
       A value of 1b in any bit indicates if the corresponding PCIe Express Lane 
       detected lane based error. Contents are valid only when the link is enabled. 
       bit 0 Lane 0 Error Detected
       bit 1 Lane 1 Error Detected
       bit 2 Lane 2 Error Detected
       bit 3 Lane 3 Error Detected
       bit 4 Lane 4 Error Detected (not used when the link is bifurcated as x4)
       bit 5 Lane 5 Error Detected (not used when the link is bifurcated as x4)
       bit 6 Lane 6 Error Detected (not used when the link is bifurcated as x4)
       bit 7 Lane 7 Error Detected (not used when the link is bifurcated as x4)
       bit 8 Lane 8 Error Detected (not used when the link is bifurcated as x4 or x8)
       bit 9 Lane 9 Error Detected (not used when the link is bifurcated as x4 or x8)
       bit 10 Lane 10 Error Detected (not used when the link is bifurcated as x4 or x8)
       bit 11 Lane 11 Error Detected (not used when the link is bifurcated as x4 or x8)
       bit 12 Lane 12 Error Detected (not used when the link is bifurcated as x4 or x8)
       bit 13 Lane 13 Error Detected (not used when the link is bifurcated as x4 or x8)
       bit 14 Lane 14 Error Detected (not used when the link is bifurcated as x4 or x8)
       bit 15 Lane 15 Error Detected (not used when the link is bifurcated as x4 or x8)
     */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LNERRSTS_IIO_PCIENTB_STRUCT;


/* LN0EQ_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x2010025C)                                                  */
/*       SKX (0x2010025C)                                                     */
/* Register default value:              0x2878                                */
#define LN0EQ_IIO_PCIENTB_REG 0x0F00225C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x25c
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN0EQ_IIO_PCIENTB_STRUCT;


/* LN1EQ_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x2010025E)                                                  */
/*       SKX (0x2010025E)                                                     */
/* Register default value:              0x2878                                */
#define LN1EQ_IIO_PCIENTB_REG 0x0F00225E
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x25e
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN1EQ_IIO_PCIENTB_STRUCT;


/* LN2EQ_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x20100260)                                                  */
/*       SKX (0x20100260)                                                     */
/* Register default value:              0x2878                                */
#define LN2EQ_IIO_PCIENTB_REG 0x0F002260
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x260
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN2EQ_IIO_PCIENTB_STRUCT;


/* LN3EQ_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x20100262)                                                  */
/*       SKX (0x20100262)                                                     */
/* Register default value:              0x2878                                */
#define LN3EQ_IIO_PCIENTB_REG 0x0F002262
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x262
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN3EQ_IIO_PCIENTB_STRUCT;


/* LN4EQ_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x20100264)                                                  */
/*       SKX (0x20100264)                                                     */
/* Register default value:              0x2878                                */
#define LN4EQ_IIO_PCIENTB_REG 0x0F002264
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x264
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN4EQ_IIO_PCIENTB_STRUCT;


/* LN5EQ_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x20100266)                                                  */
/*       SKX (0x20100266)                                                     */
/* Register default value:              0x2878                                */
#define LN5EQ_IIO_PCIENTB_REG 0x0F002266
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x266
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN5EQ_IIO_PCIENTB_STRUCT;


/* LN6EQ_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x20100268)                                                  */
/*       SKX (0x20100268)                                                     */
/* Register default value:              0x2878                                */
#define LN6EQ_IIO_PCIENTB_REG 0x0F002268
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x268
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN6EQ_IIO_PCIENTB_STRUCT;


/* LN7EQ_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x2010026A)                                                  */
/*       SKX (0x2010026A)                                                     */
/* Register default value:              0x2878                                */
#define LN7EQ_IIO_PCIENTB_REG 0x0F00226A
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x26a
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN7EQ_IIO_PCIENTB_STRUCT;


/* LN8EQ_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x2010026C)                                                  */
/*       SKX (0x2010026C)                                                     */
/* Register default value:              0x2878                                */
#define LN8EQ_IIO_PCIENTB_REG 0x0F00226C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x26c
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN8EQ_IIO_PCIENTB_STRUCT;


/* LN9EQ_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x2010026E)                                                  */
/*       SKX (0x2010026E)                                                     */
/* Register default value:              0x2878                                */
#define LN9EQ_IIO_PCIENTB_REG 0x0F00226E
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x26e
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN9EQ_IIO_PCIENTB_STRUCT;


/* LN10EQ_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x20100270)                                                  */
/*       SKX (0x20100270)                                                     */
/* Register default value:              0x2878                                */
#define LN10EQ_IIO_PCIENTB_REG 0x0F002270
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x270
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN10EQ_IIO_PCIENTB_STRUCT;


/* LN11EQ_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x20100272)                                                  */
/*       SKX (0x20100272)                                                     */
/* Register default value:              0x2878                                */
#define LN11EQ_IIO_PCIENTB_REG 0x0F002272
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x272
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN11EQ_IIO_PCIENTB_STRUCT;


/* LN12EQ_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x20100274)                                                  */
/*       SKX (0x20100274)                                                     */
/* Register default value:              0x2878                                */
#define LN12EQ_IIO_PCIENTB_REG 0x0F002274
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x274
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN12EQ_IIO_PCIENTB_STRUCT;


/* LN13EQ_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x20100276)                                                  */
/*       SKX (0x20100276)                                                     */
/* Register default value:              0x2878                                */
#define LN13EQ_IIO_PCIENTB_REG 0x0F002276
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x276
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN13EQ_IIO_PCIENTB_STRUCT;


/* LN14EQ_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x20100278)                                                  */
/*       SKX (0x20100278)                                                     */
/* Register default value:              0x2878                                */
#define LN14EQ_IIO_PCIENTB_REG 0x0F002278
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x278
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN14EQ_IIO_PCIENTB_STRUCT;


/* LN15EQ_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x2010027A)                                                  */
/*       SKX (0x2010027A)                                                     */
/* Register default value:              0x2878                                */
#define LN15EQ_IIO_PCIENTB_REG 0x0F00227A
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x27a
 */
typedef union {
  struct {
    UINT16 uptxpreset : 4;
    /* uptxpreset - Bits[3:0], RW_O, default = 4'b1000  */
    UINT16 uprxpreset : 3;
    /* uprxpreset - Bits[6:4], RO, default = 3'b111  */
    UINT16 rsvd_7 : 1;
    /* rsvd_7 - Bits[7:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 dntxpreset : 4;
    /* dntxpreset - Bits[11:8], RW_O, default = 4'b1000  */
    UINT16 dnrxpreset : 3;
    /* dnrxpreset - Bits[14:12], RW_O, default = 3'b010  */
    UINT16 rsvd_15 : 1;
    /* rsvd_15 - Bits[15:15], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} LN15EQ_IIO_PCIENTB_STRUCT;


/* LER_CAP_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x40100280)                                                  */
/*       SKX (0x40100280)                                                     */
/* Register default value:              0x2981000B                            */
#define LER_CAP_IIO_PCIENTB_REG 0x0F004280
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x280
 */
typedef union {
  struct {
    UINT32 capid : 16;
    /* capid - Bits[15:0], RO, default = 16'b0000000000001011  */
    UINT32 capver : 4;
    /* capver - Bits[19:16], RO, default = 4'b0001  */
    UINT32 nxtptr : 12;
    /* nxtptr - Bits[31:20], RO_V, default = 12'b001010011000 
       May not point to 0x298 depending on processor type or SKU.
     */
  } Bits;
  UINT32 Data;
} LER_CAP_IIO_PCIENTB_STRUCT;


/* LER_HDR_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x40100284)                                                  */
/*       SKX (0x40100284)                                                     */
/* Register default value:              0x01830005                            */
#define LER_HDR_IIO_PCIENTB_REG 0x0F004284
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x284
 */
typedef union {
  struct {
    UINT32 vsecid : 16;
    /* vsecid - Bits[15:0], RO, default = 16'b0000000000000101  */
    UINT32 vsecrev : 4;
    /* vsecrev - Bits[19:16], RO, default = 4'b0011  */
    UINT32 vseclen : 12;
    /* vseclen - Bits[31:20], RO, default = 12'b000000011000  */
  } Bits;
  UINT32 Data;
} LER_HDR_IIO_PCIENTB_STRUCT;


/* LER_CTRLSTS_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x40100288)                                                  */
/*       SKX (0x40100288)                                                     */
/* Register default value:              0x00000000                            */
#define LER_CTRLSTS_IIO_PCIENTB_REG 0x0F004288
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x288
 */
typedef union {
  struct {
    UINT32 ler_ss_enable : 1;
    /* ler_ss_enable - Bits[0:0], RWS, default = 1'b0  */
    UINT32 ler_ss_severity_en : 1;
    /* ler_ss_severity_en - Bits[1:1], RWS, default = 1'b0  */
    UINT32 ler_ss_drop_txn : 1;
    /* ler_ss_drop_txn - Bits[2:2], RWS, default = 1'b0  */
    UINT32 ler_ss_inten : 1;
    /* ler_ss_inten - Bits[3:3], RWS, default = 1'b0  */
    UINT32 rsvd : 26;
    /* rsvd - Bits[29:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 ler_ss_lnk_up_ok : 1;
    /* ler_ss_lnk_up_ok - Bits[30:30], ROS_V, default = 1'b0  */
    UINT32 ler_ss_status : 1;
    /* ler_ss_status - Bits[31:31], RW1CS, default = 1'b0  */
  } Bits;
  UINT32 Data;
} LER_CTRLSTS_IIO_PCIENTB_STRUCT;


/* LER_UNCERRMSK_IIO_PCIENTB_REG supported on:                                */
/*       SKX_A0 (0x4010028C)                                                  */
/*       SKX (0x4010028C)                                                     */
/* Register default value:              0x00000000                            */
#define LER_UNCERRMSK_IIO_PCIENTB_REG 0x0F00428C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x28c
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 4;
    UINT32 data_link_layer_protocol_error_mask : 1;
    /* data_link_layer_protocol_error_mask - Bits[4:4], RWS, default = 1'b0  */
    UINT32 surprise_down_error_mask : 1;
    /* surprise_down_error_mask - Bits[5:5], RWS, default = 1'b0  */
    UINT32 rsvd_6 : 6;
    UINT32 poisoned_tlp_mask : 1;
    /* poisoned_tlp_mask - Bits[12:12], RWS, default = 1'b0  */
    UINT32 flow_control_protocol_error_mask : 1;
    /* flow_control_protocol_error_mask - Bits[13:13], RWS, default = 1'b0  */
    UINT32 completion_time_out_mask : 1;
    /* completion_time_out_mask - Bits[14:14], RWS, default = 1'b0  */
    UINT32 completer_abort_mask : 1;
    /* completer_abort_mask - Bits[15:15], RWS, default = 1'b0  */
    UINT32 unexpected_completion_mask : 1;
    /* unexpected_completion_mask - Bits[16:16], RWS, default = 1'b0  */
    UINT32 receiver_buffer_overflow_mask : 1;
    /* receiver_buffer_overflow_mask - Bits[17:17], RWS, default = 1'b0  */
    UINT32 malformed_tlp_mask : 1;
    /* malformed_tlp_mask - Bits[18:18], RWS, default = 1'b0  */
    UINT32 ecrc_err_mask : 1;
    /* ecrc_err_mask - Bits[19:19], RWS, default = 1'b0  */
    UINT32 unsupported_request_error_mask : 1;
    /* unsupported_request_error_mask - Bits[20:20], RWS, default = 1'b0  */
    UINT32 acs_violation_mask : 1;
    /* acs_violation_mask - Bits[21:21], RWS, default = 1'b0  */
    UINT32 rsvd : 10;
    /* rsvd - Bits[31:22], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LER_UNCERRMSK_IIO_PCIENTB_STRUCT;


/* LER_XPUNCERRMSK_IIO_PCIENTB_REG supported on:                              */
/*       SKX_A0 (0x40100290)                                                  */
/*       SKX (0x40100290)                                                     */
/* Register default value:              0x00000000                            */
#define LER_XPUNCERRMSK_IIO_PCIENTB_REG 0x0F004290
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x290
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 3;
    /* rsvd_0 - Bits[2:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 sent_completion_with_ca_mask : 1;
    /* sent_completion_with_ca_mask - Bits[3:3], RWS, default = 1'b0  */
    UINT32 sent_completion_with_ur_mask : 1;
    /* sent_completion_with_ur_mask - Bits[4:4], RWS, default = 1'b0  */
    UINT32 received_pcie_completion_with_ca_status_mask : 1;
    /* received_pcie_completion_with_ca_status_mask - Bits[5:5], RWS, default = 1'b0  */
    UINT32 received_pcie_completion_with_ur_status_mask : 1;
    /* received_pcie_completion_with_ur_status_mask - Bits[6:6], RWS, default = 1'b0  */
    UINT32 rsvd_7 : 2;
    /* rsvd_7 - Bits[8:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 outbound_poisoned_data_mask : 1;
    /* outbound_poisoned_data_mask - Bits[9:9], RWS, default = 1'b0  */
    UINT32 rsvd_10 : 22;
    /* rsvd_10 - Bits[31:10], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LER_XPUNCERRMSK_IIO_PCIENTB_STRUCT;


/* LER_RPERRMSK_IIO_PCIENTB_REG supported on:                                 */
/*       SKX_A0 (0x40100294)                                                  */
/*       SKX (0x40100294)                                                     */
/* Register default value:              0x00000000                            */
#define LER_RPERRMSK_IIO_PCIENTB_REG 0x0F004294
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x294
 */
typedef union {
  struct {
    UINT32 rsvd_0 : 5;
    /* rsvd_0 - Bits[4:0], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 non_fatal_error_message_received_mask : 1;
    /* non_fatal_error_message_received_mask - Bits[5:5], RWS, default = 1'b0  */
    UINT32 fatal_error_message_received_mask : 1;
    /* fatal_error_message_received_mask - Bits[6:6], RWS, default = 1'b0  */
    UINT32 rsvd_7 : 25;
    /* rsvd_7 - Bits[31:7], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} LER_RPERRMSK_IIO_PCIENTB_STRUCT;


/* RPPIOERR_CAP_IIO_PCIENTB_REG supported on:                                 */
/*       SKX_A0 (0x40100298)                                                  */
/*       SKX (0x40100298)                                                     */
/* Register default value:              0x3001000B                            */
#define RPPIOERR_CAP_IIO_PCIENTB_REG 0x0F004298
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * PCIe spec-defined capability register for enhanced root port PIO error 
 * reporting. 
 */
typedef union {
  struct {
    UINT32 capid : 16;
    /* capid - Bits[15:0], RO, default = 16'b0000000000001011 
       PCIe extended capability ID.
       Set to 0xb for vendor-specific capability.
     */
    UINT32 capver : 4;
    /* capver - Bits[19:16], RO, default = 4'b0001 
       Capability version.
     */
    UINT32 nxtptr : 12;
    /* nxtptr - Bits[31:20], RO_V, default = 12'b001100000000 
       Next capability pointer.
       May not point to 0x300 depending on processor type or SKU.
     */
  } Bits;
  UINT32 Data;
} RPPIOERR_CAP_IIO_PCIENTB_STRUCT;


/* RPPIOERR_HDR_IIO_PCIENTB_REG supported on:                                 */
/*       SKX_A0 (0x4010029C)                                                  */
/*       SKX (0x4010029C)                                                     */
/* Register default value:              0x02400007                            */
#define RPPIOERR_HDR_IIO_PCIENTB_REG 0x0F00429C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * PCIe spec-defined vendor-specific header register for enhanced root port PIO 
 * error reporting. 
 */
typedef union {
  struct {
    UINT32 vsecid : 16;
    /* vsecid - Bits[15:0], RO, default = 16'b0000000000000111 
       Vendor-specific capability ID. Intel defines 0x7 as the ID for enhanced root 
       port PIO error reporting. 
     */
    UINT32 vsecrev : 4;
    /* vsecrev - Bits[19:16], RO, default = 4'b0000 
       VSEC revision.
     */
    UINT32 vseclen : 12;
    /* vseclen - Bits[31:20], RO, default = 12'b000000100100 
       VSEC length.
       Length of the RP_PIO_ERR capability in bytes, starting from the capability ID.
     */
  } Bits;
  UINT32 Data;
} RPPIOERR_HDR_IIO_PCIENTB_STRUCT;


/* RPPIOERR_HF_IIO_PCIENTB_REG supported on:                                  */
/*       SKX_A0 (0x401002A0)                                                  */
/*       SKX (0x401002A0)                                                     */
/* Register default value:              0x00000000                            */
#define RPPIOERR_HF_IIO_PCIENTB_REG 0x0F0042A0
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * Register that controls which PIO errors should cause a poison indication.
 */
typedef union {
  struct {
    UINT32 cfg_ur_hf : 1;
    /* cfg_ur_hf - Bits[0:0], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound configuration read request 
       that receives a UR response. 
       If set to 1, IIO returns all 1s for data and indicates poison on the data 
       returned to the processor. 
       If set to 0, IIO returns all 1s for data and will not indicate poison on data 
       returned. 
       Note that while the Root Port is in LER, all configuration requests targeting 
       the PCIe hierarchy below the Root Port will be treated as UR, and will return 
       poison if this bit is set. 
     */
    UINT32 cfg_ca_hf : 1;
    /* cfg_ca_hf - Bits[1:1], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound configuration read request 
       that receives a CA response. 
       If set to 1, IIO returns all 1s for data and indicates poison on the data 
       returned to the processor. 
       If set to 0, IIO returns all 1s for data and will not indicate poison on data 
       returned. 
     */
    UINT32 cfg_to_hf : 1;
    /* cfg_to_hf - Bits[2:2], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound configuration read request 
       that does not receive a response within the completion timeout parameter. 
       If set to 1, IIO returns all 1s for data and indicates poison on the data 
       returned to the processor. 
       If set to 0, IIO returns all 1s for data and will not indicate poison on data 
       returned. 
     */
    UINT32 rsvd_3 : 5;
    UINT32 io_ur_hf : 1;
    /* io_ur_hf - Bits[8:8], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound IO read request that 
       receives a UR response. 
       If set to 1, IIO returns all 1s for data and indicates poison on the data 
       returned to the processor. 
       If set to 0, IIO returns all 1s for data and will not indicate poison on data 
       returned. 
       Note that while the Root Port is in LER, all IO requests targeting the PCIe 
       hierarchy below the Root Port will be treated as UR, and will return poison if 
       this bit is set. 
     */
    UINT32 io_ca_hf : 1;
    /* io_ca_hf - Bits[9:9], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound IO read request that 
       receives a CA response. 
       If set to 1, IIO returns all 1s for data and indicates poison on the data 
       returned to the processor. 
       If set to 0, IIO returns all 1s for data and will not indicate poison on data 
       returned. 
     */
    UINT32 io_to_hf : 1;
    /* io_to_hf - Bits[10:10], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound IO read request that does 
       not receive a response within the completion timeout parameter. 
       If set to 1, IIO returns all 1s for data and indicates poison on the data 
       returned to the processor. 
       If set to 0, IIO returns all 1s for data and will not indicate poison on data 
       returned. 
     */
    UINT32 rsvd_11 : 5;
    UINT32 mem_ur_hf : 1;
    /* mem_ur_hf - Bits[16:16], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound memory read request that 
       receives a UR response. 
       If set to 1, IIO returns all 1s for data and indicates poison on the data 
       returned to the processor. 
       If set to 0, IIO returns all 1s for data and will not indicate poison on data 
       returned. 
       Note that while the Root Port is in LER, all memory requests targeting the PCIe 
       hierarchy below the Root Port will be treated as UR, and will return poison if 
       this bit is set. 
     */
    UINT32 mem_ca_hf : 1;
    /* mem_ca_hf - Bits[17:17], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound memory read request that 
       receives a CA response. 
       If set to 1, IIO returns all 1s for data and indicates poison on the data 
       returned to the processor. 
       If set to 0, IIO returns all 1s for data and will not indicate poison on data 
       returned. 
     */
    UINT32 mem_to_hf : 1;
    /* mem_to_hf - Bits[18:18], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound memory read request that 
       does not receive a response within the completion timeout parameter. 
       If set to 1, IIO returns all 1s for data and indicates poison on the data 
       returned to the processor. 
       If set to 0, IIO returns all 1s for data and will not indicate poison on data 
       returned. 
     */
    UINT32 rsvd : 13;
    /* rsvd - Bits[31:19], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RPPIOERR_HF_IIO_PCIENTB_STRUCT;


/* RPPIOERR_STATUS_IIO_PCIENTB_REG supported on:                              */
/*       SKX_A0 (0x401002A4)                                                  */
/*       SKX (0x401002A4)                                                     */
/* Register default value:              0x00000000                            */
#define RPPIOERR_STATUS_IIO_PCIENTB_REG 0x0F0042A4
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * Register that logs the PIO errors.  Note that PIO UR errors that occur after LER 
 * has been triggered will not update this register. 
 * If a PIO error is detected and the corresponding RPPIOERR_MASK bit is cleared, 
 * then LER will be triggered if LER is enabled, and pio_err_first_header and 
 * RPPIOERR_HDRLOG[0-3] may update. 
 * Regardless of the state of the corresponding RPPIOERR_MASK bit, a PIO error may 
 * update its status bit in this register. 
 */
typedef union {
  struct {
    UINT32 cfg_ur_err : 1;
    /* cfg_ur_err - Bits[0:0], RW1CS, default = 1'b0 
       If set to 1, indicates a CFG_UR_ERR has occurred (logged regardless of 
       rppioerr_mask.cfg_ur_mask). 
     */
    UINT32 cfg_ca_err : 1;
    /* cfg_ca_err - Bits[1:1], RW1CS, default = 1'b0 
       If set to 1, indicates a CFG_CA_ERR has occurred (logged regardless of 
       rppioerr_mask.cfg_ca_mask). 
     */
    UINT32 cfg_to_err : 1;
    /* cfg_to_err - Bits[2:2], RW1CS, default = 1'b0 
       If set to 1, indicates a CFG_TO_ERR has occurred (logged regardless of 
       rppioerr_mask.cfg_to_mask). 
       Note that the Completion Timeout bit will also be set in the UNCERRSTS register.
     */
    UINT32 rsvd_3 : 5;
    /* rsvd_3 - Bits[7:3], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 io_ur_err : 1;
    /* io_ur_err - Bits[8:8], RW1CS, default = 1'b0 
       If set to 1, indicates a IO_UR_ERR has occurred (logged regardless of 
       rppioerr_mask.io_ur_mask). 
     */
    UINT32 io_ca_err : 1;
    /* io_ca_err - Bits[9:9], RW1CS, default = 1'b0 
       If set to 1, indicates a IO_CA_ERR has occurred (logged regardless of 
       rppioerr_mask.io_ca_mask). 
     */
    UINT32 io_to_err : 1;
    /* io_to_err - Bits[10:10], RW1CS, default = 1'b0 
       If set to 1, indicates a IO_TO_ERR has occurred (logged regardless of 
       rppioerr_mask.io_to_mask). 
       Note that the Completion Timeout bit will also be set in the UNCERRSTS register.
     */
    UINT32 rsvd_11 : 5;
    /* rsvd_11 - Bits[15:11], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 mem_ur_err : 1;
    /* mem_ur_err - Bits[16:16], RW1CS, default = 1'b0 
       If set to 1, indicates a MEM_UR_ERR has occurred (logged regardless of 
       rppioerr_mask.mem_ur_mask). 
     */
    UINT32 mem_ca_err : 1;
    /* mem_ca_err - Bits[17:17], RW1CS, default = 1'b0 
       If set to 1, indicates a MEM_CA_ERR has occurred (logged regardless of 
       rppioerr_mask.mem_ca_mask). 
     */
    UINT32 mem_to_err : 1;
    /* mem_to_err - Bits[18:18], RW1CS, default = 1'b0 
       If set to 1, indicates a MEM_TO_ERR has occurred (logged regardless of 
       rppioerr_mask.mem_to_mask). 
       Note that the Completion Timeout bit will also be set in the UNCERRSTS register.
     */
    UINT32 pio_err_first_header : 5;
    /* pio_err_first_header - Bits[23:19], RW1CS, default = 5'b00000 
       These 5 bits identify the first unmasked (by rppioerr_mask) RPPIO error that was 
       observed. The encoding is as follows: 
       00: No Error
       01: CFG_UR_ERR
       02: CFG_CA_ERR
       03: CFG_TO_ERR
       04: IO_UR_ERR
       05: IO_CA_ERR
       06: IO_TO_ERR
       07: MEM_UR_ERR
       08: MEM_CA_ERR
       09: MEM_TO_ERR
       Others: undefined
       Note these bits will not record subsequent errors until the first error is 
       cleared by SW. 
     */
    UINT32 rsvd_24 : 8;
    /* rsvd_24 - Bits[31:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RPPIOERR_STATUS_IIO_PCIENTB_STRUCT;


/* RPPIOERR_MASK_IIO_PCIENTB_REG supported on:                                */
/*       SKX_A0 (0x401002A8)                                                  */
/*       SKX (0x401002A8)                                                     */
/* Register default value:              0x00000000                            */
#define RPPIOERR_MASK_IIO_PCIENTB_REG 0x0F0042A8
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * Register that masks triggering of LER on PIO errors.  When clear, LER will be 
 * triggered when LER is enabled and an error sets the corresponding bit in the 
 * RPPIOERR_STATUS. 
 * When RPPIOERR_STATUS is used to trigger LER, it is expected the end user will 
 * program the LER_XPUNCERRMSK and XPUNCERRMSK registers correctly so that they do 
 * not trigger a LER event also. 
 * If LER_CTRLSTS.LER_Enable is not set, LER will not be triggered, regardless of 
 * the setting of the RPPIOERR_MASK registers. 
 * Poison may still be returned to the requester, based on the RPPIOERR_HF 
 * register, even when the corresponding error is masked in this register. 
 */
typedef union {
  struct {
    UINT32 cfg_ur_mask : 1;
    /* cfg_ur_mask - Bits[0:0], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound configuration read request 
       that receives a UR response. 
       If set to 0, IIO triggers LER if LER is enabled and may update 
       RPPIOERR_STATUS.pio_err_first_header and RPPIOERR_HDRLOG[0-3]. 
       If set to 1, LER and all other forms of escalation (such as IO MCA, NMI, or SMI) 
       will be masked. 
     */
    UINT32 cfg_ca_mask : 1;
    /* cfg_ca_mask - Bits[1:1], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound configuration read request 
       that receives a CA response. 
       If set to 0, IIO triggers LER if LER is enabled and may update 
       RPPIOERR_STATUS.pio_err_first_header and RPPIOERR_HDRLOG[0-3]. 
       If set to 1, LER and all other forms of escalation (such as IO MCA, NMI, or SMI) 
       will be masked. 
     */
    UINT32 cfg_to_mask : 1;
    /* cfg_to_mask - Bits[2:2], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound configuration read request 
       that does not receive a response within the completion timeout parameter. 
       If set to 0, IIO triggers LER if LER is enabled and may update 
       RPPIOERR_STATUS.pio_err_first_header and RPPIOERR_HDRLOG[0-3]. 
       If set to 1, LER and all other forms of escalation (such as IO MCA, NMI, or SMI) 
       will be masked. 
     */
    UINT32 rsvd_3 : 5;
    UINT32 io_ur_mask : 1;
    /* io_ur_mask - Bits[8:8], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound IO read request that 
       receives a UR response. 
       If set to 0, IIO triggers LER if LER is enabled and may update 
       RPPIOERR_STATUS.pio_err_first_header and RPPIOERR_HDRLOG[0-3]. 
       If set to 1, LER and all other forms of escalation (such as IO MCA, NMI, or SMI) 
       will be masked. 
     */
    UINT32 io_ca_mask : 1;
    /* io_ca_mask - Bits[9:9], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound IO read request that 
       receives a CA response. 
       If set to 0, IIO triggers LER if LER is enabled and may update 
       RPPIOERR_STATUS.pio_err_first_header and RPPIOERR_HDRLOG[0-3]. 
       If set to 1, LER and all other forms of escalation (such as IO MCA, NMI, or SMI) 
       will be masked. 
     */
    UINT32 io_to_mask : 1;
    /* io_to_mask - Bits[10:10], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound IO read request that does 
       not receive a response within the completion timeout parameter. 
       If set to 0, IIO triggers LER if LER is enabled and may update 
       RPPIOERR_STATUS.pio_err_first_header and RPPIOERR_HDRLOG[0-3]. 
       If set to 1, LER and all other forms of escalation (such as IO MCA, NMI, or SMI) 
       will be masked. 
     */
    UINT32 rsvd_11 : 5;
    UINT32 mem_ur_mask : 1;
    /* mem_ur_mask - Bits[16:16], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound memory read request that 
       receives a UR response. 
       If set to 0, IIO triggers LER if LER is enabled and may update 
       RPPIOERR_STATUS.pio_err_first_header and RPPIOERR_HDRLOG[0-3]. 
       If set to 1, LER and all other forms of escalation (such as IO MCA, NMI, or SMI) 
       will be masked. 
     */
    UINT32 mem_ca_mask : 1;
    /* mem_ca_mask - Bits[17:17], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound memory read request that 
       receives a CA response. 
       If set to 0, IIO triggers LER if LER is enabled and may update 
       RPPIOERR_STATUS.pio_err_first_header and RPPIOERR_HDRLOG[0-3]. 
       If set to 1, LER and all other forms of escalation (such as IO MCA, NMI, or SMI) 
       will be masked. 
     */
    UINT32 mem_to_mask : 1;
    /* mem_to_mask - Bits[18:18], RW_L, default = 1'b0 
       Controls the IIO behavior in the case of an outbound memory read request that 
       does not receive a response within the completion timeout parameter. 
       If set to 0, IIO triggers LER if LER is enabled and may update 
       RPPIOERR_STATUS.pio_err_first_header and RPPIOERR_HDRLOG[0-3]. 
       If set to 1, LER and all other forms of escalation (such as IO MCA, NMI, or SMI) 
       will be masked. 
     */
    UINT32 rsvd : 13;
    /* rsvd - Bits[31:19], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} RPPIOERR_MASK_IIO_PCIENTB_STRUCT;


/* RPPIOERR_HDRLOG0_IIO_PCIENTB_REG supported on:                             */
/*       SKX_A0 (0x401002AC)                                                  */
/*       SKX (0x401002AC)                                                     */
/* Register default value:              0x00000000                            */
#define RPPIOERR_HDRLOG0_IIO_PCIENTB_REG 0x0F0042AC
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * RPPIOERR_HDRLOG[0-3] is a set of 4 32-bit registers that log the TLP header of 
 * the first unmasked PIO error event.  The type of the first error should be 
 * logged in RPPIOERR_STATUS.pio_err_first_header. 
 * The header is logged in the same format as the AER Header Log register, 
 * specified in section 7.10.8 of the PCI Express Spec version 3.0.  The TLP 
 * headers are mapped to the register bits in the following manner: 
 * RPPIOERR_HDRLOG0 -> {header byte 0,  header byte 1,  header byte 2,  header byte 
 * 3 } 
 * RPPIOERR_HDRLOG1 -> {header byte 4,  header byte 5,  header byte 6,  header byte 
 * 7 } 
 * RPPIOERR_HDRLOG2 -> {header byte 8,  header byte 9,  header byte 10, header byte 
 * 11} 
 * RPPIOERR_HDRLOG3 -> {header byte 12, header byte 13, header byte 14, header byte 
 * 15} 
 */
typedef union {
  struct {
    UINT32 tlp_header_data : 32;
    /* tlp_header_data - Bits[31:0], RW1CS, default = 32'b00000000000000000000000000000000 
       TLP header bytes 0 ([31:24]), 1 ([23:16]), 2 ([15:8]), and 3 ([7:0]).
     */
  } Bits;
  UINT32 Data;
} RPPIOERR_HDRLOG0_IIO_PCIENTB_STRUCT;


/* RPPIOERR_HDRLOG1_IIO_PCIENTB_REG supported on:                             */
/*       SKX_A0 (0x401002B0)                                                  */
/*       SKX (0x401002B0)                                                     */
/* Register default value:              0x00000000                            */
#define RPPIOERR_HDRLOG1_IIO_PCIENTB_REG 0x0F0042B0
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * RPPIOERR_HDRLOG[0-3] is a set of 4 32-bit registers that log the TLP header of 
 * the first unmasked PIO error event.  The type of the first error should be 
 * logged in RPPIOERR_STATUS.pio_err_first_header. 
 * The header is logged in the same format as the AER Header Log register, 
 * specified in section 7.10.8 of the PCI Express Spec version 3.0.  The TLP 
 * headers are mapped to the register bits in the following manner: 
 * RPPIOERR_HDRLOG0 -> {header byte 0,  header byte 1,  header byte 2,  header byte 
 * 3 } 
 * RPPIOERR_HDRLOG1 -> {header byte 4,  header byte 5,  header byte 6,  header byte 
 * 7 } 
 * RPPIOERR_HDRLOG2 -> {header byte 8,  header byte 9,  header byte 10, header byte 
 * 11} 
 * RPPIOERR_HDRLOG3 -> {header byte 12, header byte 13, header byte 14, header byte 
 * 15} 
 */
typedef union {
  struct {
    UINT32 tlp_header_data : 32;
    /* tlp_header_data - Bits[31:0], RW1CS, default = 32'b00000000000000000000000000000000 
       TLP header bytes 4 ([31:24]), 5 ([23:16]), 6 ([15:8]), and 7 ([7:0]).
     */
  } Bits;
  UINT32 Data;
} RPPIOERR_HDRLOG1_IIO_PCIENTB_STRUCT;


/* RPPIOERR_HDRLOG2_IIO_PCIENTB_REG supported on:                             */
/*       SKX_A0 (0x401002B4)                                                  */
/*       SKX (0x401002B4)                                                     */
/* Register default value:              0x00000000                            */
#define RPPIOERR_HDRLOG2_IIO_PCIENTB_REG 0x0F0042B4
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * RPPIOERR_HDRLOG[0-3] is a set of 4 32-bit registers that log the TLP header of 
 * the first unmasked PIO error event.  The type of the first error should be 
 * logged in RPPIOERR_STATUS.pio_err_first_header. 
 * The header is logged in the same format as the AER Header Log register, 
 * specified in section 7.10.8 of the PCI Express Spec version 3.0.  The TLP 
 * headers are mapped to the register bits in the following manner: 
 * RPPIOERR_HDRLOG0 -> {header byte 0,  header byte 1,  header byte 2,  header byte 
 * 3 } 
 * RPPIOERR_HDRLOG1 -> {header byte 4,  header byte 5,  header byte 6,  header byte 
 * 7 } 
 * RPPIOERR_HDRLOG2 -> {header byte 8,  header byte 9,  header byte 10, header byte 
 * 11} 
 * RPPIOERR_HDRLOG3 -> {header byte 12, header byte 13, header byte 14, header byte 
 * 15} 
 */
typedef union {
  struct {
    UINT32 tlp_header_data : 32;
    /* tlp_header_data - Bits[31:0], RW1CS, default = 32'b00000000000000000000000000000000 
       TLP header bytes 8 ([31:24]), 9 ([23:16]), 10 ([15:8]), and 11 ([7:0]).
     */
  } Bits;
  UINT32 Data;
} RPPIOERR_HDRLOG2_IIO_PCIENTB_STRUCT;


/* RPPIOERR_HDRLOG3_IIO_PCIENTB_REG supported on:                             */
/*       SKX_A0 (0x401002B8)                                                  */
/*       SKX (0x401002B8)                                                     */
/* Register default value:              0x00000000                            */
#define RPPIOERR_HDRLOG3_IIO_PCIENTB_REG 0x0F0042B8
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * RPPIOERR_HDRLOG[0-3] is a set of 4 32-bit registers that log the TLP header of 
 * the first unmasked PIO error event.  The type of the first error should be 
 * logged in RPPIOERR_STATUS.pio_err_first_header. 
 * The header is logged in the same format as the AER Header Log register, 
 * specified in section 7.10.8 of the PCI Express Spec version 3.0.  The TLP 
 * headers are mapped to the register bits in the following manner: 
 * RPPIOERR_HDRLOG0 -> {header byte 0,  header byte 1,  header byte 2,  header byte 
 * 3 } 
 * RPPIOERR_HDRLOG1 -> {header byte 4,  header byte 5,  header byte 6,  header byte 
 * 7 } 
 * RPPIOERR_HDRLOG2 -> {header byte 8,  header byte 9,  header byte 10, header byte 
 * 11} 
 * RPPIOERR_HDRLOG3 -> {header byte 12, header byte 13, header byte 14, header byte 
 * 15} 
 */
typedef union {
  struct {
    UINT32 tlp_header_data : 32;
    /* tlp_header_data - Bits[31:0], RW1CS, default = 32'b00000000000000000000000000000000 
       TLP header bytes 12 ([31:24]), 13 ([23:16]), 14 ([15:8]), and 15 ([7:0]).
     */
  } Bits;
  UINT32 Data;
} RPPIOERR_HDRLOG3_IIO_PCIENTB_STRUCT;










/* MCAST_CAP_HDR_IIO_PCIENTB_REG supported on:                                */
/*       SKX_A0 (0x40100300)                                                  */
/*       SKX (0x40100300)                                                     */
/* Register default value:              0x0001000B                            */
#define MCAST_CAP_HDR_IIO_PCIENTB_REG 0x0F004300
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * Dualcast Capability Header Register (Dualcast is specialized version of PCIe 
 * Multicast supported on the Haswell-EN processor and the EP/EP 4S processor used 
 * in conjunction with Non-transparent Bridge Application). 
 */
typedef union {
  struct {
    UINT32 capid : 16;
    /* capid - Bits[15:0], RO, default = 16'b0000000000001011  */
    UINT32 capver : 4;
    /* capver - Bits[19:16], RO, default = 4'b0001  */
    UINT32 nxtptr : 12;
    /* nxtptr - Bits[31:20], RO, default = 12'b000000000000  */
  } Bits;
  UINT32 Data;
} MCAST_CAP_HDR_IIO_PCIENTB_STRUCT;


/* MCAST_CAP_EXT_IIO_PCIENTB_REG supported on:                                */
/*       SKX_A0 (0x40100304)                                                  */
/*       SKX (0x40100304)                                                     */
/* Register default value:              0x03800008                            */
#define MCAST_CAP_EXT_IIO_PCIENTB_REG 0x0F004304
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * Dualcast Extended Capability Register (Dualcast is specialized version of PCIe 
 * Multicast supported on the Haswell-EN processor and the EP/EP 4S processor used 
 * in conjunction with Non-transparent Bridge Application). 
 */
typedef union {
  struct {
    UINT32 vsecid : 16;
    /* vsecid - Bits[15:0], RO, default = 16'b0000000000001000 
       Vendor-specific capability ID. Intel defines 0x8 as the ID for dualcast.
     */
    UINT32 vsecrev : 4;
    /* vsecrev - Bits[19:16], RO, default = 4'b0000  */
    UINT32 vseclen : 12;
    /* vseclen - Bits[31:20], RO, default = 12'b000000111000  */
  } Bits;
  UINT32 Data;
} MCAST_CAP_EXT_IIO_PCIENTB_STRUCT;


/* MCAST_CAP_IIO_PCIENTB_REG supported on:                                    */
/*       SKX_A0 (0x2010030C)                                                  */
/*       SKX (0x2010030C)                                                     */
/* Register default value:              0x000F                                */
#define MCAST_CAP_IIO_PCIENTB_REG 0x0F00230C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x30c
 */
typedef union {
  struct {
    UINT16 mc_max_group : 6;
    /* mc_max_group - Bits[5:0], RO, default = 6'b001111  */
    UINT16 rsvd_mc_cap_dev0_7_6 : 2;
    /* rsvd_mc_cap_dev0_7_6 - Bits[7:6], RO, default = 2'b00  */
    UINT16 mc_window_size_req : 6;
    /* mc_window_size_req - Bits[13:8], RO, default = 6'b000000  */
    UINT16 rsvd_mc_cap_dev0_14 : 1;
    /* rsvd_mc_cap_dev0_14 - Bits[14:14], RO, default = 1'b0  */
    UINT16 mc_ecrc_regen_sup : 1;
    /* mc_ecrc_regen_sup - Bits[15:15], RW_O, default = 1'b0  */
  } Bits;
  UINT16 Data;
} MCAST_CAP_IIO_PCIENTB_STRUCT;


/* MCAST_CTRL_IIO_PCIENTB_REG supported on:                                   */
/*       SKX_A0 (0x2010030E)                                                  */
/*       SKX (0x2010030E)                                                     */
/* Register default value:              0x0000                                */
#define MCAST_CTRL_IIO_PCIENTB_REG 0x0F00230E
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x30e
 */
typedef union {
  struct {
    UINT16 mc_num_group : 6;
    /* mc_num_group - Bits[5:0], RW_L, default = 6'b000000 
       This field only supports and implements bits [3:0]. Bits [5:4] are not 
       supported. 
     */
    UINT16 rsvd_mc_ctrl_14_6 : 9;
    /* rsvd_mc_ctrl_14_6 - Bits[14:6], RO, default = 9'b000000000  */
    UINT16 mc_enable : 1;
    /* mc_enable - Bits[15:15], RW_L, default = 1'b0  */
  } Bits;
  UINT16 Data;
} MCAST_CTRL_IIO_PCIENTB_STRUCT;


/* MCAST_BASE_N0_IIO_PCIENTB_REG supported on:                                */
/*       SKX_A0 (0x40100310)                                                  */
/*       SKX (0x40100310)                                                     */
/* Register default value:              0x00000000                            */
#define MCAST_BASE_N0_IIO_PCIENTB_REG 0x0F004310
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x310
 */
typedef union {
  struct {
    UINT32 mc_index_position : 6;
    /* mc_index_position - Bits[5:0], RW_L, default = 6'b000000  */
    UINT32 rsvd_mc_base_11_6 : 6;
    /* rsvd_mc_base_11_6 - Bits[11:6], RO, default = 6'b000000  */
    UINT32 mc_base_address : 20;
    /* mc_base_address - Bits[31:12], RW_L, default = 52'b0000000000000000000000000000000000000000000000000000 
       This field was split. It's value spans this field and the field of similar name 
       in the next/preceding struct. 
       
     */
  } Bits;
  UINT32 Data;
} MCAST_BASE_N0_IIO_PCIENTB_STRUCT;


/* MCAST_BASE_N1_IIO_PCIENTB_REG supported on:                                */
/*       SKX_A0 (0x40100314)                                                  */
/*       SKX (0x40100314)                                                     */
/* Register default value:              0x00000000                            */
#define MCAST_BASE_N1_IIO_PCIENTB_REG 0x0F004314
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x310
 */
typedef union {
  struct {
    UINT32 mc_base_address : 32;
    /* mc_base_address - Bits[31:0], RW_L, default = 52'b0000000000000000000000000000000000000000000000000000 
       This field was split. It's value spans this field and the field of similar name 
       in the next/preceding struct. 
       
     */
  } Bits;
  UINT32 Data;
} MCAST_BASE_N1_IIO_PCIENTB_STRUCT;


/* MCAST_RCV_N0_IIO_PCIENTB_REG supported on:                                 */
/*       SKX_A0 (0x40100318)                                                  */
/*       SKX (0x40100318)                                                     */
/* Register default value:              0x00000000                            */
#define MCAST_RCV_N0_IIO_PCIENTB_REG 0x0F004318
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * Dualcast Receive Register (Dualcast is specialized version of PCIe Multicast 
 * supported on the Haswell-EN processor and the EP/EP 4S processor used in 
 * conjunction with Non-transparent Bridge Application). 
 * The fields in this register mirror the fields in the PCIe spec-defined 
 * MC_Receive Register (see section 7.21.5 of the PCIe 3.0 spec). 
 */
typedef union {
  struct {
    UINT32 mc_rcv : 16;
    /* mc_rcv - Bits[15:0], RW_L, default = 16'b0000000000000000  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       This field was split. It's value spans this field and the field of similar name 
       in the next/preceding struct. 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} MCAST_RCV_N0_IIO_PCIENTB_STRUCT;




/* MCAST_BLK_ALL_N0_IIO_PCIENTB_REG supported on:                             */
/*       SKX_A0 (0x40100320)                                                  */
/*       SKX (0x40100320)                                                     */
/* Register default value:              0x00000000                            */
#define MCAST_BLK_ALL_N0_IIO_PCIENTB_REG 0x0F004320
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * Dualcast Block All Register (Dualcast is specialized version of PCIe Multicast 
 * supported on the Haswell-EN processor and the EP/EP 4S processor used in 
 * conjunction with Non-transparent Bridge Application). 
 * The fields in this register mirror the fields in the PCIe spec-defined 
 * MC_Block_All Register (see section 7.21.6 of the PCIe 3.0 spec). 
 */
typedef union {
  struct {
    UINT32 mc_blk_all : 16;
    /* mc_blk_all - Bits[15:0], RW_L, default = 16'b0000000000000000  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       This field was split. It's value spans this field and the field of similar name 
       in the next/preceding struct. 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} MCAST_BLK_ALL_N0_IIO_PCIENTB_STRUCT;




/* MCAST_BLK_UNT_N0_IIO_PCIENTB_REG supported on:                             */
/*       SKX_A0 (0x40100328)                                                  */
/*       SKX (0x40100328)                                                     */
/* Register default value:              0x00000000                            */
#define MCAST_BLK_UNT_N0_IIO_PCIENTB_REG 0x0F004328
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * Dualcast Block Untranslated Register (Dualcast is specialized version of PCIe 
 * Multicast supported on the Haswell-EN processor and the EP/EP 4S processor used 
 * in conjunction with Non-transparent Bridge Application). 
 * The fields in this register mirror the fields in the PCIe spec-defined 
 * MC_Block_Untranslated Register (see section 7.21.7 of the PCIe 3.0 spec). 
 */
typedef union {
  struct {
    UINT32 mc_blk_unt : 16;
    /* mc_blk_unt - Bits[15:0], RW_L, default = 16'b0000000000000000  */
    UINT32 rsvd : 16;
    /* rsvd - Bits[31:16], n/a, default = n/a 
       This field was split. It's value spans this field and the field of similar name 
       in the next/preceding struct. 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} MCAST_BLK_UNT_N0_IIO_PCIENTB_STRUCT;




/* MCAST_OVERLAY_BAR_N0_IIO_PCIENTB_REG supported on:                         */
/*       SKX_A0 (0x40100330)                                                  */
/*       SKX (0x40100330)                                                     */
/* Register default value:              0x00000000                            */
#define MCAST_OVERLAY_BAR_N0_IIO_PCIENTB_REG 0x0F004330
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x330
 */
typedef union {
  struct {
    UINT32 mc_overlay_size : 6;
    /* mc_overlay_size - Bits[5:0], RW_L, default = 6'b000000  */
    UINT32 mc_overlay_addr : 26;
    /* mc_overlay_addr - Bits[31:6], RW_L, default = 58'b0000000000000000000000000000000000000000000000000000000000 
       This field was split. It's value spans this field and the field of similar name 
       in the next/preceding struct. 
       
     */
  } Bits;
  UINT32 Data;
} MCAST_OVERLAY_BAR_N0_IIO_PCIENTB_STRUCT;


/* MCAST_OVERLAY_BAR_N1_IIO_PCIENTB_REG supported on:                         */
/*       SKX_A0 (0x40100334)                                                  */
/*       SKX (0x40100334)                                                     */
/* Register default value:              0x00000000                            */
#define MCAST_OVERLAY_BAR_N1_IIO_PCIENTB_REG 0x0F004334
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x330
 */
typedef union {
  struct {
    UINT32 mc_overlay_addr : 32;
    /* mc_overlay_addr - Bits[31:0], RW_L, default = 58'b0000000000000000000000000000000000000000000000000000000000 
       This field was split. It's value spans this field and the field of similar name 
       in the next/preceding struct. 
       
     */
  } Bits;
  UINT32 Data;
} MCAST_OVERLAY_BAR_N1_IIO_PCIENTB_STRUCT;


/* XPPMDL0_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x40100480)                                                  */
/*       SKX (0x40100480)                                                     */
/* Register default value:              0x00000000                            */
#define XPPMDL0_IIO_PCIENTB_REG 0x0F004480
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 pm_data_counter_low_value : 32;
    /* pm_data_counter_low_value - Bits[31:0], RW_V, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} XPPMDL0_IIO_PCIENTB_STRUCT;


/* XPPMDL1_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x40100484)                                                  */
/*       SKX (0x40100484)                                                     */
/* Register default value:              0x00000000                            */
#define XPPMDL1_IIO_PCIENTB_REG 0x0F004484
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 pm_data_counter_low_value : 32;
    /* pm_data_counter_low_value - Bits[31:0], RW_V, default = 32'b00000000000000000000000000000000  */
  } Bits;
  UINT32 Data;
} XPPMDL1_IIO_PCIENTB_STRUCT;


/* XPPMCL0_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x40100488)                                                  */
/*       SKX (0x40100488)                                                     */
/* Register default value:              0xFFFFFFFF                            */
#define XPPMCL0_IIO_PCIENTB_REG 0x0F004488
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 pm_compare_low_value : 32;
    /* pm_compare_low_value - Bits[31:0], RW_V, default = 32'b11111111111111111111111111111111  */
  } Bits;
  UINT32 Data;
} XPPMCL0_IIO_PCIENTB_STRUCT;


/* XPPMCL1_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x4010048C)                                                  */
/*       SKX (0x4010048C)                                                     */
/* Register default value:              0xFFFFFFFF                            */
#define XPPMCL1_IIO_PCIENTB_REG 0x0F00448C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 pm_compare_low_value : 32;
    /* pm_compare_low_value - Bits[31:0], RW_V, default = 32'b11111111111111111111111111111111  */
  } Bits;
  UINT32 Data;
} XPPMCL1_IIO_PCIENTB_STRUCT;


/* XPPMDH_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x20100490)                                                  */
/*       SKX (0x20100490)                                                     */
/* Register default value:              0x0000                                */
#define XPPMDH_IIO_PCIENTB_REG 0x0F002490
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT16 high_nibble_pex_counter0_value : 4;
    /* high_nibble_pex_counter0_value - Bits[3:0], RW_V, default = 4'b0000  */
    UINT16 rsvd_4 : 4;
    /* rsvd_4 - Bits[7:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 high_nibble_pex_counter1_value : 4;
    /* high_nibble_pex_counter1_value - Bits[11:8], RW_V, default = 4'b0000  */
    UINT16 rsvd_12 : 4;
    /* rsvd_12 - Bits[15:12], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} XPPMDH_IIO_PCIENTB_STRUCT;


/* XPPMCH_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x20100492)                                                  */
/*       SKX (0x20100492)                                                     */
/* Register default value:              0x0F0F                                */
#define XPPMCH_IIO_PCIENTB_REG 0x0F002492
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT16 high_nibble_pex_compare0_value : 4;
    /* high_nibble_pex_compare0_value - Bits[3:0], RW_V, default = 4'b1111  */
    UINT16 rsvd_4 : 4;
    /* rsvd_4 - Bits[7:4], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT16 high_nibble_pex_compare1_value : 4;
    /* high_nibble_pex_compare1_value - Bits[11:8], RW_V, default = 4'b1111  */
    UINT16 rsvd_12 : 4;
    /* rsvd_12 - Bits[15:12], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT16 Data;
} XPPMCH_IIO_PCIENTB_STRUCT;


/* XPPMR0_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x40100494)                                                  */
/*       SKX (0x40100494)                                                     */
/* Register default value:              0x00000000                            */
#define XPPMR0_IIO_PCIENTB_REG 0x0F004494
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 counter_reset : 1;
    /* counter_reset - Bits[0:0], RW, default = 1'b0  */
    UINT32 overflow_status_bit : 1;
    /* overflow_status_bit - Bits[1:1], RW1C, default = 1'b0  */
    UINT32 compare_status : 1;
    /* compare_status - Bits[2:2], RW1C, default = 1'b0  */
    UINT32 cto : 2;
    /* cto - Bits[4:3], RW, default = 2'b00  */
    UINT32 pm_status_signal_output : 1;
    /* pm_status_signal_output - Bits[5:5], RW, default = 1'b0  */
    UINT32 compare_mode : 2;
    /* compare_mode - Bits[7:6], RW, default = 2'b00  */
    UINT32 reset_event_select : 3;
    /* reset_event_select - Bits[10:8], RW, default = 3'b000  */
    UINT32 counter_enable_source : 3;
    /* counter_enable_source - Bits[13:11], RW, default = 3'b000  */
    UINT32 count_mode : 2;
    /* count_mode - Bits[15:14], RW, default = 2'b00  */
    UINT32 event_polarity_invert : 1;
    /* event_polarity_invert - Bits[16:16], RW, default = 1'b0  */
    UINT32 count_event_select : 2;
    /* count_event_select - Bits[18:17], RW, default = 2'b00  */
    UINT32 event_group_selection : 2;
    /* event_group_selection - Bits[20:19], RW, default = 2'b00  */
    UINT32 local_dft_event_select : 1;
    /* local_dft_event_select - Bits[21:21], RW, default = 1'b0  */
    UINT32 rsvd_22 : 2;
    UINT32 rsvd_24 : 3;
    /* rsvd_24 - Bits[26:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 reset_pulse_enable : 1;
    /* reset_pulse_enable - Bits[27:27], RW, default = 1'b0  */
    UINT32 latched_count_enable_select : 1;
    /* latched_count_enable_select - Bits[28:28], RW, default = 1'b0  */
    UINT32 force_pmd_counter_to_add_zero_to_input : 1;
    /* force_pmd_counter_to_add_zero_to_input - Bits[29:29], RW, default = 1'b0  */
    UINT32 not_greater_than_comparison : 1;
    /* not_greater_than_comparison - Bits[30:30], RW, default = 1'b0  */
    UINT32 rsvd_31 : 1;
    /* rsvd_31 - Bits[31:31], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPPMR0_IIO_PCIENTB_STRUCT;


/* XPPMR1_IIO_PCIENTB_REG supported on:                                       */
/*       SKX_A0 (0x40100498)                                                  */
/*       SKX (0x40100498)                                                     */
/* Register default value:              0x00000000                            */
#define XPPMR1_IIO_PCIENTB_REG 0x0F004498
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 counter_reset : 1;
    /* counter_reset - Bits[0:0], RW, default = 1'b0  */
    UINT32 overflow_status_bit : 1;
    /* overflow_status_bit - Bits[1:1], RW1C, default = 1'b0  */
    UINT32 compare_status : 1;
    /* compare_status - Bits[2:2], RW1C, default = 1'b0  */
    UINT32 cto : 2;
    /* cto - Bits[4:3], RW, default = 2'b00  */
    UINT32 pm_status_signal_output : 1;
    /* pm_status_signal_output - Bits[5:5], RW, default = 1'b0  */
    UINT32 compare_mode : 2;
    /* compare_mode - Bits[7:6], RW, default = 2'b00  */
    UINT32 reset_event_select : 3;
    /* reset_event_select - Bits[10:8], RW, default = 3'b000  */
    UINT32 counter_enable_source : 3;
    /* counter_enable_source - Bits[13:11], RW, default = 3'b000  */
    UINT32 count_mode : 2;
    /* count_mode - Bits[15:14], RW, default = 2'b00  */
    UINT32 event_polarity_invert : 1;
    /* event_polarity_invert - Bits[16:16], RW, default = 1'b0  */
    UINT32 count_event_select : 2;
    /* count_event_select - Bits[18:17], RW, default = 2'b00  */
    UINT32 event_group_selection : 2;
    /* event_group_selection - Bits[20:19], RW, default = 2'b00  */
    UINT32 local_dft_event_select : 1;
    /* local_dft_event_select - Bits[21:21], RW, default = 1'b0  */
    UINT32 rsvd_22 : 2;
    UINT32 rsvd_24 : 3;
    /* rsvd_24 - Bits[26:24], n/a, default = n/a 
       Padding added by header generation tool.
     */
    UINT32 reset_pulse_enable : 1;
    /* reset_pulse_enable - Bits[27:27], RW, default = 1'b0  */
    UINT32 latched_count_enable_select : 1;
    /* latched_count_enable_select - Bits[28:28], RW, default = 1'b0  */
    UINT32 force_pmd_counter_to_add_zero_to_input : 1;
    /* force_pmd_counter_to_add_zero_to_input - Bits[29:29], RW, default = 1'b0  */
    UINT32 not_greater_than_comparison : 1;
    /* not_greater_than_comparison - Bits[30:30], RW, default = 1'b0  */
    UINT32 rsvd_31 : 1;
    /* rsvd_31 - Bits[31:31], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPPMR1_IIO_PCIENTB_STRUCT;


/* XPPMEVL0_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x4010049C)                                                  */
/*       SKX (0x4010049C)                                                     */
/* Register default value:              0x00000000                            */
#define XPPMEVL0_IIO_PCIENTB_REG 0x0F00449C
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 for_completion_packet_or_message_encoding_for_request_packet : 4;
    /* for_completion_packet_or_message_encoding_for_request_packet - Bits[3:0], RW, default = 4'b0000  */
    UINT32 data_length : 7;
    /* data_length - Bits[10:4], RW, default = 7'b0000000  */
    UINT32 fmttyp : 5;
    /* fmttyp - Bits[15:11], RW, default = 5'b00000  */
    UINT32 cfgtyp : 2;
    /* cfgtyp - Bits[17:16], RW, default = 2'b00  */
    UINT32 extended_addressing_header : 2;
    /* extended_addressing_header - Bits[19:18], RW, default = 2'b00  */
    UINT32 lock_attribute_selection : 2;
    /* lock_attribute_selection - Bits[21:20], RW, default = 2'b00  */
    UINT32 request_packet_only : 2;
    /* request_packet_only - Bits[23:22], RW, default = 2'b00  */
    UINT32 read_or_write_selection : 2;
    /* read_or_write_selection - Bits[25:24], RW, default = 2'b00  */
    UINT32 request_or_completion_packet_selection : 2;
    /* request_or_completion_packet_selection - Bits[27:26], RW, default = 2'b00  */
    UINT32 snoop_attribute : 2;
    /* snoop_attribute - Bits[29:28], RW, default = 2'b00  */
    UINT32 data_or_no_data_attribute : 2;
    /* data_or_no_data_attribute - Bits[31:30], RW, default = 2'b00  */
  } Bits;
  UINT32 Data;
} XPPMEVL0_IIO_PCIENTB_STRUCT;


/* XPPMEVL1_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x401004A0)                                                  */
/*       SKX (0x401004A0)                                                     */
/* Register default value:              0x00000000                            */
#define XPPMEVL1_IIO_PCIENTB_REG 0x0F0044A0
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 for_completion_packet_or_message_encoding_for_request_packet : 4;
    /* for_completion_packet_or_message_encoding_for_request_packet - Bits[3:0], RW, default = 4'b0000  */
    UINT32 data_length : 7;
    /* data_length - Bits[10:4], RW, default = 7'b0000000  */
    UINT32 fmttyp : 5;
    /* fmttyp - Bits[15:11], RW, default = 5'b00000  */
    UINT32 cfgtyp : 2;
    /* cfgtyp - Bits[17:16], RW, default = 2'b00  */
    UINT32 extended_addressing_header : 2;
    /* extended_addressing_header - Bits[19:18], RW, default = 2'b00  */
    UINT32 lock_attribute_selection : 2;
    /* lock_attribute_selection - Bits[21:20], RW, default = 2'b00  */
    UINT32 cmpreq : 2;
    /* cmpreq - Bits[23:22], RW, default = 2'b00  */
    UINT32 read_or_write_selection : 2;
    /* read_or_write_selection - Bits[25:24], RW, default = 2'b00  */
    UINT32 request_or_completion_packet_selection : 2;
    /* request_or_completion_packet_selection - Bits[27:26], RW, default = 2'b00  */
    UINT32 snoop_attribute : 2;
    /* snoop_attribute - Bits[29:28], RW, default = 2'b00  */
    UINT32 data_or_no_data_attribute : 2;
    /* data_or_no_data_attribute - Bits[31:30], RW, default = 2'b00  */
  } Bits;
  UINT32 Data;
} XPPMEVL1_IIO_PCIENTB_STRUCT;


/* XPPMEVH0_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x401004A4)                                                  */
/*       SKX (0x401004A4)                                                     */
/* Register default value:              0x00000000                            */
#define XPPMEVH0_IIO_PCIENTB_REG 0x0F0044A4
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 inbound_or_outbound_selection : 2;
    /* inbound_or_outbound_selection - Bits[1:0], RW, default = 2'b00  */
    UINT32 global_event_selection : 6;
    /* global_event_selection - Bits[7:2], RW, default = 6'b000000  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPPMEVH0_IIO_PCIENTB_STRUCT;


/* XPPMEVH1_IIO_PCIENTB_REG supported on:                                     */
/*       SKX_A0 (0x401004A8)                                                  */
/*       SKX (0x401004A8)                                                     */
/* Register default value:              0x00000000                            */
#define XPPMEVH1_IIO_PCIENTB_REG 0x0F0044A8
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 inbound_or_outbound_selection : 2;
    /* inbound_or_outbound_selection - Bits[1:0], RW, default = 2'b00  */
    UINT32 global_event_selection : 6;
    /* global_event_selection - Bits[7:2], RW, default = 6'b000000  */
    UINT32 rsvd : 24;
    /* rsvd - Bits[31:8], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPPMEVH1_IIO_PCIENTB_STRUCT;


/* XPPMER0_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x401004AC)                                                  */
/*       SKX (0x401004AC)                                                     */
/* Register default value:              0x00000000                            */
#define XPPMER0_IIO_PCIENTB_REG 0x0F0044AC
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 qbussel : 6;
    /* qbussel - Bits[5:0], RW, default = 6'b000000  */
    UINT32 flowcntrclass : 2;
    /* flowcntrclass - Bits[7:6], RW, default = 2'b00  */
    UINT32 rsvd_8 : 5;
    UINT32 link_send_utilization : 4;
    /* link_send_utilization - Bits[16:13], RW, default = 4'b0000  */
    UINT32 xp_resource_assignment : 4;
    /* xp_resource_assignment - Bits[20:17], RW, default = 4'b0000  */
    UINT32 rsvd : 11;
    /* rsvd - Bits[31:21], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPPMER0_IIO_PCIENTB_STRUCT;


/* XPPMER1_IIO_PCIENTB_REG supported on:                                      */
/*       SKX_A0 (0x401004B0)                                                  */
/*       SKX (0x401004B0)                                                     */
/* Register default value:              0x00000000                            */
#define XPPMER1_IIO_PCIENTB_REG 0x0F0044B0
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * This register is only implemented in function 0 of the IOU, and does not exist 
 * in other functions of the IOU. 
 */
typedef union {
  struct {
    UINT32 qbussel : 6;
    /* qbussel - Bits[5:0], RW, default = 6'b000000  */
    UINT32 flowcntrclass : 2;
    /* flowcntrclass - Bits[7:6], RW, default = 2'b00  */
    UINT32 rsvd_8 : 5;
    UINT32 link_send_utilization : 4;
    /* link_send_utilization - Bits[16:13], RW, default = 4'b0000  */
    UINT32 xp_resource_assignment : 4;
    /* xp_resource_assignment - Bits[20:17], RW, default = 4'b0000  */
    UINT32 rsvd : 11;
    /* rsvd - Bits[31:21], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPPMER1_IIO_PCIENTB_STRUCT;


/* PLSR0_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x401004B4)                                                  */
/*       SKX (0x401004B4)                                                     */
/* Register default value:              0x00000000                            */
#define PLSR0_IIO_PCIENTB_REG 0x0F0044B4
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x4b4
 */
typedef union {
  struct {
    UINT32 poison_log_type : 2;
    /* poison_log_type - Bits[1:0], ROS_V, default = 2'b00 
       Value of 00 = IIO generated inbound poison
       Value of 01 = Inbound from PCIe
       Value of 10 = Poison coming from ring
       Value of 11 = IIO generated outbound poison
     */
    UINT32 poison_log_rid : 16;
    /* poison_log_rid - Bits[17:2], ROS_V, default = 16'b0000000000000000 
       Requestor id
     */
    UINT32 poison_log_len : 10;
    /* poison_log_len - Bits[27:18], ROS_V, default = 10'b0000000000 
       Request Length
     */
    UINT32 poison_log_addr_vld : 1;
    /* poison_log_addr_vld - Bits[28:28], RW1CS_LBV, default = 1'b0 
       If this bit is set then it indicates that the address logged in the plsr1 and 
       plsr2 is valid. 
     */
    UINT32 poison_log_overflow : 1;
    /* poison_log_overflow - Bits[29:29], RW1CS_LBV, default = 1'b0 
       Poison detection event was observed when valid=1. In this case, the register 
       will retain the information about the first error. This is consistent with 
       UCNA/UCNA overwrite rules in Machine Check Architecture. 
     */
    UINT32 poison_log_valid : 1;
    /* poison_log_valid - Bits[30:30], RW1CS_LBV, default = 1'b0 
       If Valid=0, the log does not contain any valid information.
       If Valid=1, the log contain valid information. Any additional ring poison 
       detection events will set overflow bit. 
     */
    UINT32 poison_log_en : 1;
    /* poison_log_en - Bits[31:31], RWS_LB, default = 1'b0 
       This bit indicates if the shadow logging is enabled or disabled. A value of 0 is 
       disabled and a value of 1 is enabled. If not enabled no logging takes place in 
       this register. 
     */
  } Bits;
  UINT32 Data;
} PLSR0_IIO_PCIENTB_STRUCT;


/* PLSR1_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x401004B8)                                                  */
/*       SKX (0x401004B8)                                                     */
/* Register default value:              0x00000000                            */
#define PLSR1_IIO_PCIENTB_REG 0x0F0044B8
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x4b8
 */
typedef union {
  struct {
    UINT32 poison_log_addr_lo : 32;
    /* poison_log_addr_lo - Bits[31:0], ROS_V, default = 32'b00000000000000000000000000000000 
       Address 31:0 associated with the poison data (e.g. Address field in poisoned BL 
       packet). 
     */
  } Bits;
  UINT32 Data;
} PLSR1_IIO_PCIENTB_STRUCT;


/* PLSR2_IIO_PCIENTB_REG supported on:                                        */
/*       SKX_A0 (0x401004BC)                                                  */
/*       SKX (0x401004BC)                                                     */
/* Register default value:              0x00000000                            */
#define PLSR2_IIO_PCIENTB_REG 0x0F0044BC
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x4bc
 */
typedef union {
  struct {
    UINT32 poison_log_addr_hi : 32;
    /* poison_log_addr_hi - Bits[31:0], ROS_V, default = 32'b00000000000000000000000000000000 
       Address 63:32 associated with the poison data
     */
  } Bits;
  UINT32 Data;
} PLSR2_IIO_PCIENTB_STRUCT;




/* XPCORERRCOUNTER_IIO_PCIENTB_REG supported on:                              */
/*       SKX_A0 (0x401004D0)                                                  */
/*       SKX (0x401004D0)                                                     */
/* Register default value:              0x00000000                            */
#define XPCORERRCOUNTER_IIO_PCIENTB_REG 0x0F0044D0
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x4D0
 */
typedef union {
  struct {
    UINT32 error_count : 16;
    /* error_count - Bits[15:0], RWS_V, default = 16'b0  */
    UINT32 receiver_error_mask : 1;
    /* receiver_error_mask - Bits[16:16], RWS, default = 1'b0  */
    UINT32 bad_tlp_mask : 1;
    /* bad_tlp_mask - Bits[17:17], RWS, default = 1'b0  */
    UINT32 bad_dllp_mask : 1;
    /* bad_dllp_mask - Bits[18:18], RWS, default = 1'b0  */
    UINT32 replay_num_rollover_mask : 1;
    /* replay_num_rollover_mask - Bits[19:19], RWS, default = 1'b0  */
    UINT32 replay_timer_timeout_mask : 1;
    /* replay_timer_timeout_mask - Bits[20:20], RWS, default = 1'b0  */
    UINT32 advisory_nonfatal_mask : 1;
    /* advisory_nonfatal_mask - Bits[21:21], RWS, default = 1'b0  */
    UINT32 rsvd : 10;
    /* rsvd - Bits[31:22], n/a, default = n/a 
       Padding added by header generation tool.
     */
  } Bits;
  UINT32 Data;
} XPCORERRCOUNTER_IIO_PCIENTB_STRUCT;


/* XPCORERRTHRESHOLD_IIO_PCIENTB_REG supported on:                            */
/*       SKX_A0 (0x201004D4)                                                  */
/*       SKX (0x201004D4)                                                     */
/* Register default value:              0x0000                                */
#define XPCORERRTHRESHOLD_IIO_PCIENTB_REG 0x0F0024D4
/* Struct format extracted from XML file SKX\1.0.0.CFG_NTB.xml.
 * generated by critter 00_0_0x4D4
 */
typedef union {
  struct {
    UINT16 error_threshold : 15;
    /* error_threshold - Bits[14:0], RWS, default = 15'b0  */
    UINT16 error_threshold_enable : 1;
    /* error_threshold_enable - Bits[15:15], RWS, default = 1'b0  */
  } Bits;
  UINT16 Data;
} XPCORERRTHRESHOLD_IIO_PCIENTB_STRUCT;


#endif /* IIO_PCIENTB_h */
